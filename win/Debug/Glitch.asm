; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.30501.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
CONST	SEGMENT
$SG117954 DB	'%s v%d.%d', 0dH, '%s', 00H
	ORG $+3
$SG117955 DB	'http://syuilo.com', 00H
	ORG $+2
$SG117956 DB	'open', 00H
	ORG $+3
$SG118045 DB	'ON', 00H
	ORG $+1
$SG117991 DB	083H, 'X', 083H, 'L', 083H, 083H, 083H, 093H, 083H, 089H, 083H
	DB	'C', 083H, 093H, 00H
	ORG $+1
$SG117992 DB	'Random|Manual', 00H
	ORG $+2
$SG118007 DB	'Scanline position', 00H
	ORG $+2
$SG118060 DB	083H, 08bH, 081H, '[', 083H, 'g', 00H
	ORG $+1
$SG118091 DB	'ON', 00H
	ORG $+1
$SG118022 DB	'Scanline height', 00H
$SG118044 DB	08dH, 082H, 082H, 0b3H, 082H, 0ccH, 082H, 0ceH, 082H, 0e7H
	DB	082H, 0c2H, 082H, 0abH, 00H
	ORG $+1
$SG118075 DB	08dH, 0c4H, 08bH, 'A', 00H
	ORG $+3
$SG118090 DB	08dH, 087H, 090H, 0acH, 00H
	ORG $+3
$SG118106 DB	'Glitch blend', 00H
	ORG $+3
$SG118128 DB	'Seed control', 00H
	ORG $+3
$SG118129 DB	'Automatic|Manual', 00H
	ORG $+3
$SG118243 DB	'Amount', 00H
	ORG $+1
$SG118326 DB	'ON', 00H
	ORG $+1
$SG118144 DB	'Random seed', 00H
$SG118342 DB	'ON', 00H
	ORG $+1
$SG118159 DB	083H, 'J', 083H, 089H, 081H, '[', 083H, 'V', 083H, 't', 083H
	DB	'^', 00H
	ORG $+3
$SG118174 DB	083H, 'J', 083H, 089H, 081H, '[', 083H, 'V', 083H, 't', 083H
	DB	'^', 082H, 0f0H, 08eH, 'g', 097H, 'p', 00H
	ORG $+1
$SG118358 DB	'ON', 00H
	ORG $+1
$SG118175 DB	'Enabled', 00H
$SG118190 DB	'Frequency', 00H
	ORG $+2
$SG118212 DB	'Type', 00H
	ORG $+7
$SG118228 DB	'Threshold (', 082H, 0b5H, 082H, 0abH, 082H, 0a2H, 092H, 'l'
	DB	')', 00H
	ORG $+3
$SG118213 DB	'R - G, B (R', 082H, 0f0H, 092H, 086H, 090H, 'S', 082H, 0c9H
	DB	082H, 0b5H, 082H, 0c4H, 081H, 'AG', 082H, 0c6H, 'B', 082H, 0c9H
	DB	095H, 0aaH, 097H, 0a3H, 082H, 0b5H, 082H, 0dcH, 082H, 0b7H, ')'
	DB	'|G - R, B (G', 082H, 0f0H, 092H, 086H, 090H, 'S', 082H, 0c9H, 082H
	DB	0b5H, 082H, 0c4H, 081H, 'AR', 082H, 0c6H, 'B', 082H, 0c9H, 095H
	DB	0aaH, 097H, 0a3H, 082H, 0b5H, 082H, 0dcH, 082H, 0b7H, ')|B - R'
	DB	', G (B', 082H, 0f0H, 092H, 086H, 090H, 'S', 082H, 0c9H, 082H, 0b5H
	DB	082H, 0c4H, 081H, 'AR', 082H, 0c6H, 'G', 082H, 0c9H, 095H, 0aaH
	DB	097H, 0a3H, 082H, 0b5H, 082H, 0dcH, 082H, 0b7H, ')|Random', 00H
$SG118272 DB	083H, 'J', 083H, 089H, 081H, '[', 083H, '~', 083H, 'L', 083H
	DB	'T', 00H
	ORG $+3
$SG118287 DB	083H, 'J', 083H, 089H, 081H, '[', 083H, '~', 083H, 'L', 083H
	DB	'T', 082H, 0f0H, 08eH, 'g', 097H, 'p', 00H
	ORG $+1
$SG118374 DB	'ON', 00H
	ORG $+1
$SG118288 DB	'Enabled', 00H
$SG118303 DB	'Frequency', 00H
	ORG $+2
$SG118325 DB	'R', 090H, 'M', 08dH, 086H, 00H
	ORG $+2
$SG118341 DB	'G', 090H, 'M', 08dH, 086H, 00H
	ORG $+2
$SG118357 DB	'B', 090H, 'M', 08dH, 086H, 00H
	ORG $+2
$SG118390 DB	'ON', 00H
	ORG $+1
$SG118373 DB	'Black', 090H, 'M', 08dH, 086H, 00H
	ORG $+2
$SG118406 DB	'ON', 00H
	ORG $+1
$SG118389 DB	'White', 090H, 'M', 08dH, 086H, 00H
	ORG $+2
$SG118453 DB	'ON', 00H
	ORG $+1
$SG118405 DB	'Alpha', 090H, 'M', 08dH, 086H, 00H
	ORG $+2
$SG118504 DB	083H, 'V', 083H, 't', 083H, '^', 00H
	ORG $+5
$SG118421 DB	083H, 'J', 083H, 'X', 083H, '^', 083H, 080H, 083H, 'J', 083H
	DB	089H, 081H, '[', 082H, 0f0H, 08eH, 'g', 097H, 'p', 00H
	ORG $+3
$SG118422 DB	'Enabled', 00H
$SG118437 DB	083H, 'J', 083H, 'X', 083H, '^', 083H, 080H, 083H, 'J', 083H
	DB	089H, 081H, '[', 00H
	ORG $+1
$SG118452 DB	083H, '~', 083H, 'b', 083H, 'N', 083H, 'X', 082H, 0c5H, 082H
	DB	0cdH, 082H, 0c8H, 082H, 0adH, 093H, 'h', 082H, 0e8H, 082H, 0c2H
	DB	082H, 0d4H, 082H, 0b7H, 00H
	ORG $+5
$SG118468 DB	083H, 'V', 083H, 'O', 083H, 'i', 083H, 08bH, 082H, 0ccH, 08bH
	DB	0adH, 082H, 0b3H, 00H
	ORG $+1
$SG118519 DB	083H, 'V', 083H, 't', 083H, '^', 082H, 0f0H, 08eH, 'g', 097H
	DB	'p', 00H
	ORG $+3
$SG118520 DB	'Enabled', 00H
$SG118535 DB	'Frequency', 00H
	ORG $+6
$SG118557 DB	'Direction', 00H
	ORG $+6
$SG118558 DB	'Left|Right|Both', 00H
$SG118573 DB	'Border', 00H
	ORG $+1
$SG118589 DB	'Amount', 00H
	ORG $+1
$SG118574 DB	'None|Expand|Front|Mirror|Tile|Opposite mirrors|Scale', 081H
	DB	']up|Scale', 081H, ']down|Render mirror', 00H
	ORG $+5
$SG118625 DB	083H, 08cH, 083H, 'C', 083H, 084H, 081H, '[', 083H, '~', 083H
	DB	'b', 083H, 'N', 083H, 'X', 00H
	ORG $+7
$SG118640 DB	083H, 08cH, 083H, 'C', 083H, 084H, 081H, '[', 083H, '~', 083H
	DB	'b', 083H, 'N', 083H, 'X', 082H, 0f0H, 08eH, 'g', 097H, 'p', 00H
	ORG $+1
$SG118641 DB	'Enabled', 00H
$SG118656 DB	'Frequency', 00H
	ORG $+2
$SG118678 DB	'Source', 00H
	ORG $+5
$SG118693 DB	'Source Position', 00H
$SG118694 DB	'Source|Random', 00H
	ORG $+2
$SG118723 DB	083H, 't', 083H, 08aH, 081H, '[', 083H, 'U', 081H, '[', 00H
	ORG $+5
$SG118738 DB	083H, 't', 083H, 08aH, 081H, '[', 083H, 'U', 081H, '[', 082H
	DB	0f0H, 08eH, 'g', 097H, 'p', 00H
	ORG $+7
$SG118739 DB	'Enabled', 00H
$SG118754 DB	'Frequency', 00H
	ORG $+2
$SG118776 DB	'Time', 00H
CONST	ENDS
_DATA	SEGMENT
mti	DD	0271H
_DATA	ENDS
PUBLIC	?LoadSuite@AEGP_SuiteHandler@@AEBAPEAXPEADJ@Z	; AEGP_SuiteHandler::LoadSuite
PUBLIC	?ParamUtilsSuite1@AEGP_SuiteHandler@@QEBAPEAUPF_ParamUtilsSuite1@@XZ ; AEGP_SuiteHandler::ParamUtilsSuite1
PUBLIC	?ANSICallbacksSuite1@AEGP_SuiteHandler@@QEBAPEAUPF_ANSICallbacksSuite1@@XZ ; AEGP_SuiteHandler::ANSICallbacksSuite1
PUBLIC	EntryPointFunc
PUBLIC	?init_genrand@@YAXK@Z				; init_genrand
PUBLIC	?init_by_array@@YAXQEAKH@Z			; init_by_array
PUBLIC	?genrand_int32@@YAKXZ				; genrand_int32
PUBLIC	?genrand_int31@@YAJXZ				; genrand_int31
PUBLIC	?genrand_real1@@YANXZ				; genrand_real1
PUBLIC	?genrand_real2@@YANXZ				; genrand_real2
PUBLIC	?genrand_real3@@YANXZ				; genrand_real3
PUBLIC	?genrand_res53@@YANXZ				; genrand_res53
PUBLIC	??_C@_0O@JPGHEGPP@PF?5ANSI?5Suite?$AA@		; `string'
PUBLIC	??_C@_0BF@PLAGCOPE@PF?5Param?5Utils?5Suite?$AA@	; `string'
PUBLIC	??_R0J@8					; long `RTTI Type Descriptor'
PUBLIC	__real@3ca0000000000000
PUBLIC	__real@3df0000000000000
PUBLIC	__real@3df0000000100000
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@4059000000000000
PUBLIC	__real@4190000000000000
EXTRN	__imp_ShellExecuteA:PROC
EXTRN	__imp_rand:PROC
EXTRN	GetStringPtr:PROC
EXTRN	?MissingSuiteError@AEGP_SuiteHandler@@AEBAXXZ:PROC ; AEGP_SuiteHandler::MissingSuiteError
EXTRN	??0AEGP_SuiteHandler@@QEAA@PEBUSPBasicSuite@@@Z:PROC ; AEGP_SuiteHandler::AEGP_SuiteHandler
EXTRN	??1AEGP_SuiteHandler@@QEAA@XZ:PROC		; AEGP_SuiteHandler::~AEGP_SuiteHandler
EXTRN	__CxxFrameHandler3:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__GSHandlerCheck_EH:PROC
EXTRN	__chkstk:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	??_7type_info@@6B@:BYTE				; type_info::`vftable'
EXTRN	__ImageBase:BYTE
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
_BSS	SEGMENT
mt	DD	0270H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?LoadSuite@AEGP_SuiteHandler@@AEBAPEAXPEADJ@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$?LoadSuite@AEGP_SuiteHandler@@AEBAPEAXPEADJ@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ParamUtilsSuite1@AEGP_SuiteHandler@@QEBAPEAUPF_ParamUtilsSuite1@@XZ DD imagerel $LN4
	DD	imagerel $LN4+76
	DD	imagerel $unwind$?ParamUtilsSuite1@AEGP_SuiteHandler@@QEBAPEAUPF_ParamUtilsSuite1@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ANSICallbacksSuite1@AEGP_SuiteHandler@@QEBAPEAUPF_ANSICallbacksSuite1@@XZ DD imagerel $LN4
	DD	imagerel $LN4+76
	DD	imagerel $unwind$?ANSICallbacksSuite1@AEGP_SuiteHandler@@QEBAPEAUPF_ANSICallbacksSuite1@@XZ
pdata	ENDS
pdata	SEGMENT
$pdata$EntryPointFunc DD imagerel $LN19
	DD	imagerel $LN19+412
	DD	imagerel $unwind$EntryPointFunc
pdata	ENDS
pdata	SEGMENT
$pdata$EntryPointFunc$catch$0 DD imagerel EntryPointFunc$catch$0
	DD	imagerel EntryPointFunc$catch$0+27
	DD	imagerel $unwind$EntryPointFunc$catch$0
pdata	ENDS
pdata	SEGMENT
$pdata$?init_by_array@@YAXQEAKH@Z DD imagerel $LN14
	DD	imagerel $LN14+592
	DD	imagerel $unwind$?init_by_array@@YAXQEAKH@Z
$pdata$?genrand_int32@@YAKXZ DD imagerel $LN11
	DD	imagerel $LN11+595
	DD	imagerel $unwind$?genrand_int32@@YAKXZ
$pdata$?genrand_int31@@YAJXZ DD imagerel $LN3
	DD	imagerel $LN3+16
	DD	imagerel $unwind$?genrand_int31@@YAJXZ
$pdata$?genrand_real1@@YANXZ DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?genrand_real1@@YANXZ
$pdata$?genrand_real2@@YANXZ DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?genrand_real2@@YANXZ
$pdata$?genrand_real3@@YANXZ DD imagerel $LN3
	DD	imagerel $LN3+37
	DD	imagerel $unwind$?genrand_real3@@YANXZ
$pdata$?genrand_res53@@YANXZ DD imagerel $LN3
	DD	imagerel $LN3+71
	DD	imagerel $unwind$?genrand_res53@@YANXZ
$pdata$?UpdateParameterUI@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z DD imagerel ?UpdateParameterUI@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z
	DD	imagerel ?UpdateParameterUI@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z+3822
	DD	imagerel $unwind$?UpdateParameterUI@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0??UpdateParameterUI@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z@4HA DD imagerel ?dtor$0@?0??UpdateParameterUI@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z@4HA
	DD	imagerel ?dtor$0@?0??UpdateParameterUI@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z@4HA+27
	DD	imagerel $unwind$?dtor$0@?0??UpdateParameterUI@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z@4HA
pdata	ENDS
pdata	SEGMENT
$pdata$?About@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z DD imagerel ?About@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z
	DD	imagerel ?About@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z+239
	DD	imagerel $unwind$?About@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0??About@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z@4HA DD imagerel ?dtor$0@?0??About@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z@4HA
	DD	imagerel ?dtor$0@?0??About@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z@4HA+24
	DD	imagerel $unwind$?dtor$0@?0??About@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z@4HA
pdata	ENDS
pdata	SEGMENT
$pdata$?ParamsSetup@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z DD imagerel ?ParamsSetup@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z
	DD	imagerel ?ParamsSetup@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z+15164
	DD	imagerel $unwind$?ParamsSetup@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z
$pdata$?initParamsInfo@@YA?AUParamInfo@@QEAPEAUPF_ParamDef@@PEAUPF_InData@@@Z DD imagerel ?initParamsInfo@@YA?AUParamInfo@@QEAPEAUPF_ParamDef@@PEAUPF_InData@@@Z
	DD	imagerel ?initParamsInfo@@YA?AUParamInfo@@QEAPEAUPF_ParamDef@@PEAUPF_InData@@@Z+1659
	DD	imagerel $unwind$?initParamsInfo@@YA?AUParamInfo@@QEAPEAUPF_ParamDef@@PEAUPF_InData@@@Z
$pdata$?pSet@@YAJUParamInfo@@PEAUPF_Pixel@@JJJU2@@Z DD imagerel ?pSet@@YAJUParamInfo@@PEAUPF_Pixel@@JJJU2@@Z
	DD	imagerel ?pSet@@YAJUParamInfo@@PEAUPF_Pixel@@JJJU2@@Z+228
	DD	imagerel $unwind$?pSet@@YAJUParamInfo@@PEAUPF_Pixel@@JJJU2@@Z
$pdata$?colorShifter@@YAJPEAUPF_Pixel@@0UParamInfo@@JJJJJ@Z DD imagerel ?colorShifter@@YAJPEAUPF_Pixel@@0UParamInfo@@JJJJJ@Z
	DD	imagerel ?colorShifter@@YAJPEAUPF_Pixel@@0UParamInfo@@JJJJJ@Z+1180
	DD	imagerel $unwind$?colorShifter@@YAJPEAUPF_Pixel@@0UParamInfo@@JJJJJ@Z
$pdata$?color@@YAJPEAUPF_Pixel@@UParamInfo@@JJJJ@Z DD imagerel ?color@@YAJPEAUPF_Pixel@@UParamInfo@@JJJJ@Z
	DD	imagerel ?color@@YAJPEAUPF_Pixel@@UParamInfo@@JJJJ@Z+1628
	DD	imagerel $unwind$?color@@YAJPEAUPF_Pixel@@UParamInfo@@JJJJ@Z
$pdata$?shifter@@YAJPEAUPF_Pixel@@0UParamInfo@@JJJJJ@Z DD imagerel ?shifter@@YAJPEAUPF_Pixel@@0UParamInfo@@JJJJJ@Z
	DD	imagerel ?shifter@@YAJPEAUPF_Pixel@@0UParamInfo@@JJJJJ@Z+1520
	DD	imagerel $unwind$?shifter@@YAJPEAUPF_Pixel@@0UParamInfo@@JJJJJ@Z
$pdata$?layerMix@@YAJPEAUPF_Pixel@@0UParamInfo@@JJJJJJJ@Z DD imagerel ?layerMix@@YAJPEAUPF_Pixel@@0UParamInfo@@JJJJJJJ@Z
	DD	imagerel ?layerMix@@YAJPEAUPF_Pixel@@0UParamInfo@@JJJJJJJ@Z+555
	DD	imagerel $unwind$?layerMix@@YAJPEAUPF_Pixel@@0UParamInfo@@JJJJJJJ@Z
$pdata$?Render@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z DD imagerel ?Render@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z
	DD	imagerel ?Render@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z+1858
	DD	imagerel $unwind$?Render@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0??Render@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z@4HA DD imagerel ?dtor$0@?0??Render@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z@4HA
	DD	imagerel ?dtor$0@?0??Render@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z@4HA+27
	DD	imagerel $unwind$?dtor$0@?0??Render@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z@4HA
pdata	ENDS
pdata	SEGMENT
$pdata$?MakeParamCopy@@YAJQEAPEAUPF_ParamDef@@QEAU1@@Z DD imagerel ?MakeParamCopy@@YAJQEAPEAUPF_ParamDef@@QEAU1@@Z
	DD	imagerel ?MakeParamCopy@@YAJQEAPEAUPF_ParamDef@@QEAU1@@Z+2169
	DD	imagerel $unwind$?MakeParamCopy@@YAJQEAPEAUPF_ParamDef@@QEAU1@@Z
pdata	ENDS
;	COMDAT __real@4190000000000000
CONST	SEGMENT
__real@4190000000000000 DQ 04190000000000000r	; 6.71089e+007
CONST	ENDS
;	COMDAT __real@4059000000000000
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3df0000000100000
CONST	SEGMENT
__real@3df0000000100000 DQ 03df0000000100000r	; 2.32831e-010
CONST	ENDS
;	COMDAT __real@3df0000000000000
CONST	SEGMENT
__real@3df0000000000000 DQ 03df0000000000000r	; 2.32831e-010
CONST	ENDS
;	COMDAT __real@3ca0000000000000
CONST	SEGMENT
__real@3ca0000000000000 DQ 03ca0000000000000r	; 1.11022e-016
CONST	ENDS
;	COMDAT ??_R0J@8
data$r	SEGMENT
??_R0J@8 DQ	FLAT:??_7type_info@@6B@			; long `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.J', 00H
data$r	ENDS
;	COMDAT ?mag01@?1??genrand_int32@@YAKXZ@4PAKA
_DATA	SEGMENT
?mag01@?1??genrand_int32@@YAKXZ@4PAKA DD 00H		; `genrand_int32'::`2'::mag01
	DD	09908b0dfH
_DATA	ENDS
;	COMDAT ??_C@_0BF@PLAGCOPE@PF?5Param?5Utils?5Suite?$AA@
CONST	SEGMENT
??_C@_0BF@PLAGCOPE@PF?5Param?5Utils?5Suite?$AA@ DB 'PF Param Utils Suite', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@JPGHEGPP@PF?5ANSI?5Suite?$AA@
CONST	SEGMENT
??_C@_0O@JPGHEGPP@PF?5ANSI?5Suite?$AA@ DB 'PF ANSI Suite', 00H ; `string'
CONST	ENDS
CONST	SEGMENT
	ORG $+7
$cppxdata$EntryPointFunc DD 019930522H
	DD	02H
	DD	imagerel $stateUnwindMap$EntryPointFunc
	DD	01H
	DD	imagerel $tryMap$EntryPointFunc
	DD	04H
	DD	imagerel $ip2state$EntryPointFunc
	DD	040H
	DD	00H
	DD	01H
$cppxdata$?UpdateParameterUI@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$?UpdateParameterUI@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$?UpdateParameterUI@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z
	DD	0100H
	DD	00H
	DD	01H
$cppxdata$?About@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$?About@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$?About@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z
	DD	050H
	DD	00H
	DD	01H
$cppxdata$?Render@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$?Render@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z
	DD	00H
	DD	00H
	DD	05H
	DD	imagerel $ip2state$?Render@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z
	DD	0c8H
	DD	00H
	DD	01H
CONST	ENDS
xdata	SEGMENT
$unwind$EntryPointFunc DD 012019H
	DD	0a217H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$EntryPointFunc
$stateUnwindMap$EntryPointFunc DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
$tryMap$EntryPointFunc DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	imagerel $handlerMap$0$EntryPointFunc
$handlerMap$0$EntryPointFunc DD 08H
	DD	FLAT:??_R0J@8
	DD	048H
	DD	imagerel EntryPointFunc$catch$0
	DD	038H
$ip2state$EntryPointFunc DD imagerel EntryPointFunc
	DD	0ffffffffH
	DD	imagerel EntryPointFunc+40
	DD	00H
	DD	imagerel EntryPointFunc+341
	DD	0ffffffffH
	DD	imagerel EntryPointFunc+352
	DD	00H
$unwind$EntryPointFunc$catch$0 DD 020a19H
	DD	05006320aH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$EntryPointFunc
$unwind$?init_by_array@@YAXQEAKH@Z DD 010d01H
	DD	0620dH
$unwind$?genrand_int32@@YAKXZ DD 010401H
	DD	06204H
$unwind$?genrand_int31@@YAJXZ DD 010401H
	DD	04204H
$unwind$?genrand_real1@@YANXZ DD 010401H
	DD	04204H
$unwind$?genrand_real2@@YANXZ DD 010401H
	DD	04204H
$unwind$?genrand_real3@@YANXZ DD 010401H
	DD	04204H
$unwind$?genrand_res53@@YANXZ DD 010401H
	DD	06204H
$unwind$?UpdateParameterUI@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z DD 044119H
	DD	05370123H
	DD	060157016H
	DD	imagerel __GSHandlerCheck_EH
	DD	imagerel $cppxdata$?UpdateParameterUI@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z
	DD	029a2H
$stateUnwindMap$?UpdateParameterUI@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??UpdateParameterUI@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z@4HA
$ip2state$?UpdateParameterUI@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z DD imagerel ?UpdateParameterUI@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z
	DD	0ffffffffH
	DD	imagerel ?UpdateParameterUI@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z+102
	DD	00H
	DD	imagerel ?UpdateParameterUI@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z+3779
	DD	0ffffffffH
$unwind$?dtor$0@?0??UpdateParameterUI@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z@4HA DD 020601H
	DD	050023206H
$unwind$?About@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z DD 022411H
	DD	079011bH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?About@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z
$stateUnwindMap$?About@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??About@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z@4HA
$ip2state$?About@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z DD imagerel ?About@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z
	DD	0ffffffffH
	DD	imagerel ?About@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z+62
	DD	00H
	DD	imagerel ?About@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z+217
	DD	0ffffffffH
$unwind$?dtor$0@?0??About@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z@4HA DD 020601H
	DD	050023206H
$unwind$?ParamsSetup@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z DD 022d19H
	DD	0b1011bH
	DD	imagerel __GSHandlerCheck
	DD	0570H
$unwind$?initParamsInfo@@YA?AUParamInfo@@QEAPEAUPF_ParamDef@@PEAUPF_InData@@@Z DD 042a19H
	DD	0430118H
	DD	060107011H
	DD	imagerel __GSHandlerCheck
	DD	0200H
$unwind$?pSet@@YAJUParamInfo@@PEAUPF_Pixel@@JJJU2@@Z DD 011801H
	DD	02218H
$unwind$?colorShifter@@YAJPEAUPF_Pixel@@0UParamInfo@@JJJJJ@Z DD 041d01H
	DD	04d011dH
	DD	060157016H
$unwind$?color@@YAJPEAUPF_Pixel@@UParamInfo@@JJJJ@Z DD 042f19H
	DD	031011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0170H
$unwind$?shifter@@YAJPEAUPF_Pixel@@0UParamInfo@@JJJJJ@Z DD 041d01H
	DD	031011dH
	DD	060157016H
$unwind$?layerMix@@YAJPEAUPF_Pixel@@0UParamInfo@@JJJJJJJ@Z DD 042f19H
	DD	03d011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	01d0H
$unwind$?Render@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z DD 043b19H
	DD	015b011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck_EH
	DD	imagerel $cppxdata$?Render@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z
	DD	0ac2H
$stateUnwindMap$?Render@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??Render@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z@4HA
$ip2state$?Render@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z DD imagerel ?Render@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z
	DD	0ffffffffH
	DD	imagerel ?Render@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z+99
	DD	00H
	DD	imagerel ?Render@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z+274
	DD	0ffffffffH
	DD	imagerel ?Render@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z+299
	DD	00H
	DD	imagerel ?Render@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z+1812
	DD	0ffffffffH
$unwind$?dtor$0@?0??Render@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z@4HA DD 020601H
	DD	050023206H
$unwind$?MakeParamCopy@@YAJQEAPEAUPF_ParamDef@@QEAU1@@Z DD 031001H
	DD	0700c4210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ANSICallbacksSuite1@AEGP_SuiteHandler@@QEBAPEAUPF_ANSICallbacksSuite1@@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ParamUtilsSuite1@AEGP_SuiteHandler@@QEBAPEAUPF_ParamUtilsSuite1@@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?LoadSuite@AEGP_SuiteHandler@@AEBAPEAXPEADJ@Z DD 011301H
	DD	06213H
xdata	ENDS
; Function compile flags: /Odtp
; File c:\users\syuilo\documents\visual studio 2013\projects\after_effects_cs5_sdk_win\adobe after effects cs5 win sdk\examples\template\glitch\glitch.cpp
_TEXT	SEGMENT
iS$1 = 0
_t$2 = 4
tv72 = 8
_p$3 = 16
actual$ = 64
copy$ = 72
?MakeParamCopy@@YAJQEAPEAUPF_ParamDef@@QEAU1@@Z PROC	; MakeParamCopy

; 972  : {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 40					; 00000028H

; 973  : 	for (A_short iS = 0; iS < GLITCH_NUM_PARAMS; ++iS) {

	xor	eax, eax
	mov	WORD PTR iS$1[rsp], ax
	jmp	SHORT $LN8@MakeParamC
$LN7@MakeParamC:
	movzx	eax, WORD PTR iS$1[rsp]
	inc	ax
	mov	WORD PTR iS$1[rsp], ax
$LN8@MakeParamC:
	movsx	eax, WORD PTR iS$1[rsp]
	cmp	eax, 50					; 00000032H
	jge	SHORT $LN6@MakeParamC
$LN5@MakeParamC:

; 974  : 		AEFX_CLR_STRUCT(copy[iS]); // clean params are important!

	mov	DWORD PTR _t$2[rsp], 176		; 000000b0H
	movsx	rax, WORD PTR iS$1[rsp]
	imul	rax, rax, 176				; 000000b0H
	mov	rcx, QWORD PTR copy$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR _p$3[rsp], rax
$LN2@MakeParamC:
	mov	eax, DWORD PTR _t$2[rsp]
	mov	DWORD PTR tv72[rsp], eax
	mov	eax, DWORD PTR _t$2[rsp]
	dec	eax
	mov	DWORD PTR _t$2[rsp], eax
	cmp	DWORD PTR tv72[rsp], 0
	je	SHORT $LN1@MakeParamC
	mov	rax, QWORD PTR _p$3[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR _p$3[rsp]
	inc	rax
	mov	QWORD PTR _p$3[rsp], rax
	jmp	SHORT $LN2@MakeParamC
$LN1@MakeParamC:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN5@MakeParamC

; 975  : 	}

	jmp	SHORT $LN7@MakeParamC
$LN6@MakeParamC:

; 976  : 	copy[GLITCH_SCANLINE] = *actual[GLITCH_SCANLINE];

	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR actual$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	ecx, 176				; 000000b0H
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR copy$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 176				; 000000b0H
	rep movsb

; 977  : 	copy[GLITCH_SCANLINE_POSITION] = *actual[GLITCH_SCANLINE_POSITION];

	mov	eax, 8
	imul	rax, rax, 2
	mov	rcx, QWORD PTR actual$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	ecx, 176				; 000000b0H
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR copy$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 176				; 000000b0H
	rep movsb

; 978  : 	copy[GLITCH_SCANLINE_HEIGHT] = *actual[GLITCH_SCANLINE_HEIGHT];

	mov	eax, 8
	imul	rax, rax, 3
	mov	rcx, QWORD PTR actual$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	ecx, 176				; 000000b0H
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR copy$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 176				; 000000b0H
	rep movsb

; 979  : 	copy[GLITCH_RANDOM_HEIGHT] = *actual[GLITCH_RANDOM_HEIGHT];

	mov	eax, 8
	imul	rax, rax, 4
	mov	rcx, QWORD PTR actual$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	ecx, 176				; 000000b0H
	imul	rcx, rcx, 4
	mov	rdx, QWORD PTR copy$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 176				; 000000b0H
	rep movsb

; 980  : 	copy[GLITCH_AREA_COUNT] = *actual[GLITCH_AREA_COUNT];

	mov	eax, 8
	imul	rax, rax, 5
	mov	rcx, QWORD PTR actual$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	ecx, 176				; 000000b0H
	imul	rcx, rcx, 5
	mov	rdx, QWORD PTR copy$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 176				; 000000b0H
	rep movsb

; 981  : 	copy[GLITCH_AREA_GLITCH_COUNT] = *actual[GLITCH_AREA_GLITCH_COUNT];

	mov	eax, 8
	imul	rax, rax, 6
	mov	rcx, QWORD PTR actual$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	ecx, 176				; 000000b0H
	imul	rcx, rcx, 6
	mov	rdx, QWORD PTR copy$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 176				; 000000b0H
	rep movsb

; 982  : 	copy[GLITCH_COMPOSE] = *actual[GLITCH_COMPOSE];

	mov	eax, 8
	imul	rax, rax, 7
	mov	rcx, QWORD PTR actual$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	ecx, 176				; 000000b0H
	imul	rcx, rcx, 7
	mov	rdx, QWORD PTR copy$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 176				; 000000b0H
	rep movsb

; 983  : 	copy[GLITCH_OPACITY] = *actual[GLITCH_OPACITY];

	mov	eax, 8
	imul	rax, rax, 8
	mov	rcx, QWORD PTR actual$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	ecx, 176				; 000000b0H
	imul	rcx, rcx, 8
	mov	rdx, QWORD PTR copy$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 176				; 000000b0H
	rep movsb

; 984  : 	copy[GLITCH_SEED_CONTROLL] = *actual[GLITCH_SEED_CONTROLL];

	mov	eax, 8
	imul	rax, rax, 9
	mov	rcx, QWORD PTR actual$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	ecx, 176				; 000000b0H
	imul	rcx, rcx, 9
	mov	rdx, QWORD PTR copy$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 176				; 000000b0H
	rep movsb

; 985  : 	copy[GLITCH_AREA_SEED] = *actual[GLITCH_AREA_SEED];

	mov	eax, 8
	imul	rax, rax, 10
	mov	rcx, QWORD PTR actual$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	ecx, 176				; 000000b0H
	imul	rcx, rcx, 10
	mov	rdx, QWORD PTR copy$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 176				; 000000b0H
	rep movsb

; 986  : 	copy[GLITCH_TOPIC_COLORSHIFTER] = *actual[GLITCH_TOPIC_COLORSHIFTER];

	mov	eax, 8
	imul	rax, rax, 11
	mov	rcx, QWORD PTR actual$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	ecx, 176				; 000000b0H
	imul	rcx, rcx, 11
	mov	rdx, QWORD PTR copy$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 176				; 000000b0H
	rep movsb

; 987  : 	copy[GLITCH_COLORSHIFTER] = *actual[GLITCH_COLORSHIFTER];

	mov	eax, 8
	imul	rax, rax, 12
	mov	rcx, QWORD PTR actual$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	ecx, 176				; 000000b0H
	imul	rcx, rcx, 12
	mov	rdx, QWORD PTR copy$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 176				; 000000b0H
	rep movsb

; 988  : 	copy[GLITCH_COLORSHIFTER_FREQUENCY] = *actual[GLITCH_COLORSHIFTER_FREQUENCY];

	mov	eax, 8
	imul	rax, rax, 13
	mov	rcx, QWORD PTR actual$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	ecx, 176				; 000000b0H
	imul	rcx, rcx, 13
	mov	rdx, QWORD PTR copy$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 176				; 000000b0H
	rep movsb

; 989  : 	copy[GLITCH_COLORSHIFTER_TYPE] = *actual[GLITCH_COLORSHIFTER_TYPE];

	mov	eax, 8
	imul	rax, rax, 14
	mov	rcx, QWORD PTR actual$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	ecx, 176				; 000000b0H
	imul	rcx, rcx, 14
	mov	rdx, QWORD PTR copy$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 176				; 000000b0H
	rep movsb

; 990  : 	copy[GLITCH_COLORSHIFTER_THRESHOLD] = *actual[GLITCH_COLORSHIFTER_THRESHOLD];

	mov	eax, 8
	imul	rax, rax, 15
	mov	rcx, QWORD PTR actual$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	ecx, 176				; 000000b0H
	imul	rcx, rcx, 15
	mov	rdx, QWORD PTR copy$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 176				; 000000b0H
	rep movsb

; 991  : 	copy[GLITCH_COLORSHIFTER_AMOUNT] = *actual[GLITCH_COLORSHIFTER_AMOUNT];

	mov	eax, 8
	imul	rax, rax, 16
	mov	rcx, QWORD PTR actual$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	ecx, 176				; 000000b0H
	imul	rcx, rcx, 16
	mov	rdx, QWORD PTR copy$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 176				; 000000b0H
	rep movsb

; 992  : 	copy[GLITCH_TOPIC_COLORSHIFTER_END] = *actual[GLITCH_TOPIC_COLORSHIFTER_END];

	mov	eax, 8
	imul	rax, rax, 17
	mov	rcx, QWORD PTR actual$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	ecx, 176				; 000000b0H
	imul	rcx, rcx, 17
	mov	rdx, QWORD PTR copy$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 176				; 000000b0H
	rep movsb

; 993  : 	copy[GLITCH_TOPIC_COLOR] = *actual[GLITCH_TOPIC_COLOR];

	mov	eax, 8
	imul	rax, rax, 18
	mov	rcx, QWORD PTR actual$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	ecx, 176				; 000000b0H
	imul	rcx, rcx, 18
	mov	rdx, QWORD PTR copy$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 176				; 000000b0H
	rep movsb

; 994  : 	copy[GLITCH_COLOR] = *actual[GLITCH_COLOR];

	mov	eax, 8
	imul	rax, rax, 19
	mov	rcx, QWORD PTR actual$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	ecx, 176				; 000000b0H
	imul	rcx, rcx, 19
	mov	rdx, QWORD PTR copy$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 176				; 000000b0H
	rep movsb

; 995  : 	copy[GLITCH_COLOR_FREQUENCY] = *actual[GLITCH_COLOR_FREQUENCY];

	mov	eax, 8
	imul	rax, rax, 20
	mov	rcx, QWORD PTR actual$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	ecx, 176				; 000000b0H
	imul	rcx, rcx, 20
	mov	rdx, QWORD PTR copy$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 176				; 000000b0H
	rep movsb

; 996  : 	copy[GLITCH_COLOR_RED] = *actual[GLITCH_COLOR_RED];

	mov	eax, 8
	imul	rax, rax, 21
	mov	rcx, QWORD PTR actual$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	ecx, 176				; 000000b0H
	imul	rcx, rcx, 21
	mov	rdx, QWORD PTR copy$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 176				; 000000b0H
	rep movsb

; 997  : 	copy[GLITCH_COLOR_GREEN] = *actual[GLITCH_COLOR_GREEN];

	mov	eax, 8
	imul	rax, rax, 22
	mov	rcx, QWORD PTR actual$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	ecx, 176				; 000000b0H
	imul	rcx, rcx, 22
	mov	rdx, QWORD PTR copy$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 176				; 000000b0H
	rep movsb

; 998  : 	copy[GLITCH_COLOR_BLUE] = *actual[GLITCH_COLOR_BLUE];

	mov	eax, 8
	imul	rax, rax, 23
	mov	rcx, QWORD PTR actual$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	ecx, 176				; 000000b0H
	imul	rcx, rcx, 23
	mov	rdx, QWORD PTR copy$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 176				; 000000b0H
	rep movsb

; 999  : 	copy[GLITCH_COLOR_BLACK] = *actual[GLITCH_COLOR_BLACK];

	mov	eax, 8
	imul	rax, rax, 24
	mov	rcx, QWORD PTR actual$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	ecx, 176				; 000000b0H
	imul	rcx, rcx, 24
	mov	rdx, QWORD PTR copy$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 176				; 000000b0H
	rep movsb

; 1000 : 	copy[GLITCH_COLOR_WHITE] = *actual[GLITCH_COLOR_WHITE];

	mov	eax, 8
	imul	rax, rax, 25
	mov	rcx, QWORD PTR actual$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	ecx, 176				; 000000b0H
	imul	rcx, rcx, 25
	mov	rdx, QWORD PTR copy$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 176				; 000000b0H
	rep movsb

; 1001 : 	copy[GLITCH_COLOR_ALPHA] = *actual[GLITCH_COLOR_ALPHA];

	mov	eax, 8
	imul	rax, rax, 26
	mov	rcx, QWORD PTR actual$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	ecx, 176				; 000000b0H
	imul	rcx, rcx, 26
	mov	rdx, QWORD PTR copy$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 176				; 000000b0H
	rep movsb

; 1002 : 	copy[GLITCH_COLOR_USE_CUSTOMCOLOR] = *actual[GLITCH_COLOR_USE_CUSTOMCOLOR];

	mov	eax, 8
	imul	rax, rax, 27
	mov	rcx, QWORD PTR actual$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	ecx, 176				; 000000b0H
	imul	rcx, rcx, 27
	mov	rdx, QWORD PTR copy$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 176				; 000000b0H
	rep movsb

; 1003 : 	copy[GLITCH_COLOR_CUSTOMCOLOR] = *actual[GLITCH_COLOR_CUSTOMCOLOR];

	mov	eax, 8
	imul	rax, rax, 28
	mov	rcx, QWORD PTR actual$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	ecx, 176				; 000000b0H
	imul	rcx, rcx, 28
	mov	rdx, QWORD PTR copy$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 176				; 000000b0H
	rep movsb

; 1004 : 	copy[GLITCH_COLOR_UNMIX] = *actual[GLITCH_COLOR_UNMIX];

	mov	eax, 8
	imul	rax, rax, 29
	mov	rcx, QWORD PTR actual$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	ecx, 176				; 000000b0H
	imul	rcx, rcx, 29
	mov	rdx, QWORD PTR copy$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 176				; 000000b0H
	rep movsb

; 1005 : 	copy[GLITCH_COLOR_MIX] = *actual[GLITCH_COLOR_MIX];

	mov	eax, 8
	imul	rax, rax, 30
	mov	rcx, QWORD PTR actual$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	ecx, 176				; 000000b0H
	imul	rcx, rcx, 30
	mov	rdx, QWORD PTR copy$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 176				; 000000b0H
	rep movsb

; 1006 : 	copy[GLITCH_TOPIC_COLOR_END] = *actual[GLITCH_TOPIC_COLOR_END];

	mov	eax, 8
	imul	rax, rax, 31
	mov	rcx, QWORD PTR actual$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	ecx, 176				; 000000b0H
	imul	rcx, rcx, 31
	mov	rdx, QWORD PTR copy$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 176				; 000000b0H
	rep movsb

; 1007 : 	copy[GLITCH_TOPIC_SHIFTER] = *actual[GLITCH_TOPIC_SHIFTER];

	mov	eax, 8
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR actual$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	ecx, 176				; 000000b0H
	imul	rcx, rcx, 32				; 00000020H
	mov	rdx, QWORD PTR copy$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 176				; 000000b0H
	rep movsb

; 1008 : 	copy[GLITCH_SHIFTER] = *actual[GLITCH_SHIFTER];

	mov	eax, 8
	imul	rax, rax, 33				; 00000021H
	mov	rcx, QWORD PTR actual$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	ecx, 176				; 000000b0H
	imul	rcx, rcx, 33				; 00000021H
	mov	rdx, QWORD PTR copy$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 176				; 000000b0H
	rep movsb

; 1009 : 	copy[GLITCH_SHIFTER_FREQUENCY] = *actual[GLITCH_SHIFTER_FREQUENCY];

	mov	eax, 8
	imul	rax, rax, 34				; 00000022H
	mov	rcx, QWORD PTR actual$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	ecx, 176				; 000000b0H
	imul	rcx, rcx, 34				; 00000022H
	mov	rdx, QWORD PTR copy$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 176				; 000000b0H
	rep movsb

; 1010 : 	copy[GLITCH_SHIFTER_DIRECTION] = *actual[GLITCH_SHIFTER_DIRECTION];

	mov	eax, 8
	imul	rax, rax, 35				; 00000023H
	mov	rcx, QWORD PTR actual$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	ecx, 176				; 000000b0H
	imul	rcx, rcx, 35				; 00000023H
	mov	rdx, QWORD PTR copy$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 176				; 000000b0H
	rep movsb

; 1011 : 	copy[GLITCH_SHIFTER_BORDERTYPE] = *actual[GLITCH_SHIFTER_BORDERTYPE];

	mov	eax, 8
	imul	rax, rax, 36				; 00000024H
	mov	rcx, QWORD PTR actual$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	ecx, 176				; 000000b0H
	imul	rcx, rcx, 36				; 00000024H
	mov	rdx, QWORD PTR copy$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 176				; 000000b0H
	rep movsb

; 1012 : 	copy[GLITCH_SHIFTER_MAX] = *actual[GLITCH_SHIFTER_MAX];

	mov	eax, 8
	imul	rax, rax, 37				; 00000025H
	mov	rcx, QWORD PTR actual$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	ecx, 176				; 000000b0H
	imul	rcx, rcx, 37				; 00000025H
	mov	rdx, QWORD PTR copy$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 176				; 000000b0H
	rep movsb

; 1013 : 	copy[GLITCH_TOPIC_SHIFTER_END] = *actual[GLITCH_TOPIC_SHIFTER_END];

	mov	eax, 8
	imul	rax, rax, 38				; 00000026H
	mov	rcx, QWORD PTR actual$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	ecx, 176				; 000000b0H
	imul	rcx, rcx, 38				; 00000026H
	mov	rdx, QWORD PTR copy$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 176				; 000000b0H
	rep movsb

; 1014 : 	copy[GLITCH_TOPIC_LAYER] = *actual[GLITCH_TOPIC_LAYER];

	mov	eax, 8
	imul	rax, rax, 39				; 00000027H
	mov	rcx, QWORD PTR actual$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	ecx, 176				; 000000b0H
	imul	rcx, rcx, 39				; 00000027H
	mov	rdx, QWORD PTR copy$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 176				; 000000b0H
	rep movsb

; 1015 : 	copy[GLITCH_LAYER] = *actual[GLITCH_LAYER];

	mov	eax, 8
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR actual$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	ecx, 176				; 000000b0H
	imul	rcx, rcx, 40				; 00000028H
	mov	rdx, QWORD PTR copy$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 176				; 000000b0H
	rep movsb

; 1016 : 	copy[GLITCH_LAYER_FREQUENCY] = *actual[GLITCH_LAYER_FREQUENCY];

	mov	eax, 8
	imul	rax, rax, 41				; 00000029H
	mov	rcx, QWORD PTR actual$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	ecx, 176				; 000000b0H
	imul	rcx, rcx, 41				; 00000029H
	mov	rdx, QWORD PTR copy$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 176				; 000000b0H
	rep movsb

; 1017 : 	copy[GLITCH_LAYER_SOURCE] = *actual[GLITCH_LAYER_SOURCE];

	mov	eax, 8
	imul	rax, rax, 42				; 0000002aH
	mov	rcx, QWORD PTR actual$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	ecx, 176				; 000000b0H
	imul	rcx, rcx, 42				; 0000002aH
	mov	rdx, QWORD PTR copy$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 176				; 000000b0H
	rep movsb

; 1018 : 	copy[GLITCH_LAYER_SOURCE_POSITION] = *actual[GLITCH_LAYER_SOURCE_POSITION];

	mov	eax, 8
	imul	rax, rax, 43				; 0000002bH
	mov	rcx, QWORD PTR actual$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	ecx, 176				; 000000b0H
	imul	rcx, rcx, 43				; 0000002bH
	mov	rdx, QWORD PTR copy$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 176				; 000000b0H
	rep movsb

; 1019 : 	copy[GLITCH_TOPIC_LAYER_END] = *actual[GLITCH_TOPIC_LAYER_END];

	mov	eax, 8
	imul	rax, rax, 44				; 0000002cH
	mov	rcx, QWORD PTR actual$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	ecx, 176				; 000000b0H
	imul	rcx, rcx, 44				; 0000002cH
	mov	rdx, QWORD PTR copy$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 176				; 000000b0H
	rep movsb

; 1020 : 	return PF_Err_NONE;

	xor	eax, eax

; 1021 : }

	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rsi
	ret	0
?MakeParamCopy@@YAJQEAPEAUPF_ParamDef@@QEAU1@@Z ENDP	; MakeParamCopy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\syuilo\documents\visual studio 2013\projects\after_effects_cs5_sdk_win\adobe after effects cs5 win sdk\examples\template\glitch\glitch.cpp
_TEXT	SEGMENT
area_height$1 = 80
height$ = 84
tv76 = 88
area_py$2 = 92
is16Bit$ = 96
glitch_height$3 = 100
outWidth$ = 104
width$ = 108
glitch_py$4 = 112
i$5 = 116
j$6 = 120
inWidth$ = 124
a$ = 128
input$ = 136
naibua$7 = 144
err$ = 148
tv203 = 152
tv151 = 156
tv137 = 160
outData$ = 168
inData$ = 176
$T8 = 184
tv195 = 188
$T9 = 192
tv198 = 196
$T10 = 200
$T11 = 208
$T12 = 448
$T13 = 688
$T14 = 928
$T15 = 1168
suites$ = 1408
niP$ = 2272
$T16 = 2512
__$ArrayPad$ = 2752
in_data$ = 2800
out_data$ = 2808
params$ = 2816
output$ = 2824
?Render@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z PROC ; Render

; 853  : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 2776				; 00000ad8H
	mov	QWORD PTR $T10[rsp], -2
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 854  : 	PF_Err err = PF_Err_NONE;

	mov	DWORD PTR err$[rsp], 0

; 855  : 	AEGP_SuiteHandler	suites(in_data->pica_basicP);

	mov	rax, QWORD PTR in_data$[rsp]
	mov	rdx, QWORD PTR [rax+384]
	lea	rcx, QWORD PTR suites$[rsp]
	call	??0AEGP_SuiteHandler@@QEAA@PEBUSPBasicSuite@@@Z ; AEGP_SuiteHandler::AEGP_SuiteHandler
	npad	1

; 856  : 
; 857  : 	PF_EffectWorld *input = &params[GLITCH_INPUT]->u.ld;

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR params$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	add	rax, 56					; 00000038H
	mov	QWORD PTR input$[rsp], rax

; 858  : 	PF_Boolean is16Bit PF_WORLD_IS_DEEP(output);

	mov	rax, QWORD PTR output$[rsp]
	mov	eax, DWORD PTR [rax+16]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN38@Render
	mov	BYTE PTR tv76[rsp], 1
	jmp	SHORT $LN39@Render
$LN38@Render:
	mov	BYTE PTR tv76[rsp], 0
$LN39@Render:
	movzx	eax, BYTE PTR tv76[rsp]
	mov	BYTE PTR is16Bit$[rsp], al

; 859  : 
; 860  : 	ParamInfo niP = initParamsInfo(params, in_data);

	mov	r8, QWORD PTR in_data$[rsp]
	mov	rdx, QWORD PTR params$[rsp]
	lea	rcx, QWORD PTR $T15[rsp]
	call	?initParamsInfo@@YA?AUParamInfo@@QEAPEAUPF_ParamDef@@PEAUPF_InData@@@Z ; initParamsInfo
	lea	rcx, QWORD PTR $T16[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 236				; 000000ecH
	rep movsb
	lea	rax, QWORD PTR niP$[rsp]
	lea	rcx, QWORD PTR $T16[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 236				; 000000ecH
	rep movsb

; 861  : 	if (niP.scanlineHeight <= 1)

	cmp	DWORD PTR niP$[rsp+4], 1
	jg	SHORT $LN35@Render

; 862  : 		return err;

	mov	eax, DWORD PTR err$[rsp]
	mov	DWORD PTR $T8[rsp], eax
	lea	rcx, QWORD PTR suites$[rsp]
	call	??1AEGP_SuiteHandler@@QEAA@XZ		; AEGP_SuiteHandler::~AEGP_SuiteHandler
	mov	eax, DWORD PTR $T8[rsp]
	jmp	$LN36@Render
$LN35@Render:

; 863  : 
; 864  : 	A_long width = input->width;

	mov	rax, QWORD PTR input$[rsp]
	mov	eax, DWORD PTR [rax+36]
	mov	DWORD PTR width$[rsp], eax

; 865  : 	A_long height = input->height;

	mov	rax, QWORD PTR input$[rsp]
	mov	eax, DWORD PTR [rax+40]
	mov	DWORD PTR height$[rsp], eax

; 866  : 
; 867  : 	A_long inWidth, outWidth;
; 868  : 	if (is16Bit == TRUE) {

	movsx	eax, BYTE PTR is16Bit$[rsp]
	cmp	eax, 1
	jne	SHORT $LN34@Render

; 869  : 		outWidth = output->rowbytes / sizeof(PF_Pixel16);

	mov	rax, QWORD PTR output$[rsp]
	movsxd	rax, DWORD PTR [rax+32]
	xor	edx, edx
	mov	ecx, 8
	div	rcx
	mov	DWORD PTR outWidth$[rsp], eax

; 870  : 	} else {

	jmp	SHORT $LN33@Render
$LN34@Render:

; 871  : 		outWidth = output->rowbytes / sizeof(PF_Pixel);

	mov	rax, QWORD PTR output$[rsp]
	movsxd	rax, DWORD PTR [rax+32]
	xor	edx, edx
	mov	ecx, 4
	div	rcx
	mov	DWORD PTR outWidth$[rsp], eax

; 872  : 		inWidth = input->rowbytes / sizeof(PF_Pixel);

	mov	rax, QWORD PTR input$[rsp]
	movsxd	rax, DWORD PTR [rax+32]
	xor	edx, edx
	mov	ecx, 4
	div	rcx
	mov	DWORD PTR inWidth$[rsp], eax
$LN33@Render:

; 873  : 	}
; 874  : 
; 875  : 	PF_Pixel *outData = (PF_Pixel *)output->data;

	mov	rax, QWORD PTR output$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR outData$[rsp], rax

; 876  : 	PF_Pixel *inData = (PF_Pixel *)input->data;

	mov	rax, QWORD PTR input$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR inData$[rsp], rax

; 877  : 
; 878  : 	if (niP.compose)

	movzx	eax, BYTE PTR niP$[rsp+21]
	test	eax, eax
	je	SHORT $LN32@Render

; 879  : 		PF_COPY(input, output, NULL, NULL);

	mov	rax, QWORD PTR in_data$[rsp]
	mov	rax, QWORD PTR [rax+176]
	mov	QWORD PTR [rsp+32], 0
	xor	r9d, r9d
	mov	r8, QWORD PTR output$[rsp]
	mov	rdx, QWORD PTR input$[rsp]
	mov	rcx, QWORD PTR in_data$[rsp]
	mov	rcx, QWORD PTR [rcx+184]
	call	QWORD PTR [rax+64]
$LN32@Render:

; 880  : 
; 881  : 	switch (niP.seedControl) {

	mov	eax, DWORD PTR niP$[rsp+28]
	mov	DWORD PTR tv137[rsp], eax
	cmp	DWORD PTR tv137[rsp], 1
	je	SHORT $LN29@Render
	cmp	DWORD PTR tv137[rsp], 2
	je	SHORT $LN28@Render
	jmp	SHORT $LN30@Render
$LN29@Render:

; 882  : 		case 1:
; 883  : 			init_genrand(in_data->current_time / in_data->time_step);

	mov	rax, QWORD PTR in_data$[rsp]
	mov	eax, DWORD PTR [rax+224]
	cdq
	mov	rcx, QWORD PTR in_data$[rsp]
	idiv	DWORD PTR [rcx+228]
	mov	ecx, eax
	call	?init_genrand@@YAXK@Z			; init_genrand

; 884  : 			break;

	jmp	SHORT $LN30@Render
$LN28@Render:

; 885  : 		case 2:
; 886  : 			init_genrand(niP.areaSeed);

	mov	ecx, DWORD PTR niP$[rsp+32]
	call	?init_genrand@@YAXK@Z			; init_genrand
$LN30@Render:

; 887  : 			break;
; 888  : 	}
; 889  : 
; 890  : 	// 壊す数
; 891  : 	int a = 0;

	mov	DWORD PTR a$[rsp], 0

; 892  : 
; 893  : 	switch (niP.scanline) {

	mov	eax, DWORD PTR niP$[rsp]
	mov	DWORD PTR tv151[rsp], eax
	cmp	DWORD PTR tv151[rsp], 1
	je	SHORT $LN25@Render
	cmp	DWORD PTR tv151[rsp], 2
	je	SHORT $LN24@Render
	jmp	SHORT $LN26@Render
$LN25@Render:

; 894  : 		case 1:
; 895  : 			a = (genrand_int32() % niP.areaCount);

	call	?genrand_int32@@YAKXZ			; genrand_int32
	xor	edx, edx
	div	DWORD PTR niP$[rsp+12]
	mov	eax, edx
	mov	DWORD PTR a$[rsp], eax

; 896  : 			break;

	jmp	SHORT $LN26@Render
$LN24@Render:

; 897  : 		case 2:
; 898  : 			a = 1;

	mov	DWORD PTR a$[rsp], 1
$LN26@Render:

; 899  : 			break;
; 900  : 	}
; 901  : 
; 902  : 	// Area
; 903  : 	for (int i = 0; i < a; i++) {

	mov	DWORD PTR i$5[rsp], 0
	jmp	SHORT $LN23@Render
$LN22@Render:
	mov	eax, DWORD PTR i$5[rsp]
	inc	eax
	mov	DWORD PTR i$5[rsp], eax
$LN23@Render:
	mov	eax, DWORD PTR a$[rsp]
	cmp	DWORD PTR i$5[rsp], eax
	jge	$LN21@Render

; 904  : 		int naibua = 0;

	mov	DWORD PTR naibua$7[rsp], 0

; 905  : 		int area_py = 0;

	mov	DWORD PTR area_py$2[rsp], 0

; 906  : 		int area_height = 0;

	mov	DWORD PTR area_height$1[rsp], 0

; 907  : 
; 908  : 		naibua = 1 + (genrand_int32() % niP.areaGlitchCount);

	call	?genrand_int32@@YAKXZ			; genrand_int32
	xor	edx, edx
	div	DWORD PTR niP$[rsp+16]
	mov	eax, edx
	inc	eax
	mov	DWORD PTR naibua$7[rsp], eax

; 909  : 
; 910  : 		if (niP.randomHeight) {

	movzx	eax, BYTE PTR niP$[rsp+20]
	test	eax, eax
	je	SHORT $LN20@Render

; 911  : 			area_height = 2 + (genrand_int32() % ((height * niP.scanlineHeight / 100) - 3));

	call	?genrand_int32@@YAKXZ			; genrand_int32
	mov	DWORD PTR tv195[rsp], eax
	mov	ecx, DWORD PTR height$[rsp]
	imul	ecx, DWORD PTR niP$[rsp+4]
	mov	eax, ecx
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	sub	eax, 3
	mov	DWORD PTR tv198[rsp], eax
	xor	edx, edx
	mov	ecx, DWORD PTR tv195[rsp]
	mov	eax, ecx
	mov	ecx, DWORD PTR tv198[rsp]
	div	ecx
	mov	eax, edx
	add	eax, 2
	mov	DWORD PTR area_height$1[rsp], eax

; 912  : 		} else {

	jmp	SHORT $LN19@Render
$LN20@Render:

; 913  : 			area_height = (height * niP.scanlineHeight / 100);

	mov	eax, DWORD PTR height$[rsp]
	imul	eax, DWORD PTR niP$[rsp+4]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	DWORD PTR area_height$1[rsp], eax
$LN19@Render:

; 914  : 		}
; 915  : 
; 916  : 		switch (niP.scanline) {

	mov	eax, DWORD PTR niP$[rsp]
	mov	DWORD PTR tv203[rsp], eax
	cmp	DWORD PTR tv203[rsp], 1
	je	SHORT $LN16@Render
	cmp	DWORD PTR tv203[rsp], 2
	je	SHORT $LN13@Render
	jmp	SHORT $LN17@Render
$LN16@Render:

; 917  : 			case 1:
; 918  : 				if (height == area_height)

	mov	eax, DWORD PTR area_height$1[rsp]
	cmp	DWORD PTR height$[rsp], eax
	jne	SHORT $LN15@Render

; 919  : 					area_py = 0;

	mov	DWORD PTR area_py$2[rsp], 0

; 920  : 				else

	jmp	SHORT $LN14@Render
$LN15@Render:

; 921  : 					area_py = (genrand_int32() % (height - area_height));

	call	?genrand_int32@@YAKXZ			; genrand_int32
	mov	ecx, DWORD PTR area_height$1[rsp]
	mov	edx, DWORD PTR height$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	xor	edx, edx
	div	ecx
	mov	eax, edx
	mov	DWORD PTR area_py$2[rsp], eax
$LN14@Render:

; 922  : 				break;

	jmp	SHORT $LN17@Render
$LN13@Render:

; 923  : 			case 2:
; 924  : 				area_py = niP.scanlinePositionY;

	mov	eax, DWORD PTR niP$[rsp+8]
	mov	DWORD PTR area_py$2[rsp], eax
$LN17@Render:

; 925  : 				break;
; 926  : 		}
; 927  : 
; 928  : 		if (area_py >= height)

	mov	eax, DWORD PTR height$[rsp]
	cmp	DWORD PTR area_py$2[rsp], eax
	jl	SHORT $LN12@Render

; 929  : 			area_py = height - 1;

	mov	eax, DWORD PTR height$[rsp]
	dec	eax
	mov	DWORD PTR area_py$2[rsp], eax
$LN12@Render:

; 930  : 		if (area_height + area_py >= height)

	mov	eax, DWORD PTR area_py$2[rsp]
	mov	ecx, DWORD PTR area_height$1[rsp]
	add	ecx, eax
	mov	eax, ecx
	cmp	eax, DWORD PTR height$[rsp]
	jl	SHORT $LN11@Render

; 931  : 			area_height = (height - area_py);

	mov	eax, DWORD PTR area_py$2[rsp]
	mov	ecx, DWORD PTR height$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR area_height$1[rsp], eax
$LN11@Render:

; 932  : 		if (area_height + area_py >= height)

	mov	eax, DWORD PTR area_py$2[rsp]
	mov	ecx, DWORD PTR area_height$1[rsp]
	add	ecx, eax
	mov	eax, ecx
	cmp	eax, DWORD PTR height$[rsp]
	jl	SHORT $LN10@Render

; 933  : 			area_py = height - area_height;

	mov	eax, DWORD PTR area_height$1[rsp]
	mov	ecx, DWORD PTR height$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR area_py$2[rsp], eax
$LN10@Render:

; 934  : 
; 935  : 		// Glitch
; 936  : 		for (int j = 0; j < naibua; j++) {

	mov	DWORD PTR j$6[rsp], 0
	jmp	SHORT $LN9@Render
$LN8@Render:
	mov	eax, DWORD PTR j$6[rsp]
	inc	eax
	mov	DWORD PTR j$6[rsp], eax
$LN9@Render:
	mov	eax, DWORD PTR naibua$7[rsp]
	cmp	DWORD PTR j$6[rsp], eax
	jge	$LN7@Render

; 937  : 			int glitch_height;
; 938  : 			int glitch_py;
; 939  : 
; 940  : 			if (niP.randomHeight) {

	movzx	eax, BYTE PTR niP$[rsp+20]
	test	eax, eax
	je	SHORT $LN6@Render

; 941  : 				glitch_height = 0 + (genrand_int32() % area_height);

	call	?genrand_int32@@YAKXZ			; genrand_int32
	xor	edx, edx
	div	DWORD PTR area_height$1[rsp]
	mov	eax, edx
	mov	DWORD PTR glitch_height$3[rsp], eax

; 942  : 			} else {

	jmp	SHORT $LN5@Render
$LN6@Render:

; 943  : 				glitch_height = area_height - 1;

	mov	eax, DWORD PTR area_height$1[rsp]
	dec	eax
	mov	DWORD PTR glitch_height$3[rsp], eax
$LN5@Render:

; 944  : 			}
; 945  : 
; 946  : 			glitch_py = area_py + (genrand_int32() % (area_height - glitch_height));

	call	?genrand_int32@@YAKXZ			; genrand_int32
	mov	ecx, DWORD PTR glitch_height$3[rsp]
	mov	edx, DWORD PTR area_height$1[rsp]
	sub	edx, ecx
	mov	ecx, edx
	xor	edx, edx
	div	ecx
	mov	eax, edx
	mov	ecx, DWORD PTR area_py$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR glitch_py$4[rsp], eax

; 947  : 
; 948  : 			if (niP.layer && ((genrand_int32() % 100) <= niP.layerFrequency))

	movzx	eax, BYTE PTR niP$[rsp+104]
	test	eax, eax
	je	$LN4@Render
	call	?genrand_int32@@YAKXZ			; genrand_int32
	xor	edx, edx
	mov	ecx, 100				; 00000064H
	div	ecx
	mov	eax, edx
	cmp	eax, DWORD PTR niP$[rsp+108]
	ja	SHORT $LN4@Render

; 949  : 				layerMix(inData, outData, niP, glitch_py, glitch_height, width, inWidth, width, height, outWidth);

	lea	rax, QWORD PTR $T11[rsp]
	lea	rcx, QWORD PTR niP$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 236				; 000000ecH
	rep movsb
	mov	eax, DWORD PTR outWidth$[rsp]
	mov	DWORD PTR [rsp+72], eax
	mov	eax, DWORD PTR height$[rsp]
	mov	DWORD PTR [rsp+64], eax
	mov	eax, DWORD PTR width$[rsp]
	mov	DWORD PTR [rsp+56], eax
	mov	eax, DWORD PTR inWidth$[rsp]
	mov	DWORD PTR [rsp+48], eax
	mov	eax, DWORD PTR width$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR glitch_height$3[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR glitch_py$4[rsp]
	lea	r8, QWORD PTR $T11[rsp]
	mov	rdx, QWORD PTR outData$[rsp]
	mov	rcx, QWORD PTR inData$[rsp]
	call	?layerMix@@YAJPEAUPF_Pixel@@0UParamInfo@@JJJJJJJ@Z ; layerMix
$LN4@Render:

; 950  : 
; 951  : 			if (niP.colorShifter && ((genrand_int32() % 100) <= niP.colorShifterFrequency))

	movzx	eax, BYTE PTR niP$[rsp+36]
	test	eax, eax
	je	SHORT $LN3@Render
	call	?genrand_int32@@YAKXZ			; genrand_int32
	xor	edx, edx
	mov	ecx, 100				; 00000064H
	div	ecx
	mov	eax, edx
	cmp	eax, DWORD PTR niP$[rsp+40]
	ja	SHORT $LN3@Render

; 952  : 				colorShifter(inData, outData, niP, glitch_py, glitch_height, width, inWidth, outWidth);

	lea	rax, QWORD PTR $T14[rsp]
	lea	rcx, QWORD PTR niP$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 236				; 000000ecH
	rep movsb
	mov	eax, DWORD PTR outWidth$[rsp]
	mov	DWORD PTR [rsp+56], eax
	mov	eax, DWORD PTR inWidth$[rsp]
	mov	DWORD PTR [rsp+48], eax
	mov	eax, DWORD PTR width$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR glitch_height$3[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR glitch_py$4[rsp]
	lea	r8, QWORD PTR $T14[rsp]
	mov	rdx, QWORD PTR outData$[rsp]
	mov	rcx, QWORD PTR inData$[rsp]
	call	?colorShifter@@YAJPEAUPF_Pixel@@0UParamInfo@@JJJJJ@Z ; colorShifter
$LN3@Render:

; 953  : 
; 954  : 			//PF_COPY(output, input, NULL, NULL);
; 955  : 
; 956  : 			if (niP.color && ((genrand_int32() % 100) <= niP.colorFrequency))

	movzx	eax, BYTE PTR niP$[rsp+56]
	test	eax, eax
	je	SHORT $LN2@Render
	call	?genrand_int32@@YAKXZ			; genrand_int32
	xor	edx, edx
	mov	ecx, 100				; 00000064H
	div	ecx
	mov	eax, edx
	cmp	eax, DWORD PTR niP$[rsp+60]
	ja	SHORT $LN2@Render

; 957  : 				color(outData, niP, glitch_py, glitch_height, width, outWidth);

	lea	rax, QWORD PTR $T13[rsp]
	lea	rcx, QWORD PTR niP$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 236				; 000000ecH
	rep movsb
	mov	eax, DWORD PTR outWidth$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR width$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR glitch_height$3[rsp]
	mov	r8d, DWORD PTR glitch_py$4[rsp]
	lea	rdx, QWORD PTR $T13[rsp]
	mov	rcx, QWORD PTR outData$[rsp]
	call	?color@@YAJPEAUPF_Pixel@@UParamInfo@@JJJJ@Z ; color
$LN2@Render:

; 958  : 
; 959  : 			PF_COPY(output, input, NULL, NULL);

	mov	rax, QWORD PTR in_data$[rsp]
	mov	rax, QWORD PTR [rax+176]
	mov	QWORD PTR [rsp+32], 0
	xor	r9d, r9d
	mov	r8, QWORD PTR input$[rsp]
	mov	rdx, QWORD PTR output$[rsp]
	mov	rcx, QWORD PTR in_data$[rsp]
	mov	rcx, QWORD PTR [rcx+184]
	call	QWORD PTR [rax+64]

; 960  : 
; 961  : 			if (niP.shifter && ((genrand_int32() % 100) <= niP.shifterFrequency))

	movzx	eax, BYTE PTR niP$[rsp+80]
	test	eax, eax
	je	SHORT $LN1@Render
	call	?genrand_int32@@YAKXZ			; genrand_int32
	xor	edx, edx
	mov	ecx, 100				; 00000064H
	div	ecx
	mov	eax, edx
	cmp	eax, DWORD PTR niP$[rsp+84]
	ja	SHORT $LN1@Render

; 962  : 				shifter(inData, outData, niP, glitch_py, glitch_height, width, inWidth, outWidth);

	lea	rax, QWORD PTR $T12[rsp]
	lea	rcx, QWORD PTR niP$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 236				; 000000ecH
	rep movsb
	mov	eax, DWORD PTR outWidth$[rsp]
	mov	DWORD PTR [rsp+56], eax
	mov	eax, DWORD PTR inWidth$[rsp]
	mov	DWORD PTR [rsp+48], eax
	mov	eax, DWORD PTR width$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR glitch_height$3[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR glitch_py$4[rsp]
	lea	r8, QWORD PTR $T12[rsp]
	mov	rdx, QWORD PTR outData$[rsp]
	mov	rcx, QWORD PTR inData$[rsp]
	call	?shifter@@YAJPEAUPF_Pixel@@0UParamInfo@@JJJJJ@Z ; shifter
$LN1@Render:

; 963  : 		}

	jmp	$LN8@Render
$LN7@Render:

; 964  : 	}

	jmp	$LN22@Render
$LN21@Render:

; 965  : 
; 966  : 	return err;

	mov	eax, DWORD PTR err$[rsp]
	mov	DWORD PTR $T9[rsp], eax
	lea	rcx, QWORD PTR suites$[rsp]
	call	??1AEGP_SuiteHandler@@QEAA@XZ		; AEGP_SuiteHandler::~AEGP_SuiteHandler
	mov	eax, DWORD PTR $T9[rsp]
$LN36@Render:

; 967  : }

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 2776				; 00000ad8H
	pop	rdi
	pop	rsi
	ret	0
?Render@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z ENDP ; Render
_TEXT	ENDS
; Function compile flags: /Odtp
text$x	SEGMENT
area_height$1 = 80
height$ = 84
tv76 = 88
area_py$2 = 92
is16Bit$ = 96
glitch_height$3 = 100
outWidth$ = 104
width$ = 108
glitch_py$4 = 112
i$5 = 116
j$6 = 120
inWidth$ = 124
a$ = 128
input$ = 136
naibua$7 = 144
err$ = 148
tv203 = 152
tv151 = 156
tv137 = 160
outData$ = 168
inData$ = 176
$T8 = 184
tv195 = 188
$T9 = 192
tv198 = 196
$T10 = 200
$T11 = 208
$T12 = 448
$T13 = 688
$T14 = 928
$T15 = 1168
suites$ = 1408
niP$ = 2272
$T16 = 2512
__$ArrayPad$ = 2752
in_data$ = 2800
out_data$ = 2808
params$ = 2816
output$ = 2824
?dtor$0@?0??Render@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z@4HA PROC ; `Render'::`1'::dtor$0
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
	lea	rcx, QWORD PTR suites$[rbp]
	call	??1AEGP_SuiteHandler@@QEAA@XZ		; AEGP_SuiteHandler::~AEGP_SuiteHandler
	add	rsp, 32					; 00000020H
	pop	rbp
	ret	0
?dtor$0@?0??Render@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z@4HA ENDP ; `Render'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp
; File c:\users\syuilo\documents\visual studio 2013\projects\after_effects_cs5_sdk_win\adobe after effects cs5 win sdk\examples\template\glitch\glitch.cpp
_TEXT	SEGMENT
x$1 = 48
y$2 = 52
tv79 = 56
pixel$3 = 60
$T4 = 64
$T5 = 68
sourceY$ = 72
sourceHeight$ = 76
sourceWindth$ = 80
$T6 = 96
source$ = 336
__$ArrayPad$ = 464
inData$ = 512
outData$ = 520
niP$ = 528
py$ = 536
height$ = 544
width$ = 552
inWidth$ = 560
imageWidth$ = 568
imageHeight$ = 576
outWidth$ = 584
?layerMix@@YAJPEAUPF_Pixel@@0UParamInfo@@JJJJJJJ@Z PROC	; layerMix

; 814  : {

	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 488				; 000001e8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 815  : 	PF_LayerDef source = niP.layerSource;

	lea	rax, QWORD PTR source$[rsp]
	mov	rcx, QWORD PTR niP$[rsp]
	mov	rdi, rax
	lea	rsi, QWORD PTR [rcx+116]
	mov	ecx, 120				; 00000078H
	rep movsb

; 816  : 
; 817  : 	if (source.data == NULL)

	cmp	QWORD PTR source$[rsp+24], 0
	jne	SHORT $LN15@layerMix

; 818  : 		return PF_Err_NONE;

	xor	eax, eax
	jmp	$LN16@layerMix
$LN15@layerMix:

; 819  : 
; 820  : 	if (source.width <= 0)

	cmp	DWORD PTR source$[rsp+36], 0
	jg	SHORT $LN14@layerMix

; 821  : 		return PF_Err_NONE;

	xor	eax, eax
	jmp	$LN16@layerMix
$LN14@layerMix:

; 822  : 
; 823  : 	if (source.height <= 0)

	cmp	DWORD PTR source$[rsp+40], 0
	jg	SHORT $LN13@layerMix

; 824  : 		return PF_Err_NONE;

	xor	eax, eax
	jmp	$LN16@layerMix
$LN13@layerMix:

; 825  : 
; 826  : 	if (source.width != imageWidth || source.height != imageHeight)

	mov	eax, DWORD PTR imageWidth$[rsp]
	cmp	DWORD PTR source$[rsp+36], eax
	jne	SHORT $LN11@layerMix
	mov	eax, DWORD PTR imageHeight$[rsp]
	cmp	DWORD PTR source$[rsp+40], eax
	je	SHORT $LN12@layerMix
$LN11@layerMix:

; 827  : 		return PF_Err_NONE;

	xor	eax, eax
	jmp	$LN16@layerMix
$LN12@layerMix:

; 828  : 
; 829  : 	A_long sourceWindth = source.width;

	mov	eax, DWORD PTR source$[rsp+36]
	mov	DWORD PTR sourceWindth$[rsp], eax

; 830  : 	A_long sourceHeight = source.height;

	mov	eax, DWORD PTR source$[rsp+40]
	mov	DWORD PTR sourceHeight$[rsp], eax

; 831  : 
; 832  : 	int sourceY = (genrand_int32() % (sourceHeight - height));

	call	?genrand_int32@@YAKXZ			; genrand_int32
	mov	ecx, DWORD PTR height$[rsp]
	mov	edx, DWORD PTR sourceHeight$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	xor	edx, edx
	div	ecx
	mov	eax, edx
	mov	DWORD PTR sourceY$[rsp], eax

; 833  : 
; 834  : 	for (A_long x = 0; x < width; x++) {

	mov	DWORD PTR x$1[rsp], 0
	jmp	SHORT $LN10@layerMix
$LN9@layerMix:
	mov	eax, DWORD PTR x$1[rsp]
	inc	eax
	mov	DWORD PTR x$1[rsp], eax
$LN10@layerMix:
	mov	eax, DWORD PTR width$[rsp]
	cmp	DWORD PTR x$1[rsp], eax
	jge	$LN8@layerMix

; 835  : 		for (A_long y = 0; y < height; y++) {

	mov	DWORD PTR y$2[rsp], 0
	jmp	SHORT $LN7@layerMix
$LN6@layerMix:
	mov	eax, DWORD PTR y$2[rsp]
	inc	eax
	mov	DWORD PTR y$2[rsp], eax
$LN7@layerMix:
	mov	eax, DWORD PTR height$[rsp]
	cmp	DWORD PTR y$2[rsp], eax
	jge	$LN5@layerMix

; 836  : 			PF_Pixel pixel;
; 837  : 			switch (niP.layerSourcePosition) {

	mov	rax, QWORD PTR niP$[rsp]
	mov	eax, DWORD PTR [rax+112]
	mov	DWORD PTR tv79[rsp], eax
	cmp	DWORD PTR tv79[rsp], 1
	je	SHORT $LN2@layerMix
	cmp	DWORD PTR tv79[rsp], 2
	je	SHORT $LN1@layerMix
	jmp	SHORT $LN3@layerMix
$LN2@layerMix:

; 838  : 				case 1:
; 839  : 					pixel = pGet((PF_Pixel *)source.data, x, py + y, inWidth);

	mov	eax, DWORD PTR y$2[rsp]
	mov	ecx, DWORD PTR py$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	r9d, DWORD PTR inWidth$[rsp]
	mov	r8d, eax
	mov	edx, DWORD PTR x$1[rsp]
	mov	rcx, QWORD PTR source$[rsp+24]
	call	?pGet@@YA?AUPF_Pixel@@PEAU1@JJJ@Z	; pGet
	mov	DWORD PTR $T4[rsp], eax
	mov	eax, DWORD PTR $T4[rsp]
	mov	DWORD PTR pixel$3[rsp], eax

; 840  : 					break;

	jmp	SHORT $LN3@layerMix
$LN1@layerMix:

; 841  : 				case 2:
; 842  : 					pixel = pGet((PF_Pixel *)source.data, x, sourceY + y, inWidth);

	mov	eax, DWORD PTR y$2[rsp]
	mov	ecx, DWORD PTR sourceY$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	r9d, DWORD PTR inWidth$[rsp]
	mov	r8d, eax
	mov	edx, DWORD PTR x$1[rsp]
	mov	rcx, QWORD PTR source$[rsp+24]
	call	?pGet@@YA?AUPF_Pixel@@PEAU1@JJJ@Z	; pGet
	mov	DWORD PTR $T5[rsp], eax
	mov	eax, DWORD PTR $T5[rsp]
	mov	DWORD PTR pixel$3[rsp], eax
$LN3@layerMix:

; 843  : 					break;
; 844  : 			}
; 845  : 			pSet(niP, outData, x, py + y, outWidth, pixel);

	mov	eax, DWORD PTR y$2[rsp]
	mov	ecx, DWORD PTR py$[rsp]
	add	ecx, eax
	mov	eax, ecx
	lea	rcx, QWORD PTR $T6[rsp]
	mov	rdi, rcx
	mov	rsi, QWORD PTR niP$[rsp]
	mov	ecx, 236				; 000000ecH
	rep movsb
	mov	ecx, DWORD PTR pixel$3[rsp]
	mov	DWORD PTR [rsp+40], ecx
	mov	ecx, DWORD PTR outWidth$[rsp]
	mov	DWORD PTR [rsp+32], ecx
	mov	r9d, eax
	mov	r8d, DWORD PTR x$1[rsp]
	mov	rdx, QWORD PTR outData$[rsp]
	lea	rcx, QWORD PTR $T6[rsp]
	call	?pSet@@YAJUParamInfo@@PEAUPF_Pixel@@JJJU2@@Z ; pSet

; 846  : 		}

	jmp	$LN6@layerMix
$LN5@layerMix:

; 847  : 	}

	jmp	$LN9@layerMix
$LN8@layerMix:

; 848  : 
; 849  : 	return PF_Err_NONE;

	xor	eax, eax
$LN16@layerMix:

; 850  : }

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 488				; 000001e8H
	pop	rdi
	pop	rsi
	ret	0
?layerMix@@YAJPEAUPF_Pixel@@0UParamInfo@@JJJJJJJ@Z ENDP	; layerMix
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\syuilo\documents\visual studio 2013\projects\after_effects_cs5_sdk_win\adobe after effects cs5 win sdk\examples\template\glitch\glitch.cpp
_TEXT	SEGMENT
sety$1 = 48
x$2 = 52
pixel$3 = 56
ps$ = 60
tv144 = 64
y$4 = 68
tv65 = 72
setx$5 = 76
$T6 = 80
$T7 = 84
$T8 = 88
$T9 = 92
$T10 = 96
$T11 = 100
$T12 = 104
$T13 = 108
$T14 = 112
$T15 = 116
$T16 = 120
$T17 = 124
$T18 = 128
$T19 = 132
$T20 = 136
$T21 = 140
$T22 = 144
inData$ = 416
outData$ = 424
niP$ = 432
py$ = 440
height$ = 448
width$ = 456
inWidth$ = 464
outWidth$ = 472
?shifter@@YAJPEAUPF_Pixel@@0UParamInfo@@JJJJJ@Z PROC	; shifter

; 728  : {

	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 392				; 00000188H

; 729  : 	A_long ps;
; 730  : 
; 731  : 	switch (niP.shifterDirection) {

	mov	rax, QWORD PTR niP$[rsp]
	mov	eax, DWORD PTR [rax+88]
	mov	DWORD PTR tv65[rsp], eax
	cmp	DWORD PTR tv65[rsp], 1
	je	SHORT $LN36@shifter
	cmp	DWORD PTR tv65[rsp], 2
	je	SHORT $LN35@shifter
	cmp	DWORD PTR tv65[rsp], 3
	je	SHORT $LN34@shifter
	jmp	$LN37@shifter
$LN36@shifter:

; 732  : 		case 1: // Left
; 733  : 			ps = (A_long)(width * niP.shifterMax / 100);

	cvtsi2sd xmm0, DWORD PTR width$[rsp]
	mov	rax, QWORD PTR niP$[rsp]
	mulsd	xmm0, QWORD PTR [rax+96]
	divsd	xmm0, QWORD PTR __real@4059000000000000
	cvttsd2si eax, xmm0
	mov	DWORD PTR ps$[rsp], eax

; 734  : 			break;

	jmp	$LN37@shifter
$LN35@shifter:

; 735  : 		case 2: // Right
; 736  : 			ps = -((A_long)(width * niP.shifterMax / 100));

	cvtsi2sd xmm0, DWORD PTR width$[rsp]
	mov	rax, QWORD PTR niP$[rsp]
	mulsd	xmm0, QWORD PTR [rax+96]
	divsd	xmm0, QWORD PTR __real@4059000000000000
	cvttsd2si eax, xmm0
	neg	eax
	mov	DWORD PTR ps$[rsp], eax

; 737  : 			break;

	jmp	SHORT $LN37@shifter
$LN34@shifter:

; 738  : 		case 3: // Both
; 739  : 			if ((genrand_int32() % 2) == 1)

	call	?genrand_int32@@YAKXZ			; genrand_int32
	xor	edx, edx
	mov	ecx, 2
	div	ecx
	mov	eax, edx
	cmp	eax, 1
	jne	SHORT $LN33@shifter

; 740  : 				ps = (A_long)(width * niP.shifterMax / 100);

	cvtsi2sd xmm0, DWORD PTR width$[rsp]
	mov	rax, QWORD PTR niP$[rsp]
	mulsd	xmm0, QWORD PTR [rax+96]
	divsd	xmm0, QWORD PTR __real@4059000000000000
	cvttsd2si eax, xmm0
	mov	DWORD PTR ps$[rsp], eax

; 741  : 			else

	jmp	SHORT $LN32@shifter
$LN33@shifter:

; 742  : 				ps = -((A_long)(width * niP.shifterMax / 100));

	cvtsi2sd xmm0, DWORD PTR width$[rsp]
	mov	rax, QWORD PTR niP$[rsp]
	mulsd	xmm0, QWORD PTR [rax+96]
	divsd	xmm0, QWORD PTR __real@4059000000000000
	cvttsd2si eax, xmm0
	neg	eax
	mov	DWORD PTR ps$[rsp], eax
$LN32@shifter:
$LN37@shifter:

; 743  : 			break;
; 744  : 	}
; 745  : 
; 746  : 	for (int x = 0; x < width; x++) {

	mov	DWORD PTR x$2[rsp], 0
	jmp	SHORT $LN31@shifter
$LN30@shifter:
	mov	eax, DWORD PTR x$2[rsp]
	inc	eax
	mov	DWORD PTR x$2[rsp], eax
$LN31@shifter:
	mov	eax, DWORD PTR width$[rsp]
	cmp	DWORD PTR x$2[rsp], eax
	jge	$LN29@shifter

; 747  : 		for (int y = 0; y < height; y++) {

	mov	DWORD PTR y$4[rsp], 0
	jmp	SHORT $LN28@shifter
$LN27@shifter:
	mov	eax, DWORD PTR y$4[rsp]
	inc	eax
	mov	DWORD PTR y$4[rsp], eax
$LN28@shifter:
	mov	eax, DWORD PTR height$[rsp]
	cmp	DWORD PTR y$4[rsp], eax
	jge	$LN26@shifter

; 748  : 			A_long setx, sety;
; 749  : 			setx = (x + ps);

	mov	eax, DWORD PTR ps$[rsp]
	mov	ecx, DWORD PTR x$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR setx$5[rsp], eax

; 750  : 			sety = (py + y);

	mov	eax, DWORD PTR y$4[rsp]
	mov	ecx, DWORD PTR py$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR sety$1[rsp], eax

; 751  : 
; 752  : 			PF_Pixel pixel;
; 753  : 
; 754  : 			if ((setx >= 0) && (setx < width)) {

	cmp	DWORD PTR setx$5[rsp], 0
	jl	SHORT $LN25@shifter
	mov	eax, DWORD PTR width$[rsp]
	cmp	DWORD PTR setx$5[rsp], eax
	jge	SHORT $LN25@shifter

; 755  : 				pixel = pGet(inData, setx, sety, inWidth);

	mov	r9d, DWORD PTR inWidth$[rsp]
	mov	r8d, DWORD PTR sety$1[rsp]
	mov	edx, DWORD PTR setx$5[rsp]
	mov	rcx, QWORD PTR inData$[rsp]
	call	?pGet@@YA?AUPF_Pixel@@PEAU1@JJJ@Z	; pGet
	mov	DWORD PTR $T11[rsp], eax
	mov	eax, DWORD PTR $T11[rsp]
	mov	DWORD PTR pixel$3[rsp], eax

; 756  : 			} else {

	jmp	$LN24@shifter
$LN25@shifter:

; 757  : 				switch (niP.shifterBorderType) {

	mov	rax, QWORD PTR niP$[rsp]
	mov	eax, DWORD PTR [rax+92]
	mov	DWORD PTR tv144[rsp], eax
	mov	eax, DWORD PTR tv144[rsp]
	dec	eax
	mov	DWORD PTR tv144[rsp], eax
	cmp	DWORD PTR tv144[rsp], 8
	ja	$LN22@shifter
	movsxd	rax, DWORD PTR tv144[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN41@shifter[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN21@shifter:

; 758  : 					case 1: // None
; 759  : 						pixel = pGet(inData, x, sety, inWidth);

	mov	r9d, DWORD PTR inWidth$[rsp]
	mov	r8d, DWORD PTR sety$1[rsp]
	mov	edx, DWORD PTR x$2[rsp]
	mov	rcx, QWORD PTR inData$[rsp]
	call	?pGet@@YA?AUPF_Pixel@@PEAU1@JJJ@Z	; pGet
	mov	DWORD PTR $T15[rsp], eax
	mov	eax, DWORD PTR $T15[rsp]
	mov	DWORD PTR pixel$3[rsp], eax

; 760  : 						break;

	jmp	$LN22@shifter
$LN20@shifter:

; 761  : 					case 2: // Expand
; 762  : 						if (ps >= 0)

	cmp	DWORD PTR ps$[rsp], 0
	jl	SHORT $LN19@shifter

; 763  : 							pixel = pGet(inData, width - 1, sety, inWidth);

	mov	eax, DWORD PTR width$[rsp]
	dec	eax
	mov	r9d, DWORD PTR inWidth$[rsp]
	mov	r8d, DWORD PTR sety$1[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR inData$[rsp]
	call	?pGet@@YA?AUPF_Pixel@@PEAU1@JJJ@Z	; pGet
	mov	DWORD PTR $T9[rsp], eax
	mov	eax, DWORD PTR $T9[rsp]
	mov	DWORD PTR pixel$3[rsp], eax

; 764  : 						else

	jmp	SHORT $LN18@shifter
$LN19@shifter:

; 765  : 							pixel = pGet(inData, 0, sety, inWidth);

	mov	r9d, DWORD PTR inWidth$[rsp]
	mov	r8d, DWORD PTR sety$1[rsp]
	xor	edx, edx
	mov	rcx, QWORD PTR inData$[rsp]
	call	?pGet@@YA?AUPF_Pixel@@PEAU1@JJJ@Z	; pGet
	mov	DWORD PTR $T19[rsp], eax
	mov	eax, DWORD PTR $T19[rsp]
	mov	DWORD PTR pixel$3[rsp], eax
$LN18@shifter:

; 766  : 						break;

	jmp	$LN22@shifter
$LN17@shifter:

; 767  : 					case 3: // Front
; 768  : 						if (ps >= 0)

	cmp	DWORD PTR ps$[rsp], 0
	jl	SHORT $LN16@shifter

; 769  : 							pixel = pGet(outData, 0, sety, outWidth);

	mov	r9d, DWORD PTR outWidth$[rsp]
	mov	r8d, DWORD PTR sety$1[rsp]
	xor	edx, edx
	mov	rcx, QWORD PTR outData$[rsp]
	call	?pGet@@YA?AUPF_Pixel@@PEAU1@JJJ@Z	; pGet
	mov	DWORD PTR $T6[rsp], eax
	mov	eax, DWORD PTR $T6[rsp]
	mov	DWORD PTR pixel$3[rsp], eax

; 770  : 						else

	jmp	SHORT $LN15@shifter
$LN16@shifter:

; 771  : 							pixel = pGet(outData, width, sety, outWidth);

	mov	r9d, DWORD PTR outWidth$[rsp]
	mov	r8d, DWORD PTR sety$1[rsp]
	mov	edx, DWORD PTR width$[rsp]
	mov	rcx, QWORD PTR outData$[rsp]
	call	?pGet@@YA?AUPF_Pixel@@PEAU1@JJJ@Z	; pGet
	mov	DWORD PTR $T17[rsp], eax
	mov	eax, DWORD PTR $T17[rsp]
	mov	DWORD PTR pixel$3[rsp], eax
$LN15@shifter:

; 772  : 						break;

	jmp	$LN22@shifter
$LN14@shifter:

; 773  : 					case 4: // Mirror
; 774  : 						if (ps >= 0)

	cmp	DWORD PTR ps$[rsp], 0
	jl	SHORT $LN13@shifter

; 775  : 							pixel = pGet(inData, x + (width - ps), sety, inWidth);

	mov	eax, DWORD PTR ps$[rsp]
	mov	ecx, DWORD PTR width$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR x$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	r9d, DWORD PTR inWidth$[rsp]
	mov	r8d, DWORD PTR sety$1[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR inData$[rsp]
	call	?pGet@@YA?AUPF_Pixel@@PEAU1@JJJ@Z	; pGet
	mov	DWORD PTR $T13[rsp], eax
	mov	eax, DWORD PTR $T13[rsp]
	mov	DWORD PTR pixel$3[rsp], eax

; 776  : 						else

	jmp	SHORT $LN12@shifter
$LN13@shifter:

; 777  : 							pixel = pGet(inData, x - (width + ps), sety, inWidth);

	mov	eax, DWORD PTR ps$[rsp]
	mov	ecx, DWORD PTR width$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR x$2[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	r9d, DWORD PTR inWidth$[rsp]
	mov	r8d, DWORD PTR sety$1[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR inData$[rsp]
	call	?pGet@@YA?AUPF_Pixel@@PEAU1@JJJ@Z	; pGet
	mov	DWORD PTR $T21[rsp], eax
	mov	eax, DWORD PTR $T21[rsp]
	mov	DWORD PTR pixel$3[rsp], eax
$LN12@shifter:

; 778  : 						break;

	jmp	$LN22@shifter
$LN11@shifter:

; 779  : 					case 5: // Tile
; 780  : 						if (ps >= 0)

	cmp	DWORD PTR ps$[rsp], 0
	jl	SHORT $LN10@shifter

; 781  : 							pixel = pGet(inData, x - (width - ps), sety, inWidth);

	mov	eax, DWORD PTR ps$[rsp]
	mov	ecx, DWORD PTR width$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR x$2[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	r9d, DWORD PTR inWidth$[rsp]
	mov	r8d, DWORD PTR sety$1[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR inData$[rsp]
	call	?pGet@@YA?AUPF_Pixel@@PEAU1@JJJ@Z	; pGet
	mov	DWORD PTR $T7[rsp], eax
	mov	eax, DWORD PTR $T7[rsp]
	mov	DWORD PTR pixel$3[rsp], eax

; 782  : 						else

	jmp	SHORT $LN9@shifter
$LN10@shifter:

; 783  : 							pixel = pGet(inData, x + (width + ps), sety, inWidth);

	mov	eax, DWORD PTR ps$[rsp]
	mov	ecx, DWORD PTR width$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR x$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	r9d, DWORD PTR inWidth$[rsp]
	mov	r8d, DWORD PTR sety$1[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR inData$[rsp]
	call	?pGet@@YA?AUPF_Pixel@@PEAU1@JJJ@Z	; pGet
	mov	DWORD PTR $T8[rsp], eax
	mov	eax, DWORD PTR $T8[rsp]
	mov	DWORD PTR pixel$3[rsp], eax
$LN9@shifter:

; 784  : 						break;

	jmp	$LN22@shifter
$LN8@shifter:

; 785  : 					case 6:// Opposite mirrors
; 786  : 						if (ps >= 0)

	cmp	DWORD PTR ps$[rsp], 0
	jl	SHORT $LN7@shifter

; 787  : 							pixel = pGet(outData, x + ps, sety, outWidth);

	mov	eax, DWORD PTR ps$[rsp]
	mov	ecx, DWORD PTR x$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	r9d, DWORD PTR outWidth$[rsp]
	mov	r8d, DWORD PTR sety$1[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR outData$[rsp]
	call	?pGet@@YA?AUPF_Pixel@@PEAU1@JJJ@Z	; pGet
	mov	DWORD PTR $T10[rsp], eax
	mov	eax, DWORD PTR $T10[rsp]
	mov	DWORD PTR pixel$3[rsp], eax

; 788  : 						else

	jmp	SHORT $LN6@shifter
$LN7@shifter:

; 789  : 							pixel = pGet(outData, x - ps, sety, outWidth);

	mov	eax, DWORD PTR ps$[rsp]
	mov	ecx, DWORD PTR x$2[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	r9d, DWORD PTR outWidth$[rsp]
	mov	r8d, DWORD PTR sety$1[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR outData$[rsp]
	call	?pGet@@YA?AUPF_Pixel@@PEAU1@JJJ@Z	; pGet
	mov	DWORD PTR $T12[rsp], eax
	mov	eax, DWORD PTR $T12[rsp]
	mov	DWORD PTR pixel$3[rsp], eax
$LN6@shifter:

; 790  : 						break;

	jmp	$LN22@shifter
$LN5@shifter:

; 791  : 					case 7: // Scale‐up
; 792  : 						if (ps >= 0)

	cmp	DWORD PTR ps$[rsp], 0
	jl	SHORT $LN4@shifter

; 793  : 							pixel = pGet(outData, x / 2, sety, outWidth);

	mov	eax, DWORD PTR x$2[rsp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	r9d, DWORD PTR outWidth$[rsp]
	mov	r8d, DWORD PTR sety$1[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR outData$[rsp]
	call	?pGet@@YA?AUPF_Pixel@@PEAU1@JJJ@Z	; pGet
	mov	DWORD PTR $T14[rsp], eax
	mov	eax, DWORD PTR $T14[rsp]
	mov	DWORD PTR pixel$3[rsp], eax

; 794  : 						else

	jmp	SHORT $LN3@shifter
$LN4@shifter:

; 795  : 							pixel = pGet(outData, (-x) / (-2), sety, outWidth);

	mov	eax, DWORD PTR x$2[rsp]
	neg	eax
	cdq
	sub	eax, edx
	sar	eax, 1
	neg	eax
	mov	r9d, DWORD PTR outWidth$[rsp]
	mov	r8d, DWORD PTR sety$1[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR outData$[rsp]
	call	?pGet@@YA?AUPF_Pixel@@PEAU1@JJJ@Z	; pGet
	mov	DWORD PTR $T16[rsp], eax
	mov	eax, DWORD PTR $T16[rsp]
	mov	DWORD PTR pixel$3[rsp], eax
$LN3@shifter:

; 796  : 						break;

	jmp	SHORT $LN22@shifter
$LN2@shifter:

; 797  : 					case 8: // Scale‐down
; 798  : 						pixel = pGet(outData, x + x, sety, outWidth);

	mov	eax, DWORD PTR x$2[rsp]
	mov	ecx, DWORD PTR x$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	r9d, DWORD PTR outWidth$[rsp]
	mov	r8d, DWORD PTR sety$1[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR outData$[rsp]
	call	?pGet@@YA?AUPF_Pixel@@PEAU1@JJJ@Z	; pGet
	mov	DWORD PTR $T18[rsp], eax
	mov	eax, DWORD PTR $T18[rsp]
	mov	DWORD PTR pixel$3[rsp], eax

; 799  : 						break;

	jmp	SHORT $LN22@shifter
$LN1@shifter:

; 800  : 					case 9: // Render mirror
; 801  : 						pixel = pGet(outData, width - x, sety, outWidth);

	mov	eax, DWORD PTR x$2[rsp]
	mov	ecx, DWORD PTR width$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	r9d, DWORD PTR outWidth$[rsp]
	mov	r8d, DWORD PTR sety$1[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR outData$[rsp]
	call	?pGet@@YA?AUPF_Pixel@@PEAU1@JJJ@Z	; pGet
	mov	DWORD PTR $T20[rsp], eax
	mov	eax, DWORD PTR $T20[rsp]
	mov	DWORD PTR pixel$3[rsp], eax
$LN22@shifter:
$LN24@shifter:

; 802  : 						break;
; 803  : 				}
; 804  : 			}
; 805  : 
; 806  : 			pSet(niP, outData, x, sety, outWidth, pixel);

	lea	rax, QWORD PTR $T22[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR niP$[rsp]
	mov	ecx, 236				; 000000ecH
	rep movsb
	mov	eax, DWORD PTR pixel$3[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR outWidth$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR sety$1[rsp]
	mov	r8d, DWORD PTR x$2[rsp]
	mov	rdx, QWORD PTR outData$[rsp]
	lea	rcx, QWORD PTR $T22[rsp]
	call	?pSet@@YAJUParamInfo@@PEAUPF_Pixel@@JJJU2@@Z ; pSet

; 807  : 		}

	jmp	$LN27@shifter
$LN26@shifter:

; 808  : 	}

	jmp	$LN30@shifter
$LN29@shifter:

; 809  : 
; 810  : 	return PF_Err_NONE;

	xor	eax, eax

; 811  : }

	add	rsp, 392				; 00000188H
	pop	rdi
	pop	rsi
	ret	0
	npad	1
$LN41@shifter:
	DD	$LN21@shifter
	DD	$LN20@shifter
	DD	$LN17@shifter
	DD	$LN14@shifter
	DD	$LN11@shifter
	DD	$LN8@shifter
	DD	$LN5@shifter
	DD	$LN2@shifter
	DD	$LN1@shifter
?shifter@@YAJPEAUPF_Pixel@@0UParamInfo@@JJJJJ@Z ENDP	; shifter
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\syuilo\documents\visual studio 2013\projects\after_effects_cs5_sdk_win\adobe after effects cs5 win sdk\examples\template\glitch\glitch.cpp
_TEXT	SEGMENT
pixel$1 = 48
colorCount$ = 52
mix$ = 56
tv271 = 60
setx$2 = 64
x$3 = 68
sety$4 = 72
tv172 = 76
y$5 = 80
color$ = 84
$T6 = 88
colorRandom$ = 92
$T7 = 96
useColors$ = 336
__$ArrayPad$ = 368
data$ = 416
niP$ = 424
py$ = 432
height$ = 440
width$ = 448
outWidth$ = 456
?color@@YAJPEAUPF_Pixel@@UParamInfo@@JJJJ@Z PROC	; color

; 555  : {

	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 392				; 00000188H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 556  : 	/*
; 557  : 		Color ID:
; 558  : 		Alpha: -1
; 559  : 		Black: 0
; 560  : 		White: 1
; 561  : 		Red: 2
; 562  : 		Green: 3
; 563  : 		Blue: 4
; 564  : 		<Custom>: 5
; 565  : 		*/
; 566  : 	int useColors[7];
; 567  : 	int colorCount = 0;

	mov	DWORD PTR colorCount$[rsp], 0

; 568  : 	if (niP.colorAlpha) {

	mov	rax, QWORD PTR niP$[rsp]
	movzx	eax, BYTE PTR [rax+69]
	test	eax, eax
	je	SHORT $LN61@color

; 569  : 		useColors[colorCount] = -1;

	movsxd	rax, DWORD PTR colorCount$[rsp]
	mov	DWORD PTR useColors$[rsp+rax*4], -1

; 570  : 		colorCount++;

	mov	eax, DWORD PTR colorCount$[rsp]
	inc	eax
	mov	DWORD PTR colorCount$[rsp], eax
$LN61@color:

; 571  : 	}
; 572  : 	if (niP.colorBlack) {

	mov	rax, QWORD PTR niP$[rsp]
	movzx	eax, BYTE PTR [rax+67]
	test	eax, eax
	je	SHORT $LN60@color

; 573  : 		useColors[colorCount] = 0;

	movsxd	rax, DWORD PTR colorCount$[rsp]
	mov	DWORD PTR useColors$[rsp+rax*4], 0

; 574  : 		colorCount++;

	mov	eax, DWORD PTR colorCount$[rsp]
	inc	eax
	mov	DWORD PTR colorCount$[rsp], eax
$LN60@color:

; 575  : 	}
; 576  : 	if (niP.colorWhite) {

	mov	rax, QWORD PTR niP$[rsp]
	movzx	eax, BYTE PTR [rax+68]
	test	eax, eax
	je	SHORT $LN59@color

; 577  : 		useColors[colorCount] = 1;

	movsxd	rax, DWORD PTR colorCount$[rsp]
	mov	DWORD PTR useColors$[rsp+rax*4], 1

; 578  : 		colorCount++;

	mov	eax, DWORD PTR colorCount$[rsp]
	inc	eax
	mov	DWORD PTR colorCount$[rsp], eax
$LN59@color:

; 579  : 	}
; 580  : 	if (niP.colorRed) {

	mov	rax, QWORD PTR niP$[rsp]
	movzx	eax, BYTE PTR [rax+64]
	test	eax, eax
	je	SHORT $LN58@color

; 581  : 		useColors[colorCount] = 2;

	movsxd	rax, DWORD PTR colorCount$[rsp]
	mov	DWORD PTR useColors$[rsp+rax*4], 2

; 582  : 		colorCount++;

	mov	eax, DWORD PTR colorCount$[rsp]
	inc	eax
	mov	DWORD PTR colorCount$[rsp], eax
$LN58@color:

; 583  : 	}
; 584  : 	if (niP.colorGreen) {

	mov	rax, QWORD PTR niP$[rsp]
	movzx	eax, BYTE PTR [rax+65]
	test	eax, eax
	je	SHORT $LN57@color

; 585  : 		useColors[colorCount] = 3;

	movsxd	rax, DWORD PTR colorCount$[rsp]
	mov	DWORD PTR useColors$[rsp+rax*4], 3

; 586  : 		colorCount++;

	mov	eax, DWORD PTR colorCount$[rsp]
	inc	eax
	mov	DWORD PTR colorCount$[rsp], eax
$LN57@color:

; 587  : 	}
; 588  : 	if (niP.colorBlue) {

	mov	rax, QWORD PTR niP$[rsp]
	movzx	eax, BYTE PTR [rax+66]
	test	eax, eax
	je	SHORT $LN56@color

; 589  : 		useColors[colorCount] = 4;

	movsxd	rax, DWORD PTR colorCount$[rsp]
	mov	DWORD PTR useColors$[rsp+rax*4], 4

; 590  : 		colorCount++;

	mov	eax, DWORD PTR colorCount$[rsp]
	inc	eax
	mov	DWORD PTR colorCount$[rsp], eax
$LN56@color:

; 591  : 	}
; 592  : 	if (niP.colorUseCustomColor) {

	mov	rax, QWORD PTR niP$[rsp]
	movzx	eax, BYTE PTR [rax+70]
	test	eax, eax
	je	SHORT $LN55@color

; 593  : 		useColors[colorCount] = 5;

	movsxd	rax, DWORD PTR colorCount$[rsp]
	mov	DWORD PTR useColors$[rsp+rax*4], 5

; 594  : 		colorCount++;

	mov	eax, DWORD PTR colorCount$[rsp]
	inc	eax
	mov	DWORD PTR colorCount$[rsp], eax
$LN55@color:

; 595  : 	}
; 596  : 
; 597  : 	if (colorCount == 0)

	cmp	DWORD PTR colorCount$[rsp], 0
	jne	SHORT $LN54@color

; 598  : 		return PF_Err_NONE;

	xor	eax, eax
	jmp	$LN62@color
$LN54@color:

; 599  : 
; 600  : 	int colorRandom = genrand_int32() % colorCount;

	call	?genrand_int32@@YAKXZ			; genrand_int32
	xor	edx, edx
	div	DWORD PTR colorCount$[rsp]
	mov	eax, edx
	mov	DWORD PTR colorRandom$[rsp], eax

; 601  : 	int color = useColors[colorRandom];

	movsxd	rax, DWORD PTR colorRandom$[rsp]
	mov	eax, DWORD PTR useColors$[rsp+rax*4]
	mov	DWORD PTR color$[rsp], eax

; 602  : 
; 603  : 	A_long mix;
; 604  : 	mix = (255 * niP.colorMix / 100);

	mov	rax, QWORD PTR niP$[rsp]
	imul	eax, DWORD PTR [rax+76], 255		; 000000ffH
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	DWORD PTR mix$[rsp], eax

; 605  : 
; 606  : 	for (A_long x = 0; x < width; x++) {

	mov	DWORD PTR x$3[rsp], 0
	jmp	SHORT $LN53@color
$LN52@color:
	mov	eax, DWORD PTR x$3[rsp]
	inc	eax
	mov	DWORD PTR x$3[rsp], eax
$LN53@color:
	mov	eax, DWORD PTR width$[rsp]
	cmp	DWORD PTR x$3[rsp], eax
	jge	$LN51@color

; 607  : 		for (A_long y = 0; y < height; y++) {

	mov	DWORD PTR y$5[rsp], 0
	jmp	SHORT $LN50@color
$LN49@color:
	mov	eax, DWORD PTR y$5[rsp]
	inc	eax
	mov	DWORD PTR y$5[rsp], eax
$LN50@color:
	mov	eax, DWORD PTR height$[rsp]
	cmp	DWORD PTR y$5[rsp], eax
	jge	$LN48@color

; 608  : 			A_long setx, sety;
; 609  : 			setx = x;

	mov	eax, DWORD PTR x$3[rsp]
	mov	DWORD PTR setx$2[rsp], eax

; 610  : 			sety = py + y;

	mov	eax, DWORD PTR y$5[rsp]
	mov	ecx, DWORD PTR py$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR sety$4[rsp], eax

; 611  : 
; 612  : 			if ((setx >= 0) && (setx < width) && (sety >= 0) && (sety < (py + height))) {

	cmp	DWORD PTR setx$2[rsp], 0
	jl	$LN47@color
	mov	eax, DWORD PTR width$[rsp]
	cmp	DWORD PTR setx$2[rsp], eax
	jge	$LN47@color
	cmp	DWORD PTR sety$4[rsp], 0
	jl	$LN47@color
	mov	eax, DWORD PTR height$[rsp]
	mov	ecx, DWORD PTR py$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cmp	DWORD PTR sety$4[rsp], eax
	jge	$LN47@color

; 613  : 				PF_Pixel pixel;
; 614  : 				pixel = pGet(data, setx, sety, outWidth);

	mov	r9d, DWORD PTR outWidth$[rsp]
	mov	r8d, DWORD PTR sety$4[rsp]
	mov	edx, DWORD PTR setx$2[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	call	?pGet@@YA?AUPF_Pixel@@PEAU1@JJJ@Z	; pGet
	mov	DWORD PTR $T6[rsp], eax
	mov	eax, DWORD PTR $T6[rsp]
	mov	DWORD PTR pixel$1[rsp], eax

; 615  : 				if (!niP.colorUnmix)

	mov	rax, QWORD PTR niP$[rsp]
	movzx	eax, BYTE PTR [rax+75]
	test	eax, eax
	jne	$LN46@color

; 616  : 					switch (color) {

	mov	eax, DWORD PTR color$[rsp]
	mov	DWORD PTR tv172[rsp], eax
	mov	eax, DWORD PTR tv172[rsp]
	inc	eax
	mov	DWORD PTR tv172[rsp], eax
	cmp	DWORD PTR tv172[rsp], 6
	ja	$LN44@color
	movsxd	rax, DWORD PTR tv172[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN65@color[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN43@color:

; 617  : 						case -1:
; 618  : 							if (pixel.alpha + mix < 255)

	movzx	eax, BYTE PTR pixel$1[rsp]
	add	eax, DWORD PTR mix$[rsp]
	cmp	eax, 255				; 000000ffH
	jge	SHORT $LN42@color

; 619  : 								pixel.alpha += mix;

	movzx	eax, BYTE PTR pixel$1[rsp]
	add	eax, DWORD PTR mix$[rsp]
	mov	BYTE PTR pixel$1[rsp], al

; 620  : 							else

	jmp	SHORT $LN41@color
$LN42@color:

; 621  : 								pixel.alpha = 255;

	mov	BYTE PTR pixel$1[rsp], 255		; 000000ffH
$LN41@color:

; 622  : 							break;

	jmp	$LN44@color
$LN40@color:

; 623  : 						case 0:
; 624  : 							if (pixel.red - mix > 0)

	movzx	eax, BYTE PTR pixel$1[rsp+1]
	sub	eax, DWORD PTR mix$[rsp]
	test	eax, eax
	jle	SHORT $LN39@color

; 625  : 								pixel.red -= mix;

	movzx	eax, BYTE PTR pixel$1[rsp+1]
	sub	eax, DWORD PTR mix$[rsp]
	mov	BYTE PTR pixel$1[rsp+1], al

; 626  : 							else

	jmp	SHORT $LN38@color
$LN39@color:

; 627  : 								pixel.red = 0;

	mov	BYTE PTR pixel$1[rsp+1], 0
$LN38@color:

; 628  : 							if (pixel.green - mix > 0)

	movzx	eax, BYTE PTR pixel$1[rsp+2]
	sub	eax, DWORD PTR mix$[rsp]
	test	eax, eax
	jle	SHORT $LN37@color

; 629  : 								pixel.green -= mix;

	movzx	eax, BYTE PTR pixel$1[rsp+2]
	sub	eax, DWORD PTR mix$[rsp]
	mov	BYTE PTR pixel$1[rsp+2], al

; 630  : 							else

	jmp	SHORT $LN36@color
$LN37@color:

; 631  : 								pixel.green = 0;

	mov	BYTE PTR pixel$1[rsp+2], 0
$LN36@color:

; 632  : 							if (pixel.blue - mix > 0)

	movzx	eax, BYTE PTR pixel$1[rsp+3]
	sub	eax, DWORD PTR mix$[rsp]
	test	eax, eax
	jle	SHORT $LN35@color

; 633  : 								pixel.blue -= mix;

	movzx	eax, BYTE PTR pixel$1[rsp+3]
	sub	eax, DWORD PTR mix$[rsp]
	mov	BYTE PTR pixel$1[rsp+3], al

; 634  : 							else

	jmp	SHORT $LN34@color
$LN35@color:

; 635  : 								pixel.blue = 0;

	mov	BYTE PTR pixel$1[rsp+3], 0
$LN34@color:

; 636  : 							break;

	jmp	$LN44@color
$LN33@color:

; 637  : 						case 1:
; 638  : 							if (pixel.red + mix < 255)

	movzx	eax, BYTE PTR pixel$1[rsp+1]
	add	eax, DWORD PTR mix$[rsp]
	cmp	eax, 255				; 000000ffH
	jge	SHORT $LN32@color

; 639  : 								pixel.red += mix;

	movzx	eax, BYTE PTR pixel$1[rsp+1]
	add	eax, DWORD PTR mix$[rsp]
	mov	BYTE PTR pixel$1[rsp+1], al

; 640  : 							else

	jmp	SHORT $LN31@color
$LN32@color:

; 641  : 								pixel.red = 255;

	mov	BYTE PTR pixel$1[rsp+1], 255		; 000000ffH
$LN31@color:

; 642  : 							if (pixel.green + mix < 255)

	movzx	eax, BYTE PTR pixel$1[rsp+2]
	add	eax, DWORD PTR mix$[rsp]
	cmp	eax, 255				; 000000ffH
	jge	SHORT $LN30@color

; 643  : 								pixel.green += mix;

	movzx	eax, BYTE PTR pixel$1[rsp+2]
	add	eax, DWORD PTR mix$[rsp]
	mov	BYTE PTR pixel$1[rsp+2], al

; 644  : 							else

	jmp	SHORT $LN29@color
$LN30@color:

; 645  : 								pixel.green = 255;

	mov	BYTE PTR pixel$1[rsp+2], 255		; 000000ffH
$LN29@color:

; 646  : 							if (pixel.blue + mix < 255)

	movzx	eax, BYTE PTR pixel$1[rsp+3]
	add	eax, DWORD PTR mix$[rsp]
	cmp	eax, 255				; 000000ffH
	jge	SHORT $LN28@color

; 647  : 								pixel.blue += mix;

	movzx	eax, BYTE PTR pixel$1[rsp+3]
	add	eax, DWORD PTR mix$[rsp]
	mov	BYTE PTR pixel$1[rsp+3], al

; 648  : 							else

	jmp	SHORT $LN27@color
$LN28@color:

; 649  : 								pixel.blue = 255;

	mov	BYTE PTR pixel$1[rsp+3], 255		; 000000ffH
$LN27@color:

; 650  : 							break;

	jmp	$LN44@color
$LN26@color:

; 651  : 						case 2:
; 652  : 							if (pixel.red + mix < 255)

	movzx	eax, BYTE PTR pixel$1[rsp+1]
	add	eax, DWORD PTR mix$[rsp]
	cmp	eax, 255				; 000000ffH
	jge	SHORT $LN25@color

; 653  : 								pixel.red += mix;

	movzx	eax, BYTE PTR pixel$1[rsp+1]
	add	eax, DWORD PTR mix$[rsp]
	mov	BYTE PTR pixel$1[rsp+1], al

; 654  : 							else

	jmp	SHORT $LN24@color
$LN25@color:

; 655  : 								pixel.red = 255;

	mov	BYTE PTR pixel$1[rsp+1], 255		; 000000ffH
$LN24@color:

; 656  : 							break;

	jmp	$LN44@color
$LN23@color:

; 657  : 						case 3:
; 658  : 							if (pixel.green + mix < 255)

	movzx	eax, BYTE PTR pixel$1[rsp+2]
	add	eax, DWORD PTR mix$[rsp]
	cmp	eax, 255				; 000000ffH
	jge	SHORT $LN22@color

; 659  : 								pixel.green += mix;

	movzx	eax, BYTE PTR pixel$1[rsp+2]
	add	eax, DWORD PTR mix$[rsp]
	mov	BYTE PTR pixel$1[rsp+2], al

; 660  : 							else

	jmp	SHORT $LN21@color
$LN22@color:

; 661  : 								pixel.green = 255;

	mov	BYTE PTR pixel$1[rsp+2], 255		; 000000ffH
$LN21@color:

; 662  : 							break;

	jmp	$LN44@color
$LN20@color:

; 663  : 						case 4:
; 664  : 							if (pixel.blue + mix < 255)

	movzx	eax, BYTE PTR pixel$1[rsp+3]
	add	eax, DWORD PTR mix$[rsp]
	cmp	eax, 255				; 000000ffH
	jge	SHORT $LN19@color

; 665  : 								pixel.blue += mix;

	movzx	eax, BYTE PTR pixel$1[rsp+3]
	add	eax, DWORD PTR mix$[rsp]
	mov	BYTE PTR pixel$1[rsp+3], al

; 666  : 							else

	jmp	SHORT $LN18@color
$LN19@color:

; 667  : 								pixel.blue = 255;

	mov	BYTE PTR pixel$1[rsp+3], 255		; 000000ffH
$LN18@color:

; 668  : 							break;

	jmp	$LN44@color
$LN17@color:

; 669  : 						case 5:
; 670  : 							if (pixel.red + niP.colorCustomColor.red < 255)

	movzx	eax, BYTE PTR pixel$1[rsp+1]
	mov	rcx, QWORD PTR niP$[rsp]
	movzx	ecx, BYTE PTR [rcx+72]
	add	eax, ecx
	cmp	eax, 255				; 000000ffH
	jge	SHORT $LN16@color

; 671  : 								pixel.red += niP.colorCustomColor.red;

	mov	rax, QWORD PTR niP$[rsp]
	movzx	eax, BYTE PTR [rax+72]
	movzx	ecx, BYTE PTR pixel$1[rsp+1]
	add	ecx, eax
	mov	eax, ecx
	mov	BYTE PTR pixel$1[rsp+1], al

; 672  : 							else

	jmp	SHORT $LN15@color
$LN16@color:

; 673  : 								pixel.red = 255;

	mov	BYTE PTR pixel$1[rsp+1], 255		; 000000ffH
$LN15@color:

; 674  : 							if (pixel.green + niP.colorCustomColor.green < 255)

	movzx	eax, BYTE PTR pixel$1[rsp+2]
	mov	rcx, QWORD PTR niP$[rsp]
	movzx	ecx, BYTE PTR [rcx+73]
	add	eax, ecx
	cmp	eax, 255				; 000000ffH
	jge	SHORT $LN14@color

; 675  : 								pixel.green += niP.colorCustomColor.green;

	mov	rax, QWORD PTR niP$[rsp]
	movzx	eax, BYTE PTR [rax+73]
	movzx	ecx, BYTE PTR pixel$1[rsp+2]
	add	ecx, eax
	mov	eax, ecx
	mov	BYTE PTR pixel$1[rsp+2], al

; 676  : 							else

	jmp	SHORT $LN13@color
$LN14@color:

; 677  : 								pixel.green = 255;

	mov	BYTE PTR pixel$1[rsp+2], 255		; 000000ffH
$LN13@color:

; 678  : 							if (pixel.blue + niP.colorCustomColor.blue < 255)

	movzx	eax, BYTE PTR pixel$1[rsp+3]
	mov	rcx, QWORD PTR niP$[rsp]
	movzx	ecx, BYTE PTR [rcx+74]
	add	eax, ecx
	cmp	eax, 255				; 000000ffH
	jge	SHORT $LN12@color

; 679  : 								pixel.blue += niP.colorCustomColor.blue;

	mov	rax, QWORD PTR niP$[rsp]
	movzx	eax, BYTE PTR [rax+74]
	movzx	ecx, BYTE PTR pixel$1[rsp+3]
	add	ecx, eax
	mov	eax, ecx
	mov	BYTE PTR pixel$1[rsp+3], al

; 680  : 							else

	jmp	SHORT $LN11@color
$LN12@color:

; 681  : 								pixel.blue = 255;

	mov	BYTE PTR pixel$1[rsp+3], 255		; 000000ffH
$LN11@color:
$LN44@color:

; 682  : 							break;
; 683  : 				} else

	jmp	$LN10@color
$LN46@color:

; 684  : 					switch (color) {

	mov	eax, DWORD PTR color$[rsp]
	mov	DWORD PTR tv271[rsp], eax
	mov	eax, DWORD PTR tv271[rsp]
	inc	eax
	mov	DWORD PTR tv271[rsp], eax
	cmp	DWORD PTR tv271[rsp], 6
	ja	$LN8@color
	movsxd	rax, DWORD PTR tv271[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN64@color[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN7@color:

; 685  : 						case -1:
; 686  : 							pixel.alpha = 255;

	mov	BYTE PTR pixel$1[rsp], 255		; 000000ffH

; 687  : 							break;

	jmp	$LN8@color
$LN6@color:

; 688  : 						case 0:
; 689  : 							pixel.red = 0;

	mov	BYTE PTR pixel$1[rsp+1], 0

; 690  : 							pixel.green = 0;

	mov	BYTE PTR pixel$1[rsp+2], 0

; 691  : 							pixel.blue = 0;

	mov	BYTE PTR pixel$1[rsp+3], 0

; 692  : 							break;

	jmp	SHORT $LN8@color
$LN5@color:

; 693  : 						case 1:
; 694  : 							pixel.red = 255;

	mov	BYTE PTR pixel$1[rsp+1], 255		; 000000ffH

; 695  : 							pixel.green = 255;

	mov	BYTE PTR pixel$1[rsp+2], 255		; 000000ffH

; 696  : 							pixel.blue = 255;

	mov	BYTE PTR pixel$1[rsp+3], 255		; 000000ffH

; 697  : 							break;

	jmp	SHORT $LN8@color
$LN4@color:

; 698  : 						case 2:
; 699  : 							pixel.red = 255;

	mov	BYTE PTR pixel$1[rsp+1], 255		; 000000ffH

; 700  : 							pixel.green = 0;

	mov	BYTE PTR pixel$1[rsp+2], 0

; 701  : 							pixel.blue = 0;

	mov	BYTE PTR pixel$1[rsp+3], 0

; 702  : 							break;

	jmp	SHORT $LN8@color
$LN3@color:

; 703  : 						case 3:
; 704  : 							pixel.red = 0;

	mov	BYTE PTR pixel$1[rsp+1], 0

; 705  : 							pixel.green = 255;

	mov	BYTE PTR pixel$1[rsp+2], 255		; 000000ffH

; 706  : 							pixel.blue = 0;

	mov	BYTE PTR pixel$1[rsp+3], 0

; 707  : 							break;

	jmp	SHORT $LN8@color
$LN2@color:

; 708  : 						case 4:
; 709  : 							pixel.red = 0;

	mov	BYTE PTR pixel$1[rsp+1], 0

; 710  : 							pixel.green = 0;

	mov	BYTE PTR pixel$1[rsp+2], 0

; 711  : 							pixel.blue = 255;

	mov	BYTE PTR pixel$1[rsp+3], 255		; 000000ffH

; 712  : 							break;

	jmp	SHORT $LN8@color
$LN1@color:

; 713  : 						case 5:
; 714  : 							pixel.red = niP.colorCustomColor.red;

	mov	rax, QWORD PTR niP$[rsp]
	movzx	eax, BYTE PTR [rax+72]
	mov	BYTE PTR pixel$1[rsp+1], al

; 715  : 							pixel.green = niP.colorCustomColor.green;

	mov	rax, QWORD PTR niP$[rsp]
	movzx	eax, BYTE PTR [rax+73]
	mov	BYTE PTR pixel$1[rsp+2], al

; 716  : 							pixel.blue = niP.colorCustomColor.blue;

	mov	rax, QWORD PTR niP$[rsp]
	movzx	eax, BYTE PTR [rax+74]
	mov	BYTE PTR pixel$1[rsp+3], al
$LN8@color:
$LN10@color:

; 717  : 							break;
; 718  : 				}
; 719  : 				pSet(niP, data, setx, sety, outWidth, pixel);

	lea	rax, QWORD PTR $T7[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR niP$[rsp]
	mov	ecx, 236				; 000000ecH
	rep movsb
	mov	eax, DWORD PTR pixel$1[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR outWidth$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR sety$4[rsp]
	mov	r8d, DWORD PTR setx$2[rsp]
	mov	rdx, QWORD PTR data$[rsp]
	lea	rcx, QWORD PTR $T7[rsp]
	call	?pSet@@YAJUParamInfo@@PEAUPF_Pixel@@JJJU2@@Z ; pSet
$LN47@color:

; 720  : 			}
; 721  : 		}

	jmp	$LN49@color
$LN48@color:

; 722  : 	}

	jmp	$LN52@color
$LN51@color:

; 723  : 
; 724  : 	return PF_Err_NONE;

	xor	eax, eax
$LN62@color:

; 725  : }

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 392				; 00000188H
	pop	rdi
	pop	rsi
	ret	0
	npad	2
$LN65@color:
	DD	$LN43@color
	DD	$LN40@color
	DD	$LN33@color
	DD	$LN26@color
	DD	$LN23@color
	DD	$LN20@color
	DD	$LN17@color
$LN64@color:
	DD	$LN7@color
	DD	$LN6@color
	DD	$LN5@color
	DD	$LN4@color
	DD	$LN3@color
	DD	$LN2@color
	DD	$LN1@color
?color@@YAJPEAUPF_Pixel@@UParamInfo@@JJJJ@Z ENDP	; color
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\syuilo\documents\visual studio 2013\projects\after_effects_cs5_sdk_win\adobe after effects cs5 win sdk\examples\template\glitch\glitch.cpp
_TEXT	SEGMENT
pixelA$1 = 48
sourcePixel$2 = 52
pixelB$3 = 56
sety$4 = 60
lx$5 = 64
i$6 = 68
x$7 = 72
y$8 = 76
rx$9 = 80
type$ = 84
setx$10 = 88
tv138 = 92
$T11 = 96
$T12 = 100
$T13 = 104
$T14 = 108
$T15 = 112
$T16 = 116
w$ = 120
$T17 = 128
$T18 = 368
inData$ = 640
outData$ = 648
niP$ = 656
py$ = 664
height$ = 672
width$ = 680
inWidth$ = 688
outWidth$ = 696
?colorShifter@@YAJPEAUPF_Pixel@@0UParamInfo@@JJJJJ@Z PROC ; colorShifter

; 465  : {

	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 616				; 00000268H

; 466  : 	double w = niP.colorShifterAmount;

	mov	rax, QWORD PTR niP$[rsp]
	cvtsi2sd xmm0, DWORD PTR [rax+52]
	movsdx	QWORD PTR w$[rsp], xmm0

; 467  : 
; 468  : 	int type = 0;

	mov	DWORD PTR type$[rsp], 0

; 469  : 
; 470  : 	if (niP.colorShifterType == 4)

	mov	rax, QWORD PTR niP$[rsp]
	cmp	DWORD PTR [rax+44], 4
	jne	SHORT $LN34@colorShift

; 471  : 		type = 1 + (rand() % 3);

	call	QWORD PTR __imp_rand
	cdq
	mov	ecx, 3
	idiv	ecx
	mov	eax, edx
	inc	eax
	mov	DWORD PTR type$[rsp], eax

; 472  : 	else

	jmp	SHORT $LN33@colorShift
$LN34@colorShift:

; 473  : 		type = niP.colorShifterType;

	mov	rax, QWORD PTR niP$[rsp]
	mov	eax, DWORD PTR [rax+44]
	mov	DWORD PTR type$[rsp], eax
$LN33@colorShift:

; 474  : 
; 475  : 	for (A_long x = 0; x < width; x++) {

	mov	DWORD PTR x$7[rsp], 0
	jmp	SHORT $LN32@colorShift
$LN31@colorShift:
	mov	eax, DWORD PTR x$7[rsp]
	inc	eax
	mov	DWORD PTR x$7[rsp], eax
$LN32@colorShift:
	mov	eax, DWORD PTR width$[rsp]
	cmp	DWORD PTR x$7[rsp], eax
	jge	$LN30@colorShift

; 476  : 		for (A_long y = 0; y < height; y++) {

	mov	DWORD PTR y$8[rsp], 0
	jmp	SHORT $LN29@colorShift
$LN28@colorShift:
	mov	eax, DWORD PTR y$8[rsp]
	inc	eax
	mov	DWORD PTR y$8[rsp], eax
$LN29@colorShift:
	mov	eax, DWORD PTR height$[rsp]
	cmp	DWORD PTR y$8[rsp], eax
	jge	$LN27@colorShift

; 477  : 			A_long setx, sety;
; 478  : 			setx = x;

	mov	eax, DWORD PTR x$7[rsp]
	mov	DWORD PTR setx$10[rsp], eax

; 479  : 			sety = 1 + py + y;

	mov	eax, DWORD PTR py$[rsp]
	mov	ecx, DWORD PTR y$8[rsp]
	lea	eax, DWORD PTR [rax+rcx+1]
	mov	DWORD PTR sety$4[rsp], eax

; 480  : 
; 481  : 			if ((sety >= 0) && (sety < (py + height))) {

	cmp	DWORD PTR sety$4[rsp], 0
	jl	$LN26@colorShift
	mov	eax, DWORD PTR height$[rsp]
	mov	ecx, DWORD PTR py$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cmp	DWORD PTR sety$4[rsp], eax
	jge	$LN26@colorShift

; 482  : 				PF_Pixel sourcePixel;
; 483  : 				sourcePixel = pGet(inData, setx, sety, inWidth);

	mov	r9d, DWORD PTR inWidth$[rsp]
	mov	r8d, DWORD PTR sety$4[rsp]
	mov	edx, DWORD PTR setx$10[rsp]
	mov	rcx, QWORD PTR inData$[rsp]
	call	?pGet@@YA?AUPF_Pixel@@PEAU1@JJJ@Z	; pGet
	mov	DWORD PTR $T16[rsp], eax
	mov	eax, DWORD PTR $T16[rsp]
	mov	DWORD PTR sourcePixel$2[rsp], eax

; 484  : 
; 485  : 				for (int i = 1; i < w; i++) {

	mov	DWORD PTR i$6[rsp], 1
	jmp	SHORT $LN25@colorShift
$LN24@colorShift:
	mov	eax, DWORD PTR i$6[rsp]
	inc	eax
	mov	DWORD PTR i$6[rsp], eax
$LN25@colorShift:
	cvtsi2sd xmm0, DWORD PTR i$6[rsp]
	movsdx	xmm1, QWORD PTR w$[rsp]
	comisd	xmm1, xmm0
	jbe	$LN23@colorShift

; 486  : 					PF_Pixel pixelA, pixelB;
; 487  : 					A_long lx = setx - i;

	mov	eax, DWORD PTR i$6[rsp]
	mov	ecx, DWORD PTR setx$10[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR lx$5[rsp], eax

; 488  : 					A_long rx = setx + i + w;

	mov	eax, DWORD PTR i$6[rsp]
	mov	ecx, DWORD PTR setx$10[rsp]
	add	ecx, eax
	mov	eax, ecx
	cvtsi2sd xmm0, eax
	addsd	xmm0, QWORD PTR w$[rsp]
	cvttsd2si eax, xmm0
	mov	DWORD PTR rx$9[rsp], eax

; 489  : 					if (lx < 0)

	cmp	DWORD PTR lx$5[rsp], 0
	jge	SHORT $LN22@colorShift

; 490  : 						lx = 0;

	mov	DWORD PTR lx$5[rsp], 0
$LN22@colorShift:

; 491  : 					if (rx > width)

	mov	eax, DWORD PTR width$[rsp]
	cmp	DWORD PTR rx$9[rsp], eax
	jle	SHORT $LN21@colorShift

; 492  : 						rx = width;

	mov	eax, DWORD PTR width$[rsp]
	mov	DWORD PTR rx$9[rsp], eax
$LN21@colorShift:

; 493  : 					pixelA = pGet(inData, lx, sety, inWidth);

	mov	r9d, DWORD PTR inWidth$[rsp]
	mov	r8d, DWORD PTR sety$4[rsp]
	mov	edx, DWORD PTR lx$5[rsp]
	mov	rcx, QWORD PTR inData$[rsp]
	call	?pGet@@YA?AUPF_Pixel@@PEAU1@JJJ@Z	; pGet
	mov	DWORD PTR $T15[rsp], eax
	mov	eax, DWORD PTR $T15[rsp]
	mov	DWORD PTR pixelA$1[rsp], eax

; 494  : 					pixelB = pGet(inData, rx, sety, inWidth);

	mov	r9d, DWORD PTR inWidth$[rsp]
	mov	r8d, DWORD PTR sety$4[rsp]
	mov	edx, DWORD PTR rx$9[rsp]
	mov	rcx, QWORD PTR inData$[rsp]
	call	?pGet@@YA?AUPF_Pixel@@PEAU1@JJJ@Z	; pGet
	mov	DWORD PTR $T14[rsp], eax
	mov	eax, DWORD PTR $T14[rsp]
	mov	DWORD PTR pixelB$3[rsp], eax

; 495  : 
; 496  : 					switch (type) {

	mov	eax, DWORD PTR type$[rsp]
	mov	DWORD PTR tv138[rsp], eax
	cmp	DWORD PTR tv138[rsp], 1
	je	SHORT $LN18@colorShift
	cmp	DWORD PTR tv138[rsp], 2
	je	$LN12@colorShift
	cmp	DWORD PTR tv138[rsp], 3
	je	$LN6@colorShift
	jmp	$LN19@colorShift
$LN18@colorShift:

; 497  : 						case 1:
; 498  : 							pixelA.blue = pGet(outData, lx, sety, outWidth).blue;

	mov	r9d, DWORD PTR outWidth$[rsp]
	mov	r8d, DWORD PTR sety$4[rsp]
	mov	edx, DWORD PTR lx$5[rsp]
	mov	rcx, QWORD PTR outData$[rsp]
	call	?pGet@@YA?AUPF_Pixel@@PEAU1@JJJ@Z	; pGet
	mov	DWORD PTR $T11[rsp], eax
	movzx	eax, BYTE PTR $T11[rsp+3]
	mov	BYTE PTR pixelA$1[rsp+3], al

; 499  : 
; 500  : 							if (sourcePixel.red > niP.colorShifterThreshold) {

	movzx	eax, BYTE PTR sourcePixel$2[rsp+1]
	mov	rcx, QWORD PTR niP$[rsp]
	cmp	eax, DWORD PTR [rcx+48]
	jle	SHORT $LN17@colorShift

; 501  : 								if (pixelA.green + sourcePixel.red < 255)

	movzx	eax, BYTE PTR pixelA$1[rsp+2]
	movzx	ecx, BYTE PTR sourcePixel$2[rsp+1]
	add	eax, ecx
	cmp	eax, 255				; 000000ffH
	jge	SHORT $LN16@colorShift

; 502  : 									pixelA.green += sourcePixel.red;

	movzx	eax, BYTE PTR sourcePixel$2[rsp+1]
	movzx	ecx, BYTE PTR pixelA$1[rsp+2]
	add	ecx, eax
	mov	eax, ecx
	mov	BYTE PTR pixelA$1[rsp+2], al

; 503  : 								else

	jmp	SHORT $LN15@colorShift
$LN16@colorShift:

; 504  : 									pixelA.green = 255;

	mov	BYTE PTR pixelA$1[rsp+2], 255		; 000000ffH
$LN15@colorShift:

; 505  : 
; 506  : 								if (pixelB.blue + sourcePixel.red < 255)

	movzx	eax, BYTE PTR pixelB$3[rsp+3]
	movzx	ecx, BYTE PTR sourcePixel$2[rsp+1]
	add	eax, ecx
	cmp	eax, 255				; 000000ffH
	jge	SHORT $LN14@colorShift

; 507  : 									pixelB.blue += sourcePixel.red;

	movzx	eax, BYTE PTR sourcePixel$2[rsp+1]
	movzx	ecx, BYTE PTR pixelB$3[rsp+3]
	add	ecx, eax
	mov	eax, ecx
	mov	BYTE PTR pixelB$3[rsp+3], al

; 508  : 								else

	jmp	SHORT $LN13@colorShift
$LN14@colorShift:

; 509  : 									pixelB.blue = 255;

	mov	BYTE PTR pixelB$3[rsp+3], 255		; 000000ffH
$LN13@colorShift:
$LN17@colorShift:

; 510  : 							}
; 511  : 							break;

	jmp	$LN19@colorShift
$LN12@colorShift:

; 512  : 						case 2:
; 513  : 							pixelA.blue = pGet(outData, lx, sety, outWidth).blue;

	mov	r9d, DWORD PTR outWidth$[rsp]
	mov	r8d, DWORD PTR sety$4[rsp]
	mov	edx, DWORD PTR lx$5[rsp]
	mov	rcx, QWORD PTR outData$[rsp]
	call	?pGet@@YA?AUPF_Pixel@@PEAU1@JJJ@Z	; pGet
	mov	DWORD PTR $T12[rsp], eax
	movzx	eax, BYTE PTR $T12[rsp+3]
	mov	BYTE PTR pixelA$1[rsp+3], al

; 514  : 
; 515  : 							if (sourcePixel.green > niP.colorShifterThreshold) {

	movzx	eax, BYTE PTR sourcePixel$2[rsp+2]
	mov	rcx, QWORD PTR niP$[rsp]
	cmp	eax, DWORD PTR [rcx+48]
	jle	SHORT $LN11@colorShift

; 516  : 								if (pixelA.red + sourcePixel.green < 255)

	movzx	eax, BYTE PTR pixelA$1[rsp+1]
	movzx	ecx, BYTE PTR sourcePixel$2[rsp+2]
	add	eax, ecx
	cmp	eax, 255				; 000000ffH
	jge	SHORT $LN10@colorShift

; 517  : 									pixelA.red += sourcePixel.green;

	movzx	eax, BYTE PTR sourcePixel$2[rsp+2]
	movzx	ecx, BYTE PTR pixelA$1[rsp+1]
	add	ecx, eax
	mov	eax, ecx
	mov	BYTE PTR pixelA$1[rsp+1], al

; 518  : 								else

	jmp	SHORT $LN9@colorShift
$LN10@colorShift:

; 519  : 									pixelA.red = 255;

	mov	BYTE PTR pixelA$1[rsp+1], 255		; 000000ffH
$LN9@colorShift:

; 520  : 
; 521  : 								if (pixelB.blue + sourcePixel.green < 255)

	movzx	eax, BYTE PTR pixelB$3[rsp+3]
	movzx	ecx, BYTE PTR sourcePixel$2[rsp+2]
	add	eax, ecx
	cmp	eax, 255				; 000000ffH
	jge	SHORT $LN8@colorShift

; 522  : 									pixelB.blue += sourcePixel.green;

	movzx	eax, BYTE PTR sourcePixel$2[rsp+2]
	movzx	ecx, BYTE PTR pixelB$3[rsp+3]
	add	ecx, eax
	mov	eax, ecx
	mov	BYTE PTR pixelB$3[rsp+3], al

; 523  : 								else

	jmp	SHORT $LN7@colorShift
$LN8@colorShift:

; 524  : 									pixelB.blue = 255;

	mov	BYTE PTR pixelB$3[rsp+3], 255		; 000000ffH
$LN7@colorShift:
$LN11@colorShift:

; 525  : 							}
; 526  : 							break;

	jmp	$LN19@colorShift
$LN6@colorShift:

; 527  : 						case 3:
; 528  : 							pixelA.green = pGet(outData, lx, sety, outWidth).green;

	mov	r9d, DWORD PTR outWidth$[rsp]
	mov	r8d, DWORD PTR sety$4[rsp]
	mov	edx, DWORD PTR lx$5[rsp]
	mov	rcx, QWORD PTR outData$[rsp]
	call	?pGet@@YA?AUPF_Pixel@@PEAU1@JJJ@Z	; pGet
	mov	DWORD PTR $T13[rsp], eax
	movzx	eax, BYTE PTR $T13[rsp+2]
	mov	BYTE PTR pixelA$1[rsp+2], al

; 529  : 
; 530  : 							if (sourcePixel.blue > niP.colorShifterThreshold) {

	movzx	eax, BYTE PTR sourcePixel$2[rsp+3]
	mov	rcx, QWORD PTR niP$[rsp]
	cmp	eax, DWORD PTR [rcx+48]
	jle	SHORT $LN5@colorShift

; 531  : 								if (pixelA.red + sourcePixel.blue < 255)

	movzx	eax, BYTE PTR pixelA$1[rsp+1]
	movzx	ecx, BYTE PTR sourcePixel$2[rsp+3]
	add	eax, ecx
	cmp	eax, 255				; 000000ffH
	jge	SHORT $LN4@colorShift

; 532  : 									pixelA.red += sourcePixel.blue;

	movzx	eax, BYTE PTR sourcePixel$2[rsp+3]
	movzx	ecx, BYTE PTR pixelA$1[rsp+1]
	add	ecx, eax
	mov	eax, ecx
	mov	BYTE PTR pixelA$1[rsp+1], al

; 533  : 								else

	jmp	SHORT $LN3@colorShift
$LN4@colorShift:

; 534  : 									pixelA.red = 255;

	mov	BYTE PTR pixelA$1[rsp+1], 255		; 000000ffH
$LN3@colorShift:

; 535  : 
; 536  : 								if (pixelB.green + sourcePixel.blue < 255)

	movzx	eax, BYTE PTR pixelB$3[rsp+2]
	movzx	ecx, BYTE PTR sourcePixel$2[rsp+3]
	add	eax, ecx
	cmp	eax, 255				; 000000ffH
	jge	SHORT $LN2@colorShift

; 537  : 									pixelB.green += sourcePixel.blue;

	movzx	eax, BYTE PTR sourcePixel$2[rsp+3]
	movzx	ecx, BYTE PTR pixelB$3[rsp+2]
	add	ecx, eax
	mov	eax, ecx
	mov	BYTE PTR pixelB$3[rsp+2], al

; 538  : 								else

	jmp	SHORT $LN1@colorShift
$LN2@colorShift:

; 539  : 									pixelB.green = 255;

	mov	BYTE PTR pixelB$3[rsp+2], 255		; 000000ffH
$LN1@colorShift:
$LN5@colorShift:
$LN19@colorShift:

; 540  : 							}
; 541  : 							break;
; 542  : 					}
; 543  : 
; 544  : 					pSet(niP, outData, lx, sety, outWidth, pixelA);

	lea	rax, QWORD PTR $T17[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR niP$[rsp]
	mov	ecx, 236				; 000000ecH
	rep movsb
	mov	eax, DWORD PTR pixelA$1[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR outWidth$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR sety$4[rsp]
	mov	r8d, DWORD PTR lx$5[rsp]
	mov	rdx, QWORD PTR outData$[rsp]
	lea	rcx, QWORD PTR $T17[rsp]
	call	?pSet@@YAJUParamInfo@@PEAUPF_Pixel@@JJJU2@@Z ; pSet

; 545  : 					pSet(niP, outData, rx, sety, outWidth, pixelB);

	lea	rax, QWORD PTR $T18[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR niP$[rsp]
	mov	ecx, 236				; 000000ecH
	rep movsb
	mov	eax, DWORD PTR pixelB$3[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR outWidth$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR sety$4[rsp]
	mov	r8d, DWORD PTR rx$9[rsp]
	mov	rdx, QWORD PTR outData$[rsp]
	lea	rcx, QWORD PTR $T18[rsp]
	call	?pSet@@YAJUParamInfo@@PEAUPF_Pixel@@JJJU2@@Z ; pSet

; 546  : 				}

	jmp	$LN24@colorShift
$LN23@colorShift:
$LN26@colorShift:

; 547  : 			}
; 548  : 		}

	jmp	$LN28@colorShift
$LN27@colorShift:

; 549  : 	}

	jmp	$LN31@colorShift
$LN30@colorShift:

; 550  : 
; 551  : 	return PF_Err_NONE;

	xor	eax, eax

; 552  : }

	add	rsp, 616				; 00000268H
	pop	rdi
	pop	rsi
	ret	0
?colorShifter@@YAJPEAUPF_Pixel@@0UParamInfo@@JJJJJ@Z ENDP ; colorShifter
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\syuilo\documents\visual studio 2013\projects\after_effects_cs5_sdk_win\adobe after effects cs5 win sdk\examples\template\glitch\glitch.cpp
_TEXT	SEGMENT
data$ = 8
x$ = 16
y$ = 24
width$ = 32
?pGet@@YA?AUPF_Pixel@@PEAU1@JJJ@Z PROC			; pGet

; 460  : {

	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx

; 461  : 	return data[x + y * width];

	mov	eax, DWORD PTR y$[rsp]
	imul	eax, DWORD PTR width$[rsp]
	mov	ecx, DWORD PTR x$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	mov	rcx, QWORD PTR data$[rsp]
	mov	eax, DWORD PTR [rcx+rax*4]

; 462  : }

	ret	0
?pGet@@YA?AUPF_Pixel@@PEAU1@JJJ@Z ENDP			; pGet
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\syuilo\documents\visual studio 2013\projects\after_effects_cs5_sdk_win\adobe after effects cs5 win sdk\examples\template\glitch\glitch.cpp
_TEXT	SEGMENT
blend$1 = 0
niP$ = 32
data$ = 40
x$ = 48
y$ = 56
width$ = 64
pixel$ = 72
?pSet@@YAJUParamInfo@@PEAUPF_Pixel@@JJJU2@@Z PROC	; pSet

; 430  : {

	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24

; 431  : 	if (x < 0)

	cmp	DWORD PTR x$[rsp], 0
	jge	SHORT $LN9@pSet

; 432  : 		x = 0;

	mov	DWORD PTR x$[rsp], 0
$LN9@pSet:

; 433  : 	if (y < 0)

	cmp	DWORD PTR y$[rsp], 0
	jge	SHORT $LN8@pSet

; 434  : 		y = 0;

	mov	DWORD PTR y$[rsp], 0
$LN8@pSet:

; 435  : 
; 436  : 	if (niP.opacity > 0) {

	mov	rax, QWORD PTR niP$[rsp]
	cmp	DWORD PTR [rax+24], 0
	jle	SHORT $LN7@pSet

; 437  : 		A_long blend = (255 * niP.opacity / 100);

	mov	rax, QWORD PTR niP$[rsp]
	imul	eax, DWORD PTR [rax+24], 255		; 000000ffH
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	DWORD PTR blend$1[rsp], eax

; 438  : 
; 439  : 		if (pixel.red + blend < 255)

	movzx	eax, BYTE PTR pixel$[rsp+1]
	add	eax, DWORD PTR blend$1[rsp]
	cmp	eax, 255				; 000000ffH
	jge	SHORT $LN6@pSet

; 440  : 			pixel.red += blend;

	movzx	eax, BYTE PTR pixel$[rsp+1]
	add	eax, DWORD PTR blend$1[rsp]
	mov	BYTE PTR pixel$[rsp+1], al

; 441  : 		else

	jmp	SHORT $LN5@pSet
$LN6@pSet:

; 442  : 			pixel.red = 0;

	mov	BYTE PTR pixel$[rsp+1], 0
$LN5@pSet:

; 443  : 
; 444  : 		if (pixel.green + blend < 255)

	movzx	eax, BYTE PTR pixel$[rsp+2]
	add	eax, DWORD PTR blend$1[rsp]
	cmp	eax, 255				; 000000ffH
	jge	SHORT $LN4@pSet

; 445  : 			pixel.green += blend;

	movzx	eax, BYTE PTR pixel$[rsp+2]
	add	eax, DWORD PTR blend$1[rsp]
	mov	BYTE PTR pixel$[rsp+2], al

; 446  : 		else

	jmp	SHORT $LN3@pSet
$LN4@pSet:

; 447  : 			pixel.green = 0;

	mov	BYTE PTR pixel$[rsp+2], 0
$LN3@pSet:

; 448  : 
; 449  : 		if (pixel.blue + blend < 255)

	movzx	eax, BYTE PTR pixel$[rsp+3]
	add	eax, DWORD PTR blend$1[rsp]
	cmp	eax, 255				; 000000ffH
	jge	SHORT $LN2@pSet

; 450  : 			pixel.blue += blend;

	movzx	eax, BYTE PTR pixel$[rsp+3]
	add	eax, DWORD PTR blend$1[rsp]
	mov	BYTE PTR pixel$[rsp+3], al

; 451  : 		else

	jmp	SHORT $LN1@pSet
$LN2@pSet:

; 452  : 			pixel.blue = 0;

	mov	BYTE PTR pixel$[rsp+3], 0
$LN1@pSet:
$LN7@pSet:

; 453  : 	}
; 454  : 
; 455  : 	data[x + y * width] = pixel;

	mov	eax, DWORD PTR y$[rsp]
	imul	eax, DWORD PTR width$[rsp]
	mov	ecx, DWORD PTR x$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	mov	rcx, QWORD PTR data$[rsp]
	mov	edx, DWORD PTR pixel$[rsp]
	mov	DWORD PTR [rcx+rax*4], edx

; 456  : 	return PF_Err_NONE;

	xor	eax, eax

; 457  : }

	add	rsp, 24
	ret	0
?pSet@@YAJUParamInfo@@PEAUPF_Pixel@@JJJU2@@Z ENDP	; pSet
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\syuilo\documents\visual studio 2013\projects\after_effects_cs5_sdk_win\adobe after effects cs5 win sdk\examples\template\glitch\glitch.cpp
_TEXT	SEGMENT
tv272 = 48
tv134 = 49
tv279 = 50
tv164 = 51
tv292 = 52
tv237 = 53
tv305 = 54
tv251 = 55
tv367 = 56
tv265 = 57
tv244 = 58
tv258 = 59
tv224 = 60
tv141 = 61
_t$1 = 64
_p$2 = 72
tv66 = 80
niP$ = 96
layer$ = 336
__$ArrayPad$ = 512
$T3 = 560
params$ = 568
in_data$ = 576
?initParamsInfo@@YA?AUParamInfo@@QEAPEAUPF_ParamDef@@PEAUPF_InData@@@Z PROC ; initParamsInfo

; 370  : {

	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 536				; 00000218H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
$LN5@initParams:

; 371  : 	ParamInfo niP;
; 372  : 	AEFX_CLR_STRUCT(niP);

	mov	DWORD PTR _t$1[rsp], 236		; 000000ecH
	lea	rax, QWORD PTR niP$[rsp]
	mov	QWORD PTR _p$2[rsp], rax
$LN2@initParams:
	mov	eax, DWORD PTR _t$1[rsp]
	mov	DWORD PTR tv66[rsp], eax
	mov	eax, DWORD PTR _t$1[rsp]
	dec	eax
	mov	DWORD PTR _t$1[rsp], eax
	cmp	DWORD PTR tv66[rsp], 0
	je	SHORT $LN1@initParams
	mov	rax, QWORD PTR _p$2[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR _p$2[rsp]
	inc	rax
	mov	QWORD PTR _p$2[rsp], rax
	jmp	SHORT $LN2@initParams
$LN1@initParams:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN5@initParams

; 373  : 
; 374  : 	niP.scanline = params[GLITCH_SCANLINE]->u.pd.value;

	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR params$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	eax, DWORD PTR [rax+56]
	mov	DWORD PTR niP$[rsp], eax

; 375  : 	niP.scanlineHeight = FIX2INT(params[GLITCH_SCANLINE_HEIGHT]->u.sd.value);

	mov	eax, 8
	imul	rax, rax, 3
	mov	rcx, QWORD PTR params$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	eax, DWORD PTR [rax+56]
	sar	eax, 16
	mov	DWORD PTR niP$[rsp+4], eax

; 376  : 	niP.scanlinePositionY = FIX2INT(params[GLITCH_SCANLINE_POSITION]->u.td.y_value);

	mov	eax, 8
	imul	rax, rax, 2
	mov	rcx, QWORD PTR params$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	eax, DWORD PTR [rax+60]
	sar	eax, 16
	mov	DWORD PTR niP$[rsp+8], eax

; 377  : 	niP.areaCount = params[GLITCH_AREA_COUNT]->u.sd.value;

	mov	eax, 8
	imul	rax, rax, 5
	mov	rcx, QWORD PTR params$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	eax, DWORD PTR [rax+56]
	mov	DWORD PTR niP$[rsp+12], eax

; 378  : 	niP.areaGlitchCount = params[GLITCH_AREA_GLITCH_COUNT]->u.sd.value;

	mov	eax, 8
	imul	rax, rax, 6
	mov	rcx, QWORD PTR params$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	eax, DWORD PTR [rax+56]
	mov	DWORD PTR niP$[rsp+16], eax

; 379  : 	niP.randomHeight = params[GLITCH_RANDOM_HEIGHT]->u.bd.value;

	mov	eax, 8
	imul	rax, rax, 4
	mov	rcx, QWORD PTR params$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	cmp	DWORD PTR [rax+56], 0
	je	SHORT $LN8@initParams
	mov	BYTE PTR tv134[rsp], 1
	jmp	SHORT $LN9@initParams
$LN8@initParams:
	mov	BYTE PTR tv134[rsp], 0
$LN9@initParams:
	movzx	eax, BYTE PTR tv134[rsp]
	mov	BYTE PTR niP$[rsp+20], al

; 380  : 	niP.compose = params[GLITCH_COMPOSE]->u.bd.value;

	mov	eax, 8
	imul	rax, rax, 7
	mov	rcx, QWORD PTR params$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	cmp	DWORD PTR [rax+56], 0
	je	SHORT $LN10@initParams
	mov	BYTE PTR tv141[rsp], 1
	jmp	SHORT $LN11@initParams
$LN10@initParams:
	mov	BYTE PTR tv141[rsp], 0
$LN11@initParams:
	movzx	eax, BYTE PTR tv141[rsp]
	mov	BYTE PTR niP$[rsp+21], al

; 381  : 	niP.opacity = FIX2INT(params[GLITCH_OPACITY]->u.sd.value);

	mov	eax, 8
	imul	rax, rax, 8
	mov	rcx, QWORD PTR params$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	eax, DWORD PTR [rax+56]
	sar	eax, 16
	mov	DWORD PTR niP$[rsp+24], eax

; 382  : 	niP.seedControl = params[GLITCH_SEED_CONTROLL]->u.pd.value;

	mov	eax, 8
	imul	rax, rax, 9
	mov	rcx, QWORD PTR params$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	eax, DWORD PTR [rax+56]
	mov	DWORD PTR niP$[rsp+28], eax

; 383  : 	niP.areaSeed = params[GLITCH_AREA_SEED]->u.sd.value;

	mov	eax, 8
	imul	rax, rax, 10
	mov	rcx, QWORD PTR params$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	eax, DWORD PTR [rax+56]
	mov	DWORD PTR niP$[rsp+32], eax

; 384  : 
; 385  : 	niP.colorShifter = params[GLITCH_COLORSHIFTER]->u.bd.value;

	mov	eax, 8
	imul	rax, rax, 12
	mov	rcx, QWORD PTR params$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	cmp	DWORD PTR [rax+56], 0
	je	SHORT $LN12@initParams
	mov	BYTE PTR tv164[rsp], 1
	jmp	SHORT $LN13@initParams
$LN12@initParams:
	mov	BYTE PTR tv164[rsp], 0
$LN13@initParams:
	movzx	eax, BYTE PTR tv164[rsp]
	mov	BYTE PTR niP$[rsp+36], al

; 386  : 	niP.colorShifterFrequency = FIX2INT(params[GLITCH_COLORSHIFTER_FREQUENCY]->u.pd.value);

	mov	eax, 8
	imul	rax, rax, 13
	mov	rcx, QWORD PTR params$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	eax, DWORD PTR [rax+56]
	sar	eax, 16
	mov	DWORD PTR niP$[rsp+40], eax

; 387  : 	niP.colorShifterType = params[GLITCH_COLORSHIFTER_TYPE]->u.pd.value;

	mov	eax, 8
	imul	rax, rax, 14
	mov	rcx, QWORD PTR params$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	eax, DWORD PTR [rax+56]
	mov	DWORD PTR niP$[rsp+44], eax

; 388  : 	niP.colorShifterThreshold = params[GLITCH_COLORSHIFTER_THRESHOLD]->u.sd.value;

	mov	eax, 8
	imul	rax, rax, 15
	mov	rcx, QWORD PTR params$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	eax, DWORD PTR [rax+56]
	mov	DWORD PTR niP$[rsp+48], eax

; 389  : 	niP.colorShifterAmount = params[GLITCH_COLORSHIFTER_AMOUNT]->u.sd.value;

	mov	eax, 8
	imul	rax, rax, 16
	mov	rcx, QWORD PTR params$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	eax, DWORD PTR [rax+56]
	mov	DWORD PTR niP$[rsp+52], eax

; 390  : 
; 391  : 	niP.color = params[GLITCH_COLOR]->u.bd.value;

	mov	eax, 8
	imul	rax, rax, 19
	mov	rcx, QWORD PTR params$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	cmp	DWORD PTR [rax+56], 0
	je	SHORT $LN14@initParams
	mov	BYTE PTR tv224[rsp], 1
	jmp	SHORT $LN15@initParams
$LN14@initParams:
	mov	BYTE PTR tv224[rsp], 0
$LN15@initParams:
	movzx	eax, BYTE PTR tv224[rsp]
	mov	BYTE PTR niP$[rsp+56], al

; 392  : 	niP.colorFrequency = FIX2INT(params[GLITCH_COLOR_FREQUENCY]->u.pd.value);

	mov	eax, 8
	imul	rax, rax, 20
	mov	rcx, QWORD PTR params$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	eax, DWORD PTR [rax+56]
	sar	eax, 16
	mov	DWORD PTR niP$[rsp+60], eax

; 393  : 	niP.colorRed = params[GLITCH_COLOR_RED]->u.bd.value;

	mov	eax, 8
	imul	rax, rax, 21
	mov	rcx, QWORD PTR params$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	cmp	DWORD PTR [rax+56], 0
	je	SHORT $LN16@initParams
	mov	BYTE PTR tv237[rsp], 1
	jmp	SHORT $LN17@initParams
$LN16@initParams:
	mov	BYTE PTR tv237[rsp], 0
$LN17@initParams:
	movzx	eax, BYTE PTR tv237[rsp]
	mov	BYTE PTR niP$[rsp+64], al

; 394  : 	niP.colorGreen = params[GLITCH_COLOR_GREEN]->u.bd.value;

	mov	eax, 8
	imul	rax, rax, 22
	mov	rcx, QWORD PTR params$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	cmp	DWORD PTR [rax+56], 0
	je	SHORT $LN18@initParams
	mov	BYTE PTR tv244[rsp], 1
	jmp	SHORT $LN19@initParams
$LN18@initParams:
	mov	BYTE PTR tv244[rsp], 0
$LN19@initParams:
	movzx	eax, BYTE PTR tv244[rsp]
	mov	BYTE PTR niP$[rsp+65], al

; 395  : 	niP.colorBlue = params[GLITCH_COLOR_BLUE]->u.bd.value;

	mov	eax, 8
	imul	rax, rax, 23
	mov	rcx, QWORD PTR params$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	cmp	DWORD PTR [rax+56], 0
	je	SHORT $LN20@initParams
	mov	BYTE PTR tv251[rsp], 1
	jmp	SHORT $LN21@initParams
$LN20@initParams:
	mov	BYTE PTR tv251[rsp], 0
$LN21@initParams:
	movzx	eax, BYTE PTR tv251[rsp]
	mov	BYTE PTR niP$[rsp+66], al

; 396  : 	niP.colorBlack = params[GLITCH_COLOR_BLACK]->u.bd.value;

	mov	eax, 8
	imul	rax, rax, 24
	mov	rcx, QWORD PTR params$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	cmp	DWORD PTR [rax+56], 0
	je	SHORT $LN22@initParams
	mov	BYTE PTR tv258[rsp], 1
	jmp	SHORT $LN23@initParams
$LN22@initParams:
	mov	BYTE PTR tv258[rsp], 0
$LN23@initParams:
	movzx	eax, BYTE PTR tv258[rsp]
	mov	BYTE PTR niP$[rsp+67], al

; 397  : 	niP.colorWhite = params[GLITCH_COLOR_WHITE]->u.bd.value;

	mov	eax, 8
	imul	rax, rax, 25
	mov	rcx, QWORD PTR params$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	cmp	DWORD PTR [rax+56], 0
	je	SHORT $LN24@initParams
	mov	BYTE PTR tv265[rsp], 1
	jmp	SHORT $LN25@initParams
$LN24@initParams:
	mov	BYTE PTR tv265[rsp], 0
$LN25@initParams:
	movzx	eax, BYTE PTR tv265[rsp]
	mov	BYTE PTR niP$[rsp+68], al

; 398  : 	niP.colorAlpha = params[GLITCH_COLOR_ALPHA]->u.bd.value;

	mov	eax, 8
	imul	rax, rax, 26
	mov	rcx, QWORD PTR params$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	cmp	DWORD PTR [rax+56], 0
	je	SHORT $LN26@initParams
	mov	BYTE PTR tv272[rsp], 1
	jmp	SHORT $LN27@initParams
$LN26@initParams:
	mov	BYTE PTR tv272[rsp], 0
$LN27@initParams:
	movzx	eax, BYTE PTR tv272[rsp]
	mov	BYTE PTR niP$[rsp+69], al

; 399  : 	niP.colorUseCustomColor = params[GLITCH_COLOR_USE_CUSTOMCOLOR]->u.bd.value;

	mov	eax, 8
	imul	rax, rax, 27
	mov	rcx, QWORD PTR params$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	cmp	DWORD PTR [rax+56], 0
	je	SHORT $LN28@initParams
	mov	BYTE PTR tv279[rsp], 1
	jmp	SHORT $LN29@initParams
$LN28@initParams:
	mov	BYTE PTR tv279[rsp], 0
$LN29@initParams:
	movzx	eax, BYTE PTR tv279[rsp]
	mov	BYTE PTR niP$[rsp+70], al

; 400  : 	niP.colorCustomColor = params[GLITCH_COLOR_CUSTOMCOLOR]->u.cd.value;

	mov	eax, 8
	imul	rax, rax, 28
	mov	rcx, QWORD PTR params$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	eax, DWORD PTR [rax+56]
	mov	DWORD PTR niP$[rsp+71], eax

; 401  : 	niP.colorUnmix = params[GLITCH_COLOR_UNMIX]->u.bd.value;

	mov	eax, 8
	imul	rax, rax, 29
	mov	rcx, QWORD PTR params$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	cmp	DWORD PTR [rax+56], 0
	je	SHORT $LN30@initParams
	mov	BYTE PTR tv292[rsp], 1
	jmp	SHORT $LN31@initParams
$LN30@initParams:
	mov	BYTE PTR tv292[rsp], 0
$LN31@initParams:
	movzx	eax, BYTE PTR tv292[rsp]
	mov	BYTE PTR niP$[rsp+75], al

; 402  : 	niP.colorMix = FIX2INT(params[GLITCH_COLOR_MIX]->u.sd.value);

	mov	eax, 8
	imul	rax, rax, 30
	mov	rcx, QWORD PTR params$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	eax, DWORD PTR [rax+56]
	sar	eax, 16
	mov	DWORD PTR niP$[rsp+76], eax

; 403  : 
; 404  : 	niP.shifter = params[GLITCH_SHIFTER]->u.bd.value;

	mov	eax, 8
	imul	rax, rax, 33				; 00000021H
	mov	rcx, QWORD PTR params$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	cmp	DWORD PTR [rax+56], 0
	je	SHORT $LN32@initParams
	mov	BYTE PTR tv305[rsp], 1
	jmp	SHORT $LN33@initParams
$LN32@initParams:
	mov	BYTE PTR tv305[rsp], 0
$LN33@initParams:
	movzx	eax, BYTE PTR tv305[rsp]
	mov	BYTE PTR niP$[rsp+80], al

; 405  : 	niP.shifterFrequency = FIX2INT(params[GLITCH_SHIFTER_FREQUENCY]->u.pd.value);

	mov	eax, 8
	imul	rax, rax, 34				; 00000022H
	mov	rcx, QWORD PTR params$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	eax, DWORD PTR [rax+56]
	sar	eax, 16
	mov	DWORD PTR niP$[rsp+84], eax

; 406  : 	niP.shifterDirection = params[GLITCH_SHIFTER_DIRECTION]->u.pd.value;

	mov	eax, 8
	imul	rax, rax, 35				; 00000023H
	mov	rcx, QWORD PTR params$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	eax, DWORD PTR [rax+56]
	mov	DWORD PTR niP$[rsp+88], eax

; 407  : 	niP.shifterBorderType = params[GLITCH_SHIFTER_BORDERTYPE]->u.pd.value;

	mov	eax, 8
	imul	rax, rax, 36				; 00000024H
	mov	rcx, QWORD PTR params$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	eax, DWORD PTR [rax+56]
	mov	DWORD PTR niP$[rsp+92], eax

; 408  : 	niP.shifterMax = FIX2INT(params[GLITCH_SHIFTER_MAX]->u.sd.value);

	mov	eax, 8
	imul	rax, rax, 37				; 00000025H
	mov	rcx, QWORD PTR params$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	eax, DWORD PTR [rax+56]
	sar	eax, 16
	cvtsi2sd xmm0, eax
	movsdx	QWORD PTR niP$[rsp+96], xmm0

; 409  : 
; 410  : 	niP.layer = params[GLITCH_LAYER]->u.bd.value;

	mov	eax, 8
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR params$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	cmp	DWORD PTR [rax+56], 0
	je	SHORT $LN34@initParams
	mov	BYTE PTR tv367[rsp], 1
	jmp	SHORT $LN35@initParams
$LN34@initParams:
	mov	BYTE PTR tv367[rsp], 0
$LN35@initParams:
	movzx	eax, BYTE PTR tv367[rsp]
	mov	BYTE PTR niP$[rsp+104], al

; 411  : 	niP.layerFrequency = params[GLITCH_LAYER_FREQUENCY]->u.pd.value;

	mov	eax, 8
	imul	rax, rax, 41				; 00000029H
	mov	rcx, QWORD PTR params$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	eax, DWORD PTR [rax+56]
	mov	DWORD PTR niP$[rsp+108], eax

; 412  : 	//niP.layerSource = &params[GLITCH_LAYER_SOURCE]->u.ld;
; 413  : 	niP.layerSourcePosition = params[GLITCH_LAYER_SOURCE_POSITION]->u.pd.value;

	mov	eax, 8
	imul	rax, rax, 43				; 0000002bH
	mov	rcx, QWORD PTR params$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	eax, DWORD PTR [rax+56]
	mov	DWORD PTR niP$[rsp+112], eax

; 414  : 
; 415  : 	PF_ParamDef layer;
; 416  : 
; 417  : 	PF_CHECKOUT_PARAM(in_data,
; 418  : 		GLITCH_LAYER_SOURCE,
; 419  : 		in_data->current_time,
; 420  : 		in_data->time_step,
; 421  : 		in_data->time_scale,
; 422  : 		&layer);

	lea	rax, QWORD PTR layer$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR in_data$[rsp]
	mov	eax, DWORD PTR [rax+240]
	mov	DWORD PTR [rsp+32], eax
	mov	rax, QWORD PTR in_data$[rsp]
	mov	r9d, DWORD PTR [rax+228]
	mov	rax, QWORD PTR in_data$[rsp]
	mov	r8d, DWORD PTR [rax+224]
	mov	edx, 42					; 0000002aH
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rcx, QWORD PTR [rax+184]
	mov	rax, QWORD PTR in_data$[rsp]
	call	QWORD PTR [rax]

; 423  : 
; 424  : 	niP.layerSource = layer.u.ld;

	lea	rax, QWORD PTR niP$[rsp+116]
	lea	rcx, QWORD PTR layer$[rsp+56]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 120				; 00000078H
	rep movsb

; 425  : 
; 426  : 	return niP;

	lea	rax, QWORD PTR niP$[rsp]
	mov	rdi, QWORD PTR $T3[rsp]
	mov	rsi, rax
	mov	ecx, 236				; 000000ecH
	rep movsb
	mov	rax, QWORD PTR $T3[rsp]

; 427  : }

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 536				; 00000218H
	pop	rdi
	pop	rsi
	ret	0
?initParamsInfo@@YA?AUParamInfo@@QEAPEAUPF_ParamDef@@PEAUPF_InData@@@Z ENDP ; initParamsInfo
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\syuilo\documents\visual studio 2013\projects\after_effects_cs5_sdk_win\adobe after effects cs5 win sdk\examples\template\glitch\glitch.cpp
_TEXT	SEGMENT
_t$1 = 32
priv_err$2 = 36
priv_err$3 = 40
_t$4 = 44
priv_err$5 = 48
priv_err$6 = 52
priv_err$7 = 56
_t$8 = 60
priv_err$9 = 64
priv_err$10 = 68
priv_err$11 = 72
_t$12 = 76
priv_err$13 = 80
priv_err$14 = 84
priv_err$15 = 88
_t$16 = 92
priv_err$17 = 96
priv_err$18 = 100
priv_err$19 = 104
_t$20 = 108
priv_err$21 = 112
priv_err$22 = 116
priv_err$23 = 120
_t$24 = 124
priv_err$25 = 128
priv_err$26 = 132
priv_err$27 = 136
_t$28 = 140
priv_err$29 = 144
priv_err$30 = 148
priv_err$31 = 152
_t$32 = 156
priv_err$33 = 160
priv_err$34 = 164
priv_err$35 = 168
_t$36 = 172
priv_err$37 = 176
priv_err$38 = 180
priv_err$39 = 184
_t$40 = 188
priv_err$41 = 192
priv_err$42 = 196
priv_err$43 = 200
_t$44 = 204
priv_err$45 = 208
priv_err$46 = 212
priv_err$47 = 216
_t$48 = 220
priv_err$49 = 224
priv_err$50 = 228
_t$51 = 232
_t$52 = 236
_t$53 = 240
priv_err$54 = 244
_t$55 = 248
_t$56 = 252
_t$57 = 256
priv_err$58 = 260
_t$59 = 264
_t$60 = 268
_t$61 = 272
priv_err$62 = 276
_t$63 = 280
_t$64 = 284
_t$65 = 288
priv_err$66 = 292
_t$67 = 296
_t$68 = 300
_t$69 = 304
priv_err$70 = 308
_t$71 = 312
_t$72 = 316
_t$73 = 320
priv_err$74 = 324
_t$75 = 328
_t$76 = 332
_t$77 = 336
priv_err$78 = 340
_t$79 = 344
_t$80 = 348
_t$81 = 352
priv_err$82 = 356
_t$83 = 360
_t$84 = 364
_t$85 = 368
priv_err$86 = 372
_t$87 = 376
_t$88 = 380
_t$89 = 384
priv_err$90 = 388
_t$91 = 392
_t$92 = 396
_t$93 = 400
priv_err$94 = 404
_t$95 = 408
_t$96 = 412
_t$97 = 416
priv_err$98 = 420
tv66 = 424
_p$99 = 432
tv85 = 440
_p$100 = 448
tv194 = 456
_p$101 = 464
tv236 = 472
_p$102 = 480
tv278 = 488
_p$103 = 496
tv355 = 504
_p$104 = 512
tv397 = 520
_p$105 = 528
tv442 = 536
_p$106 = 544
tv484 = 552
_p$107 = 560
tv521 = 568
_p$108 = 576
tv591 = 584
_p$109 = 592
tv636 = 600
_p$110 = 608
tv674 = 616
_p$111 = 624
tv744 = 632
_p$112 = 640
tv782 = 648
_p$113 = 656
tv852 = 664
_p$114 = 672
tv892 = 680
_p$115 = 688
tv930 = 696
_p$116 = 704
tv975 = 712
_p$117 = 720
tv1052 = 728
_p$118 = 736
tv1085 = 744
_p$119 = 752
tv1130 = 760
_p$120 = 768
tv1168 = 776
_p$121 = 784
tv1201 = 792
_p$122 = 800
tv1246 = 808
_p$123 = 816
err$ = 824
_p$124 = 832
tv213 = 840
_p$125 = 848
tv336 = 856
_p$126 = 864
tv416 = 872
_p$127 = 880
tv507 = 888
_p$128 = 896
tv617 = 904
_p$129 = 912
tv693 = 920
_p$130 = 928
tv833 = 936
_p$131 = 944
tv911 = 952
_p$132 = 960
tv1026 = 968
_p$133 = 976
tv1104 = 984
_p$134 = 992
tv1182 = 1000
_p$135 = 1008
tv1301 = 1016
_p$136 = 1024
tv259 = 1032
_p$137 = 1040
tv461 = 1048
_p$138 = 1056
tv655 = 1064
_p$139 = 1072
tv878 = 1080
_p$140 = 1088
tv1066 = 1096
_p$141 = 1104
tv1220 = 1112
_p$142 = 1120
tv378 = 1128
_p$143 = 1136
tv763 = 1144
_p$144 = 1152
tv1149 = 1160
_p$145 = 1168
tv540 = 1176
_p$146 = 1184
tv168 = 1192
_p$147 = 1200
tv956 = 1208
def$ = 1216
__$ArrayPad$ = 1392
in_data$ = 1424
out_data$ = 1432
params$ = 1440
output$ = 1448
?ParamsSetup@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z PROC ; ParamsSetup

; 48   : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 1416				; 00000588H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 49   : 	PF_Err		err = PF_Err_NONE;

	mov	DWORD PTR err$[rsp], 0
$LN441@ParamsSetu:

; 50   : 
; 51   : 	PF_ParamDef	def;
; 52   : 
; 53   : 	// ------------------------
; 54   : 	AEFX_CLR_STRUCT(def);

	mov	DWORD PTR _t$95[rsp], 176		; 000000b0H
	lea	rax, QWORD PTR def$[rsp]
	mov	QWORD PTR _p$99[rsp], rax
$LN438@ParamsSetu:
	mov	eax, DWORD PTR _t$95[rsp]
	mov	DWORD PTR tv66[rsp], eax
	mov	eax, DWORD PTR _t$95[rsp]
	dec	eax
	mov	DWORD PTR _t$95[rsp], eax
	cmp	DWORD PTR tv66[rsp], 0
	je	SHORT $LN437@ParamsSetu
	mov	rax, QWORD PTR _p$99[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR _p$99[rsp]
	inc	rax
	mov	QWORD PTR _p$99[rsp], rax
	jmp	SHORT $LN438@ParamsSetu
$LN437@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN441@ParamsSetu

; 55   : 	def.flags = PF_ParamFlag_SUPERVISE;

	mov	DWORD PTR def$[rsp+48], 64		; 00000040H
$LN436@ParamsSetu:

; 56   : 	PF_ADD_POPUP("スキャンライン",
; 57   : 		2,
; 58   : 		1,
; 59   : 		"Random|Manual",
; 60   : 		1);

	mov	DWORD PTR priv_err$3[rsp], 0
	mov	DWORD PTR def$[rsp+12], 7
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rax, QWORD PTR [rax+176]
	lea	rdx, OFFSET FLAT:$SG117991
	lea	rcx, QWORD PTR def$[rsp+16]
	call	QWORD PTR [rax+336]
	mov	eax, 2
	mov	WORD PTR def$[rsp+60], ax
	mov	eax, 1
	mov	WORD PTR def$[rsp+62], ax
	mov	DWORD PTR def$[rsp+56], 1
	lea	rax, OFFSET FLAT:$SG117992
	mov	QWORD PTR def$[rsp+64], rax
	mov	DWORD PTR def$[rsp], 1
	lea	r8, QWORD PTR def$[rsp]
	mov	edx, -1
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rcx, QWORD PTR [rax+184]
	mov	rax, QWORD PTR in_data$[rsp]
	call	QWORD PTR [rax+16]
	mov	DWORD PTR priv_err$3[rsp], eax
	cmp	DWORD PTR priv_err$3[rsp], 0
	je	SHORT $LN433@ParamsSetu
	mov	eax, DWORD PTR priv_err$3[rsp]
	jmp	$LN442@ParamsSetu
$LN433@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	$LN436@ParamsSetu
$LN432@ParamsSetu:

; 61   : 
; 62   : 	AEFX_CLR_STRUCT(def);

	mov	DWORD PTR _t$51[rsp], 176		; 000000b0H
	lea	rax, QWORD PTR def$[rsp]
	mov	QWORD PTR _p$100[rsp], rax
$LN429@ParamsSetu:
	mov	eax, DWORD PTR _t$51[rsp]
	mov	DWORD PTR tv85[rsp], eax
	mov	eax, DWORD PTR _t$51[rsp]
	dec	eax
	mov	DWORD PTR _t$51[rsp], eax
	cmp	DWORD PTR tv85[rsp], 0
	je	SHORT $LN428@ParamsSetu
	mov	rax, QWORD PTR _p$100[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR _p$100[rsp]
	inc	rax
	mov	QWORD PTR _p$100[rsp], rax
	jmp	SHORT $LN429@ParamsSetu
$LN428@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN432@ParamsSetu
$LN427@ParamsSetu:

; 63   : 	PF_ADD_POINT("Scanline position",
; 64   : 		50,
; 65   : 		0,
; 66   : 		TRUE,
; 67   : 		2);

	mov	DWORD PTR priv_err$5[rsp], 0
	mov	DWORD PTR def$[rsp+12], 6
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rax, QWORD PTR [rax+176]
	lea	rdx, OFFSET FLAT:$SG118007
	lea	rcx, QWORD PTR def$[rsp+16]
	call	QWORD PTR [rax+336]
	mov	BYTE PTR def$[rsp+67], 1
	mov	DWORD PTR def$[rsp+68], 3276800		; 00320000H
	mov	eax, DWORD PTR def$[rsp+68]
	mov	DWORD PTR def$[rsp+56], eax
	mov	DWORD PTR def$[rsp+72], 0
	mov	eax, DWORD PTR def$[rsp+72]
	mov	DWORD PTR def$[rsp+60], eax
	mov	DWORD PTR def$[rsp], 2
	lea	r8, QWORD PTR def$[rsp]
	mov	edx, -1
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rcx, QWORD PTR [rax+184]
	mov	rax, QWORD PTR in_data$[rsp]
	call	QWORD PTR [rax+16]
	mov	DWORD PTR priv_err$5[rsp], eax
	cmp	DWORD PTR priv_err$5[rsp], 0
	je	SHORT $LN424@ParamsSetu
	mov	eax, DWORD PTR priv_err$5[rsp]
	jmp	$LN442@ParamsSetu
$LN424@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	$LN427@ParamsSetu
$LN423@ParamsSetu:

; 68   : 
; 69   : 	AEFX_CLR_STRUCT(def);

	mov	DWORD PTR _t$75[rsp], 176		; 000000b0H
	lea	rax, QWORD PTR def$[rsp]
	mov	QWORD PTR _p$101[rsp], rax
$LN420@ParamsSetu:
	mov	eax, DWORD PTR _t$75[rsp]
	mov	DWORD PTR tv168[rsp], eax
	mov	eax, DWORD PTR _t$75[rsp]
	dec	eax
	mov	DWORD PTR _t$75[rsp], eax
	cmp	DWORD PTR tv168[rsp], 0
	je	SHORT $LN419@ParamsSetu
	mov	rax, QWORD PTR _p$101[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR _p$101[rsp]
	inc	rax
	mov	QWORD PTR _p$101[rsp], rax
	jmp	SHORT $LN420@ParamsSetu
$LN419@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN423@ParamsSetu
$LN418@ParamsSetu:

; 70   : 	PF_ADD_PERCENT("Scanline height",
; 71   : 		50,
; 72   : 		3);

	mov	DWORD PTR priv_err$7[rsp], 0
	mov	DWORD PTR def$[rsp+12], 2
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rax, QWORD PTR [rax+176]
	lea	rdx, OFFSET FLAT:$SG118022
	lea	rcx, QWORD PTR def$[rsp+16]
	call	QWORD PTR [rax+336]
	mov	eax, 1
	imul	rax, rax, 0
	mov	BYTE PTR def$[rsp+rax+60], 0
	mov	eax, 1
	imul	rax, rax, 0
	mov	BYTE PTR def$[rsp+rax+92], 0
	mov	DWORD PTR def$[rsp+124], 0
	mov	DWORD PTR def$[rsp+132], 0
	mov	DWORD PTR def$[rsp+128], 6553600	; 00640000H
	mov	DWORD PTR def$[rsp+136], 6553600	; 00640000H
	mov	DWORD PTR def$[rsp+140], 3276800	; 00320000H
	mov	eax, DWORD PTR def$[rsp+140]
	mov	DWORD PTR def$[rsp+56], eax
	mov	eax, 1
	mov	WORD PTR def$[rsp+144], ax
	movsx	eax, WORD PTR def$[rsp+146]
	or	eax, 1
	mov	WORD PTR def$[rsp+146], ax
	mov	eax, DWORD PTR def$[rsp+48]
	mov	DWORD PTR def$[rsp+48], eax
	mov	DWORD PTR def$[rsp], 3
	lea	r8, QWORD PTR def$[rsp]
	mov	edx, -1
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rcx, QWORD PTR [rax+184]
	mov	rax, QWORD PTR in_data$[rsp]
	call	QWORD PTR [rax+16]
	mov	DWORD PTR priv_err$7[rsp], eax
	cmp	DWORD PTR priv_err$7[rsp], 0
	je	SHORT $LN415@ParamsSetu
	mov	eax, DWORD PTR priv_err$7[rsp]
	jmp	$LN442@ParamsSetu
$LN415@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	$LN418@ParamsSetu
$LN414@ParamsSetu:

; 73   : 
; 74   : 	AEFX_CLR_STRUCT(def);

	mov	DWORD PTR _t$53[rsp], 176		; 000000b0H
	lea	rax, QWORD PTR def$[rsp]
	mov	QWORD PTR _p$102[rsp], rax
$LN411@ParamsSetu:
	mov	eax, DWORD PTR _t$53[rsp]
	mov	DWORD PTR tv194[rsp], eax
	mov	eax, DWORD PTR _t$53[rsp]
	dec	eax
	mov	DWORD PTR _t$53[rsp], eax
	cmp	DWORD PTR tv194[rsp], 0
	je	SHORT $LN410@ParamsSetu
	mov	rax, QWORD PTR _p$102[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR _p$102[rsp]
	inc	rax
	mov	QWORD PTR _p$102[rsp], rax
	jmp	SHORT $LN411@ParamsSetu
$LN410@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN414@ParamsSetu
$LN409@ParamsSetu:

; 75   : 	PF_ADD_CHECKBOX("高さのばらつき",
; 76   : 		"ON",
; 77   : 		TRUE,
; 78   : 		0,
; 79   : 		4);

	mov	DWORD PTR priv_err$9[rsp], 0
	mov	DWORD PTR def$[rsp+12], 4
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rax, QWORD PTR [rax+176]
	lea	rdx, OFFSET FLAT:$SG118044
	lea	rcx, QWORD PTR def$[rsp+16]
	call	QWORD PTR [rax+336]
	lea	rax, OFFSET FLAT:$SG118045
	mov	QWORD PTR def$[rsp+64], rax
	mov	DWORD PTR def$[rsp+56], 1
	mov	BYTE PTR def$[rsp+60], 1
	mov	eax, DWORD PTR def$[rsp+48]
	mov	DWORD PTR def$[rsp+48], eax
	mov	DWORD PTR def$[rsp], 4
	lea	r8, QWORD PTR def$[rsp]
	mov	edx, -1
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rcx, QWORD PTR [rax+184]
	mov	rax, QWORD PTR in_data$[rsp]
	call	QWORD PTR [rax+16]
	mov	DWORD PTR priv_err$9[rsp], eax
	cmp	DWORD PTR priv_err$9[rsp], 0
	je	SHORT $LN406@ParamsSetu
	mov	eax, DWORD PTR priv_err$9[rsp]
	jmp	$LN442@ParamsSetu
$LN406@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	$LN409@ParamsSetu
$LN405@ParamsSetu:

; 80   : 
; 81   : 	AEFX_CLR_STRUCT(def);

	mov	DWORD PTR _t$87[rsp], 176		; 000000b0H
	lea	rax, QWORD PTR def$[rsp]
	mov	QWORD PTR _p$103[rsp], rax
$LN402@ParamsSetu:
	mov	eax, DWORD PTR _t$87[rsp]
	mov	DWORD PTR tv213[rsp], eax
	mov	eax, DWORD PTR _t$87[rsp]
	dec	eax
	mov	DWORD PTR _t$87[rsp], eax
	cmp	DWORD PTR tv213[rsp], 0
	je	SHORT $LN401@ParamsSetu
	mov	rax, QWORD PTR _p$103[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR _p$103[rsp]
	inc	rax
	mov	QWORD PTR _p$103[rsp], rax
	jmp	SHORT $LN402@ParamsSetu
$LN401@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN405@ParamsSetu
$LN400@ParamsSetu:

; 82   : 	PF_ADD_SLIDER("ルート",
; 83   : 		1,
; 84   : 		32,
; 85   : 		1,
; 86   : 		8,
; 87   : 		3,
; 88   : 		5);

	mov	DWORD PTR priv_err$11[rsp], 0
	mov	DWORD PTR def$[rsp+12], 1
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rax, QWORD PTR [rax+176]
	lea	rdx, OFFSET FLAT:$SG118060
	lea	rcx, QWORD PTR def$[rsp+16]
	call	QWORD PTR [rax+336]
	mov	eax, 1
	imul	rax, rax, 0
	mov	BYTE PTR def$[rsp+rax+60], 0
	mov	eax, 1
	imul	rax, rax, 0
	mov	BYTE PTR def$[rsp+rax+92], 0
	mov	DWORD PTR def$[rsp+124], 1
	mov	DWORD PTR def$[rsp+132], 1
	mov	DWORD PTR def$[rsp+128], 32		; 00000020H
	mov	DWORD PTR def$[rsp+136], 8
	mov	DWORD PTR def$[rsp+140], 3
	mov	eax, DWORD PTR def$[rsp+140]
	mov	DWORD PTR def$[rsp+56], eax
	mov	DWORD PTR def$[rsp], 5
	lea	r8, QWORD PTR def$[rsp]
	mov	edx, -1
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rcx, QWORD PTR [rax+184]
	mov	rax, QWORD PTR in_data$[rsp]
	call	QWORD PTR [rax+16]
	mov	DWORD PTR priv_err$11[rsp], eax
	cmp	DWORD PTR priv_err$11[rsp], 0
	je	SHORT $LN397@ParamsSetu
	mov	eax, DWORD PTR priv_err$11[rsp]
	jmp	$LN442@ParamsSetu
$LN397@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	$LN400@ParamsSetu
$LN396@ParamsSetu:

; 89   : 
; 90   : 	AEFX_CLR_STRUCT(def);

	mov	DWORD PTR _t$55[rsp], 176		; 000000b0H
	lea	rax, QWORD PTR def$[rsp]
	mov	QWORD PTR _p$104[rsp], rax
$LN393@ParamsSetu:
	mov	eax, DWORD PTR _t$55[rsp]
	mov	DWORD PTR tv236[rsp], eax
	mov	eax, DWORD PTR _t$55[rsp]
	dec	eax
	mov	DWORD PTR _t$55[rsp], eax
	cmp	DWORD PTR tv236[rsp], 0
	je	SHORT $LN392@ParamsSetu
	mov	rax, QWORD PTR _p$104[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR _p$104[rsp]
	inc	rax
	mov	QWORD PTR _p$104[rsp], rax
	jmp	SHORT $LN393@ParamsSetu
$LN392@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN396@ParamsSetu
$LN391@ParamsSetu:

; 91   : 	PF_ADD_SLIDER("再帰",
; 92   : 		1,
; 93   : 		32,
; 94   : 		1,
; 95   : 		8,
; 96   : 		3,
; 97   : 		6);

	mov	DWORD PTR priv_err$13[rsp], 0
	mov	DWORD PTR def$[rsp+12], 1
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rax, QWORD PTR [rax+176]
	lea	rdx, OFFSET FLAT:$SG118075
	lea	rcx, QWORD PTR def$[rsp+16]
	call	QWORD PTR [rax+336]
	mov	eax, 1
	imul	rax, rax, 0
	mov	BYTE PTR def$[rsp+rax+60], 0
	mov	eax, 1
	imul	rax, rax, 0
	mov	BYTE PTR def$[rsp+rax+92], 0
	mov	DWORD PTR def$[rsp+124], 1
	mov	DWORD PTR def$[rsp+132], 1
	mov	DWORD PTR def$[rsp+128], 32		; 00000020H
	mov	DWORD PTR def$[rsp+136], 8
	mov	DWORD PTR def$[rsp+140], 3
	mov	eax, DWORD PTR def$[rsp+140]
	mov	DWORD PTR def$[rsp+56], eax
	mov	DWORD PTR def$[rsp], 6
	lea	r8, QWORD PTR def$[rsp]
	mov	edx, -1
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rcx, QWORD PTR [rax+184]
	mov	rax, QWORD PTR in_data$[rsp]
	call	QWORD PTR [rax+16]
	mov	DWORD PTR priv_err$13[rsp], eax
	cmp	DWORD PTR priv_err$13[rsp], 0
	je	SHORT $LN388@ParamsSetu
	mov	eax, DWORD PTR priv_err$13[rsp]
	jmp	$LN442@ParamsSetu
$LN388@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	$LN391@ParamsSetu
$LN387@ParamsSetu:

; 98   : 
; 99   : 	AEFX_CLR_STRUCT(def);

	mov	DWORD PTR _t$77[rsp], 176		; 000000b0H
	lea	rax, QWORD PTR def$[rsp]
	mov	QWORD PTR _p$105[rsp], rax
$LN384@ParamsSetu:
	mov	eax, DWORD PTR _t$77[rsp]
	mov	DWORD PTR tv259[rsp], eax
	mov	eax, DWORD PTR _t$77[rsp]
	dec	eax
	mov	DWORD PTR _t$77[rsp], eax
	cmp	DWORD PTR tv259[rsp], 0
	je	SHORT $LN383@ParamsSetu
	mov	rax, QWORD PTR _p$105[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR _p$105[rsp]
	inc	rax
	mov	QWORD PTR _p$105[rsp], rax
	jmp	SHORT $LN384@ParamsSetu
$LN383@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN387@ParamsSetu
$LN382@ParamsSetu:

; 100  : 	PF_ADD_CHECKBOX("合成",
; 101  : 		"ON",
; 102  : 		TRUE,
; 103  : 		0,
; 104  : 		7);

	mov	DWORD PTR priv_err$15[rsp], 0
	mov	DWORD PTR def$[rsp+12], 4
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rax, QWORD PTR [rax+176]
	lea	rdx, OFFSET FLAT:$SG118090
	lea	rcx, QWORD PTR def$[rsp+16]
	call	QWORD PTR [rax+336]
	lea	rax, OFFSET FLAT:$SG118091
	mov	QWORD PTR def$[rsp+64], rax
	mov	DWORD PTR def$[rsp+56], 1
	mov	BYTE PTR def$[rsp+60], 1
	mov	eax, DWORD PTR def$[rsp+48]
	mov	DWORD PTR def$[rsp+48], eax
	mov	DWORD PTR def$[rsp], 7
	lea	r8, QWORD PTR def$[rsp]
	mov	edx, -1
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rcx, QWORD PTR [rax+184]
	mov	rax, QWORD PTR in_data$[rsp]
	call	QWORD PTR [rax+16]
	mov	DWORD PTR priv_err$15[rsp], eax
	cmp	DWORD PTR priv_err$15[rsp], 0
	je	SHORT $LN379@ParamsSetu
	mov	eax, DWORD PTR priv_err$15[rsp]
	jmp	$LN442@ParamsSetu
$LN379@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	$LN382@ParamsSetu
$LN378@ParamsSetu:

; 105  : 
; 106  : 	AEFX_CLR_STRUCT(def);

	mov	DWORD PTR _t$57[rsp], 176		; 000000b0H
	lea	rax, QWORD PTR def$[rsp]
	mov	QWORD PTR _p$106[rsp], rax
$LN375@ParamsSetu:
	mov	eax, DWORD PTR _t$57[rsp]
	mov	DWORD PTR tv278[rsp], eax
	mov	eax, DWORD PTR _t$57[rsp]
	dec	eax
	mov	DWORD PTR _t$57[rsp], eax
	cmp	DWORD PTR tv278[rsp], 0
	je	SHORT $LN374@ParamsSetu
	mov	rax, QWORD PTR _p$106[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR _p$106[rsp]
	inc	rax
	mov	QWORD PTR _p$106[rsp], rax
	jmp	SHORT $LN375@ParamsSetu
$LN374@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN378@ParamsSetu
$LN373@ParamsSetu:

; 107  : 	PF_ADD_PERCENT("Glitch blend",
; 108  : 		0,
; 109  : 		8);

	mov	DWORD PTR priv_err$17[rsp], 0
	mov	DWORD PTR def$[rsp+12], 2
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rax, QWORD PTR [rax+176]
	lea	rdx, OFFSET FLAT:$SG118106
	lea	rcx, QWORD PTR def$[rsp+16]
	call	QWORD PTR [rax+336]
	mov	eax, 1
	imul	rax, rax, 0
	mov	BYTE PTR def$[rsp+rax+60], 0
	mov	eax, 1
	imul	rax, rax, 0
	mov	BYTE PTR def$[rsp+rax+92], 0
	mov	DWORD PTR def$[rsp+124], 0
	mov	DWORD PTR def$[rsp+132], 0
	mov	DWORD PTR def$[rsp+128], 6553600	; 00640000H
	mov	DWORD PTR def$[rsp+136], 6553600	; 00640000H
	mov	DWORD PTR def$[rsp+140], 0
	mov	eax, DWORD PTR def$[rsp+140]
	mov	DWORD PTR def$[rsp+56], eax
	mov	eax, 1
	mov	WORD PTR def$[rsp+144], ax
	movsx	eax, WORD PTR def$[rsp+146]
	or	eax, 1
	mov	WORD PTR def$[rsp+146], ax
	mov	eax, DWORD PTR def$[rsp+48]
	mov	DWORD PTR def$[rsp+48], eax
	mov	DWORD PTR def$[rsp], 8
	lea	r8, QWORD PTR def$[rsp]
	mov	edx, -1
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rcx, QWORD PTR [rax+184]
	mov	rax, QWORD PTR in_data$[rsp]
	call	QWORD PTR [rax+16]
	mov	DWORD PTR priv_err$17[rsp], eax
	cmp	DWORD PTR priv_err$17[rsp], 0
	je	SHORT $LN370@ParamsSetu
	mov	eax, DWORD PTR priv_err$17[rsp]
	jmp	$LN442@ParamsSetu
$LN370@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	$LN373@ParamsSetu
$LN369@ParamsSetu:

; 110  : 
; 111  : 	AEFX_CLR_STRUCT(def);

	mov	DWORD PTR _t$93[rsp], 176		; 000000b0H
	lea	rax, QWORD PTR def$[rsp]
	mov	QWORD PTR _p$107[rsp], rax
$LN366@ParamsSetu:
	mov	eax, DWORD PTR _t$93[rsp]
	mov	DWORD PTR tv336[rsp], eax
	mov	eax, DWORD PTR _t$93[rsp]
	dec	eax
	mov	DWORD PTR _t$93[rsp], eax
	cmp	DWORD PTR tv336[rsp], 0
	je	SHORT $LN365@ParamsSetu
	mov	rax, QWORD PTR _p$107[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR _p$107[rsp]
	inc	rax
	mov	QWORD PTR _p$107[rsp], rax
	jmp	SHORT $LN366@ParamsSetu
$LN365@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN369@ParamsSetu

; 112  : 	def.flags = PF_ParamFlag_SUPERVISE;

	mov	DWORD PTR def$[rsp+48], 64		; 00000040H
$LN364@ParamsSetu:

; 113  : 	PF_ADD_POPUP("Seed control",
; 114  : 		2,
; 115  : 		1,
; 116  : 		"Automatic|Manual",
; 117  : 		9);

	mov	DWORD PTR priv_err$19[rsp], 0
	mov	DWORD PTR def$[rsp+12], 7
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rax, QWORD PTR [rax+176]
	lea	rdx, OFFSET FLAT:$SG118128
	lea	rcx, QWORD PTR def$[rsp+16]
	call	QWORD PTR [rax+336]
	mov	eax, 2
	mov	WORD PTR def$[rsp+60], ax
	mov	eax, 1
	mov	WORD PTR def$[rsp+62], ax
	mov	DWORD PTR def$[rsp+56], 1
	lea	rax, OFFSET FLAT:$SG118129
	mov	QWORD PTR def$[rsp+64], rax
	mov	DWORD PTR def$[rsp], 9
	lea	r8, QWORD PTR def$[rsp]
	mov	edx, -1
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rcx, QWORD PTR [rax+184]
	mov	rax, QWORD PTR in_data$[rsp]
	call	QWORD PTR [rax+16]
	mov	DWORD PTR priv_err$19[rsp], eax
	cmp	DWORD PTR priv_err$19[rsp], 0
	je	SHORT $LN361@ParamsSetu
	mov	eax, DWORD PTR priv_err$19[rsp]
	jmp	$LN442@ParamsSetu
$LN361@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	$LN364@ParamsSetu
$LN360@ParamsSetu:

; 118  : 
; 119  : 	AEFX_CLR_STRUCT(def);

	mov	DWORD PTR _t$59[rsp], 176		; 000000b0H
	lea	rax, QWORD PTR def$[rsp]
	mov	QWORD PTR _p$108[rsp], rax
$LN357@ParamsSetu:
	mov	eax, DWORD PTR _t$59[rsp]
	mov	DWORD PTR tv355[rsp], eax
	mov	eax, DWORD PTR _t$59[rsp]
	dec	eax
	mov	DWORD PTR _t$59[rsp], eax
	cmp	DWORD PTR tv355[rsp], 0
	je	SHORT $LN356@ParamsSetu
	mov	rax, QWORD PTR _p$108[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR _p$108[rsp]
	inc	rax
	mov	QWORD PTR _p$108[rsp], rax
	jmp	SHORT $LN357@ParamsSetu
$LN356@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN360@ParamsSetu
$LN355@ParamsSetu:

; 120  : 	PF_ADD_SLIDER("Random seed",
; 121  : 		0,
; 122  : 		32768,
; 123  : 		0,
; 124  : 		1024,
; 125  : 		0,
; 126  : 		10);

	mov	DWORD PTR priv_err$21[rsp], 0
	mov	DWORD PTR def$[rsp+12], 1
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rax, QWORD PTR [rax+176]
	lea	rdx, OFFSET FLAT:$SG118144
	lea	rcx, QWORD PTR def$[rsp+16]
	call	QWORD PTR [rax+336]
	mov	eax, 1
	imul	rax, rax, 0
	mov	BYTE PTR def$[rsp+rax+60], 0
	mov	eax, 1
	imul	rax, rax, 0
	mov	BYTE PTR def$[rsp+rax+92], 0
	mov	DWORD PTR def$[rsp+124], 0
	mov	DWORD PTR def$[rsp+132], 0
	mov	DWORD PTR def$[rsp+128], 32768		; 00008000H
	mov	DWORD PTR def$[rsp+136], 1024		; 00000400H
	mov	DWORD PTR def$[rsp+140], 0
	mov	eax, DWORD PTR def$[rsp+140]
	mov	DWORD PTR def$[rsp+56], eax
	mov	DWORD PTR def$[rsp], 10
	lea	r8, QWORD PTR def$[rsp]
	mov	edx, -1
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rcx, QWORD PTR [rax+184]
	mov	rax, QWORD PTR in_data$[rsp]
	call	QWORD PTR [rax+16]
	mov	DWORD PTR priv_err$21[rsp], eax
	cmp	DWORD PTR priv_err$21[rsp], 0
	je	SHORT $LN352@ParamsSetu
	mov	eax, DWORD PTR priv_err$21[rsp]
	jmp	$LN442@ParamsSetu
$LN352@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	$LN355@ParamsSetu
$LN351@ParamsSetu:

; 127  : 
; 128  : 	AEFX_CLR_STRUCT(def);

	mov	DWORD PTR _t$79[rsp], 176		; 000000b0H
	lea	rax, QWORD PTR def$[rsp]
	mov	QWORD PTR _p$109[rsp], rax
$LN348@ParamsSetu:
	mov	eax, DWORD PTR _t$79[rsp]
	mov	DWORD PTR tv378[rsp], eax
	mov	eax, DWORD PTR _t$79[rsp]
	dec	eax
	mov	DWORD PTR _t$79[rsp], eax
	cmp	DWORD PTR tv378[rsp], 0
	je	SHORT $LN347@ParamsSetu
	mov	rax, QWORD PTR _p$109[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR _p$109[rsp]
	inc	rax
	mov	QWORD PTR _p$109[rsp], rax
	jmp	SHORT $LN348@ParamsSetu
$LN347@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN351@ParamsSetu
$LN346@ParamsSetu:

; 129  : 	PF_ADD_TOPIC("カラーシフタ",
; 130  : 		11);

	mov	DWORD PTR priv_err$23[rsp], 0
	mov	DWORD PTR def$[rsp+12], 13
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rax, QWORD PTR [rax+176]
	lea	rdx, OFFSET FLAT:$SG118159
	lea	rcx, QWORD PTR def$[rsp+16]
	call	QWORD PTR [rax+336]
	mov	DWORD PTR def$[rsp], 11
	lea	r8, QWORD PTR def$[rsp]
	mov	edx, -1
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rcx, QWORD PTR [rax+184]
	mov	rax, QWORD PTR in_data$[rsp]
	call	QWORD PTR [rax+16]
	mov	DWORD PTR priv_err$23[rsp], eax
	cmp	DWORD PTR priv_err$23[rsp], 0
	je	SHORT $LN343@ParamsSetu
	mov	eax, DWORD PTR priv_err$23[rsp]
	jmp	$LN442@ParamsSetu
$LN343@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	$LN346@ParamsSetu
$LN342@ParamsSetu:

; 131  : 
; 132  : 	AEFX_CLR_STRUCT(def);

	mov	DWORD PTR _t$61[rsp], 176		; 000000b0H
	lea	rax, QWORD PTR def$[rsp]
	mov	QWORD PTR _p$110[rsp], rax
$LN339@ParamsSetu:
	mov	eax, DWORD PTR _t$61[rsp]
	mov	DWORD PTR tv397[rsp], eax
	mov	eax, DWORD PTR _t$61[rsp]
	dec	eax
	mov	DWORD PTR _t$61[rsp], eax
	cmp	DWORD PTR tv397[rsp], 0
	je	SHORT $LN338@ParamsSetu
	mov	rax, QWORD PTR _p$110[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR _p$110[rsp]
	inc	rax
	mov	QWORD PTR _p$110[rsp], rax
	jmp	SHORT $LN339@ParamsSetu
$LN338@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN342@ParamsSetu

; 133  : 	def.flags = PF_ParamFlag_SUPERVISE;

	mov	DWORD PTR def$[rsp+48], 64		; 00000040H
$LN337@ParamsSetu:

; 134  : 	PF_ADD_CHECKBOX("カラーシフタを使用",
; 135  : 		"Enabled",
; 136  : 		TRUE,
; 137  : 		0,
; 138  : 		12);

	mov	DWORD PTR priv_err$25[rsp], 0
	mov	DWORD PTR def$[rsp+12], 4
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rax, QWORD PTR [rax+176]
	lea	rdx, OFFSET FLAT:$SG118174
	lea	rcx, QWORD PTR def$[rsp+16]
	call	QWORD PTR [rax+336]
	lea	rax, OFFSET FLAT:$SG118175
	mov	QWORD PTR def$[rsp+64], rax
	mov	DWORD PTR def$[rsp+56], 1
	mov	BYTE PTR def$[rsp+60], 1
	mov	eax, DWORD PTR def$[rsp+48]
	mov	DWORD PTR def$[rsp+48], eax
	mov	DWORD PTR def$[rsp], 12
	lea	r8, QWORD PTR def$[rsp]
	mov	edx, -1
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rcx, QWORD PTR [rax+184]
	mov	rax, QWORD PTR in_data$[rsp]
	call	QWORD PTR [rax+16]
	mov	DWORD PTR priv_err$25[rsp], eax
	cmp	DWORD PTR priv_err$25[rsp], 0
	je	SHORT $LN334@ParamsSetu
	mov	eax, DWORD PTR priv_err$25[rsp]
	jmp	$LN442@ParamsSetu
$LN334@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	$LN337@ParamsSetu
$LN333@ParamsSetu:

; 139  : 
; 140  : 	AEFX_CLR_STRUCT(def);

	mov	DWORD PTR _t$89[rsp], 176		; 000000b0H
	lea	rax, QWORD PTR def$[rsp]
	mov	QWORD PTR _p$111[rsp], rax
$LN330@ParamsSetu:
	mov	eax, DWORD PTR _t$89[rsp]
	mov	DWORD PTR tv416[rsp], eax
	mov	eax, DWORD PTR _t$89[rsp]
	dec	eax
	mov	DWORD PTR _t$89[rsp], eax
	cmp	DWORD PTR tv416[rsp], 0
	je	SHORT $LN329@ParamsSetu
	mov	rax, QWORD PTR _p$111[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR _p$111[rsp]
	inc	rax
	mov	QWORD PTR _p$111[rsp], rax
	jmp	SHORT $LN330@ParamsSetu
$LN329@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN333@ParamsSetu
$LN328@ParamsSetu:

; 141  : 	PF_ADD_PERCENT("Frequency",
; 142  : 		40,
; 143  : 		13);

	mov	DWORD PTR priv_err$27[rsp], 0
	mov	DWORD PTR def$[rsp+12], 2
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rax, QWORD PTR [rax+176]
	lea	rdx, OFFSET FLAT:$SG118190
	lea	rcx, QWORD PTR def$[rsp+16]
	call	QWORD PTR [rax+336]
	mov	eax, 1
	imul	rax, rax, 0
	mov	BYTE PTR def$[rsp+rax+60], 0
	mov	eax, 1
	imul	rax, rax, 0
	mov	BYTE PTR def$[rsp+rax+92], 0
	mov	DWORD PTR def$[rsp+124], 0
	mov	DWORD PTR def$[rsp+132], 0
	mov	DWORD PTR def$[rsp+128], 6553600	; 00640000H
	mov	DWORD PTR def$[rsp+136], 6553600	; 00640000H
	mov	DWORD PTR def$[rsp+140], 2621440	; 00280000H
	mov	eax, DWORD PTR def$[rsp+140]
	mov	DWORD PTR def$[rsp+56], eax
	mov	eax, 1
	mov	WORD PTR def$[rsp+144], ax
	movsx	eax, WORD PTR def$[rsp+146]
	or	eax, 1
	mov	WORD PTR def$[rsp+146], ax
	mov	eax, DWORD PTR def$[rsp+48]
	mov	DWORD PTR def$[rsp+48], eax
	mov	DWORD PTR def$[rsp], 13
	lea	r8, QWORD PTR def$[rsp]
	mov	edx, -1
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rcx, QWORD PTR [rax+184]
	mov	rax, QWORD PTR in_data$[rsp]
	call	QWORD PTR [rax+16]
	mov	DWORD PTR priv_err$27[rsp], eax
	cmp	DWORD PTR priv_err$27[rsp], 0
	je	SHORT $LN325@ParamsSetu
	mov	eax, DWORD PTR priv_err$27[rsp]
	jmp	$LN442@ParamsSetu
$LN325@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	$LN328@ParamsSetu
$LN324@ParamsSetu:

; 144  : 
; 145  : 	AEFX_CLR_STRUCT(def);

	mov	DWORD PTR _t$63[rsp], 176		; 000000b0H
	lea	rax, QWORD PTR def$[rsp]
	mov	QWORD PTR _p$112[rsp], rax
$LN321@ParamsSetu:
	mov	eax, DWORD PTR _t$63[rsp]
	mov	DWORD PTR tv442[rsp], eax
	mov	eax, DWORD PTR _t$63[rsp]
	dec	eax
	mov	DWORD PTR _t$63[rsp], eax
	cmp	DWORD PTR tv442[rsp], 0
	je	SHORT $LN320@ParamsSetu
	mov	rax, QWORD PTR _p$112[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR _p$112[rsp]
	inc	rax
	mov	QWORD PTR _p$112[rsp], rax
	jmp	SHORT $LN321@ParamsSetu
$LN320@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN324@ParamsSetu
$LN319@ParamsSetu:

; 146  : 	PF_ADD_POPUP("Type",
; 147  : 		4,
; 148  : 		4,
; 149  : 		"R - G, B (Rを中心にして、GとBに分離します)|G - R, B (Gを中心にして、RとBに分離します)|B - R, G (Bを中心にして、RとGに分離します)|Random",
; 150  : 		14);

	mov	DWORD PTR priv_err$29[rsp], 0
	mov	DWORD PTR def$[rsp+12], 7
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rax, QWORD PTR [rax+176]
	lea	rdx, OFFSET FLAT:$SG118212
	lea	rcx, QWORD PTR def$[rsp+16]
	call	QWORD PTR [rax+336]
	mov	eax, 4
	mov	WORD PTR def$[rsp+60], ax
	mov	eax, 4
	mov	WORD PTR def$[rsp+62], ax
	mov	DWORD PTR def$[rsp+56], 4
	lea	rax, OFFSET FLAT:$SG118213
	mov	QWORD PTR def$[rsp+64], rax
	mov	DWORD PTR def$[rsp], 14
	lea	r8, QWORD PTR def$[rsp]
	mov	edx, -1
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rcx, QWORD PTR [rax+184]
	mov	rax, QWORD PTR in_data$[rsp]
	call	QWORD PTR [rax+16]
	mov	DWORD PTR priv_err$29[rsp], eax
	cmp	DWORD PTR priv_err$29[rsp], 0
	je	SHORT $LN316@ParamsSetu
	mov	eax, DWORD PTR priv_err$29[rsp]
	jmp	$LN442@ParamsSetu
$LN316@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	$LN319@ParamsSetu
$LN315@ParamsSetu:

; 151  : 
; 152  : 
; 153  : 	AEFX_CLR_STRUCT(def);

	mov	DWORD PTR _t$81[rsp], 176		; 000000b0H
	lea	rax, QWORD PTR def$[rsp]
	mov	QWORD PTR _p$113[rsp], rax
$LN312@ParamsSetu:
	mov	eax, DWORD PTR _t$81[rsp]
	mov	DWORD PTR tv461[rsp], eax
	mov	eax, DWORD PTR _t$81[rsp]
	dec	eax
	mov	DWORD PTR _t$81[rsp], eax
	cmp	DWORD PTR tv461[rsp], 0
	je	SHORT $LN311@ParamsSetu
	mov	rax, QWORD PTR _p$113[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR _p$113[rsp]
	inc	rax
	mov	QWORD PTR _p$113[rsp], rax
	jmp	SHORT $LN312@ParamsSetu
$LN311@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN315@ParamsSetu
$LN310@ParamsSetu:

; 154  : 	PF_ADD_SLIDER("Threshold (しきい値)",
; 155  : 		0,
; 156  : 		255,
; 157  : 		0,
; 158  : 		255,
; 159  : 		0,
; 160  : 		15);

	mov	DWORD PTR priv_err$31[rsp], 0
	mov	DWORD PTR def$[rsp+12], 1
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rax, QWORD PTR [rax+176]
	lea	rdx, OFFSET FLAT:$SG118228
	lea	rcx, QWORD PTR def$[rsp+16]
	call	QWORD PTR [rax+336]
	mov	eax, 1
	imul	rax, rax, 0
	mov	BYTE PTR def$[rsp+rax+60], 0
	mov	eax, 1
	imul	rax, rax, 0
	mov	BYTE PTR def$[rsp+rax+92], 0
	mov	DWORD PTR def$[rsp+124], 0
	mov	DWORD PTR def$[rsp+132], 0
	mov	DWORD PTR def$[rsp+128], 255		; 000000ffH
	mov	DWORD PTR def$[rsp+136], 255		; 000000ffH
	mov	DWORD PTR def$[rsp+140], 0
	mov	eax, DWORD PTR def$[rsp+140]
	mov	DWORD PTR def$[rsp+56], eax
	mov	DWORD PTR def$[rsp], 15
	lea	r8, QWORD PTR def$[rsp]
	mov	edx, -1
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rcx, QWORD PTR [rax+184]
	mov	rax, QWORD PTR in_data$[rsp]
	call	QWORD PTR [rax+16]
	mov	DWORD PTR priv_err$31[rsp], eax
	cmp	DWORD PTR priv_err$31[rsp], 0
	je	SHORT $LN307@ParamsSetu
	mov	eax, DWORD PTR priv_err$31[rsp]
	jmp	$LN442@ParamsSetu
$LN307@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	$LN310@ParamsSetu
$LN306@ParamsSetu:

; 161  : 
; 162  : 	AEFX_CLR_STRUCT(def);

	mov	DWORD PTR _t$65[rsp], 176		; 000000b0H
	lea	rax, QWORD PTR def$[rsp]
	mov	QWORD PTR _p$114[rsp], rax
$LN303@ParamsSetu:
	mov	eax, DWORD PTR _t$65[rsp]
	mov	DWORD PTR tv484[rsp], eax
	mov	eax, DWORD PTR _t$65[rsp]
	dec	eax
	mov	DWORD PTR _t$65[rsp], eax
	cmp	DWORD PTR tv484[rsp], 0
	je	SHORT $LN302@ParamsSetu
	mov	rax, QWORD PTR _p$114[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR _p$114[rsp]
	inc	rax
	mov	QWORD PTR _p$114[rsp], rax
	jmp	SHORT $LN303@ParamsSetu
$LN302@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN306@ParamsSetu
$LN301@ParamsSetu:

; 163  : 	PF_ADD_SLIDER("Amount",
; 164  : 		2,
; 165  : 		64,
; 166  : 		2,
; 167  : 		32,
; 168  : 		8,
; 169  : 		16);

	mov	DWORD PTR priv_err$33[rsp], 0
	mov	DWORD PTR def$[rsp+12], 1
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rax, QWORD PTR [rax+176]
	lea	rdx, OFFSET FLAT:$SG118243
	lea	rcx, QWORD PTR def$[rsp+16]
	call	QWORD PTR [rax+336]
	mov	eax, 1
	imul	rax, rax, 0
	mov	BYTE PTR def$[rsp+rax+60], 0
	mov	eax, 1
	imul	rax, rax, 0
	mov	BYTE PTR def$[rsp+rax+92], 0
	mov	DWORD PTR def$[rsp+124], 2
	mov	DWORD PTR def$[rsp+132], 2
	mov	DWORD PTR def$[rsp+128], 64		; 00000040H
	mov	DWORD PTR def$[rsp+136], 32		; 00000020H
	mov	DWORD PTR def$[rsp+140], 8
	mov	eax, DWORD PTR def$[rsp+140]
	mov	DWORD PTR def$[rsp+56], eax
	mov	DWORD PTR def$[rsp], 16
	lea	r8, QWORD PTR def$[rsp]
	mov	edx, -1
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rcx, QWORD PTR [rax+184]
	mov	rax, QWORD PTR in_data$[rsp]
	call	QWORD PTR [rax+16]
	mov	DWORD PTR priv_err$33[rsp], eax
	cmp	DWORD PTR priv_err$33[rsp], 0
	je	SHORT $LN298@ParamsSetu
	mov	eax, DWORD PTR priv_err$33[rsp]
	jmp	$LN442@ParamsSetu
$LN298@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	$LN301@ParamsSetu
$LN297@ParamsSetu:

; 170  : 
; 171  : 	AEFX_CLR_STRUCT(def);

	mov	DWORD PTR _t$97[rsp], 176		; 000000b0H
	lea	rax, QWORD PTR def$[rsp]
	mov	QWORD PTR _p$115[rsp], rax
$LN294@ParamsSetu:
	mov	eax, DWORD PTR _t$97[rsp]
	mov	DWORD PTR tv507[rsp], eax
	mov	eax, DWORD PTR _t$97[rsp]
	dec	eax
	mov	DWORD PTR _t$97[rsp], eax
	cmp	DWORD PTR tv507[rsp], 0
	je	SHORT $LN293@ParamsSetu
	mov	rax, QWORD PTR _p$115[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR _p$115[rsp]
	inc	rax
	mov	QWORD PTR _p$115[rsp], rax
	jmp	SHORT $LN294@ParamsSetu
$LN293@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN297@ParamsSetu
$LN292@ParamsSetu:

; 172  : 	PF_END_TOPIC(17);

	mov	DWORD PTR priv_err$35[rsp], 0
	mov	DWORD PTR def$[rsp+12], 14
	mov	DWORD PTR def$[rsp], 17
	lea	r8, QWORD PTR def$[rsp]
	mov	edx, -1
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rcx, QWORD PTR [rax+184]
	mov	rax, QWORD PTR in_data$[rsp]
	call	QWORD PTR [rax+16]
	mov	DWORD PTR priv_err$35[rsp], eax
	cmp	DWORD PTR priv_err$35[rsp], 0
	je	SHORT $LN289@ParamsSetu
	mov	eax, DWORD PTR priv_err$35[rsp]
	jmp	$LN442@ParamsSetu
$LN289@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN292@ParamsSetu
$LN288@ParamsSetu:

; 173  : 
; 174  : 	AEFX_CLR_STRUCT(def);

	mov	DWORD PTR _t$67[rsp], 176		; 000000b0H
	lea	rax, QWORD PTR def$[rsp]
	mov	QWORD PTR _p$116[rsp], rax
$LN285@ParamsSetu:
	mov	eax, DWORD PTR _t$67[rsp]
	mov	DWORD PTR tv521[rsp], eax
	mov	eax, DWORD PTR _t$67[rsp]
	dec	eax
	mov	DWORD PTR _t$67[rsp], eax
	cmp	DWORD PTR tv521[rsp], 0
	je	SHORT $LN284@ParamsSetu
	mov	rax, QWORD PTR _p$116[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR _p$116[rsp]
	inc	rax
	mov	QWORD PTR _p$116[rsp], rax
	jmp	SHORT $LN285@ParamsSetu
$LN284@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN288@ParamsSetu
$LN283@ParamsSetu:

; 175  : 	PF_ADD_TOPIC("カラーミキサ",
; 176  : 		18);

	mov	DWORD PTR priv_err$37[rsp], 0
	mov	DWORD PTR def$[rsp+12], 13
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rax, QWORD PTR [rax+176]
	lea	rdx, OFFSET FLAT:$SG118272
	lea	rcx, QWORD PTR def$[rsp+16]
	call	QWORD PTR [rax+336]
	mov	DWORD PTR def$[rsp], 18
	lea	r8, QWORD PTR def$[rsp]
	mov	edx, -1
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rcx, QWORD PTR [rax+184]
	mov	rax, QWORD PTR in_data$[rsp]
	call	QWORD PTR [rax+16]
	mov	DWORD PTR priv_err$37[rsp], eax
	cmp	DWORD PTR priv_err$37[rsp], 0
	je	SHORT $LN280@ParamsSetu
	mov	eax, DWORD PTR priv_err$37[rsp]
	jmp	$LN442@ParamsSetu
$LN280@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	$LN283@ParamsSetu
$LN279@ParamsSetu:

; 177  : 
; 178  : 	AEFX_CLR_STRUCT(def);

	mov	DWORD PTR _t$83[rsp], 176		; 000000b0H
	lea	rax, QWORD PTR def$[rsp]
	mov	QWORD PTR _p$117[rsp], rax
$LN276@ParamsSetu:
	mov	eax, DWORD PTR _t$83[rsp]
	mov	DWORD PTR tv540[rsp], eax
	mov	eax, DWORD PTR _t$83[rsp]
	dec	eax
	mov	DWORD PTR _t$83[rsp], eax
	cmp	DWORD PTR tv540[rsp], 0
	je	SHORT $LN275@ParamsSetu
	mov	rax, QWORD PTR _p$117[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR _p$117[rsp]
	inc	rax
	mov	QWORD PTR _p$117[rsp], rax
	jmp	SHORT $LN276@ParamsSetu
$LN275@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN279@ParamsSetu

; 179  : 	def.flags = PF_ParamFlag_SUPERVISE;

	mov	DWORD PTR def$[rsp+48], 64		; 00000040H
$LN274@ParamsSetu:

; 180  : 	PF_ADD_CHECKBOX("カラーミキサを使用",
; 181  : 		"Enabled",
; 182  : 		TRUE,
; 183  : 		0,
; 184  : 		19);

	mov	DWORD PTR priv_err$39[rsp], 0
	mov	DWORD PTR def$[rsp+12], 4
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rax, QWORD PTR [rax+176]
	lea	rdx, OFFSET FLAT:$SG118287
	lea	rcx, QWORD PTR def$[rsp+16]
	call	QWORD PTR [rax+336]
	lea	rax, OFFSET FLAT:$SG118288
	mov	QWORD PTR def$[rsp+64], rax
	mov	DWORD PTR def$[rsp+56], 1
	mov	BYTE PTR def$[rsp+60], 1
	mov	eax, DWORD PTR def$[rsp+48]
	mov	DWORD PTR def$[rsp+48], eax
	mov	DWORD PTR def$[rsp], 19
	lea	r8, QWORD PTR def$[rsp]
	mov	edx, -1
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rcx, QWORD PTR [rax+184]
	mov	rax, QWORD PTR in_data$[rsp]
	call	QWORD PTR [rax+16]
	mov	DWORD PTR priv_err$39[rsp], eax
	cmp	DWORD PTR priv_err$39[rsp], 0
	je	SHORT $LN271@ParamsSetu
	mov	eax, DWORD PTR priv_err$39[rsp]
	jmp	$LN442@ParamsSetu
$LN271@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	$LN274@ParamsSetu
$LN270@ParamsSetu:

; 185  : 
; 186  : 	AEFX_CLR_STRUCT(def);

	mov	DWORD PTR _t$69[rsp], 176		; 000000b0H
	lea	rax, QWORD PTR def$[rsp]
	mov	QWORD PTR _p$118[rsp], rax
$LN267@ParamsSetu:
	mov	eax, DWORD PTR _t$69[rsp]
	mov	DWORD PTR tv591[rsp], eax
	mov	eax, DWORD PTR _t$69[rsp]
	dec	eax
	mov	DWORD PTR _t$69[rsp], eax
	cmp	DWORD PTR tv591[rsp], 0
	je	SHORT $LN266@ParamsSetu
	mov	rax, QWORD PTR _p$118[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR _p$118[rsp]
	inc	rax
	mov	QWORD PTR _p$118[rsp], rax
	jmp	SHORT $LN267@ParamsSetu
$LN266@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN270@ParamsSetu
$LN265@ParamsSetu:

; 187  : 	PF_ADD_PERCENT("Frequency",
; 188  : 		20,
; 189  : 		20);

	mov	DWORD PTR priv_err$41[rsp], 0
	mov	DWORD PTR def$[rsp+12], 2
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rax, QWORD PTR [rax+176]
	lea	rdx, OFFSET FLAT:$SG118303
	lea	rcx, QWORD PTR def$[rsp+16]
	call	QWORD PTR [rax+336]
	mov	eax, 1
	imul	rax, rax, 0
	mov	BYTE PTR def$[rsp+rax+60], 0
	mov	eax, 1
	imul	rax, rax, 0
	mov	BYTE PTR def$[rsp+rax+92], 0
	mov	DWORD PTR def$[rsp+124], 0
	mov	DWORD PTR def$[rsp+132], 0
	mov	DWORD PTR def$[rsp+128], 6553600	; 00640000H
	mov	DWORD PTR def$[rsp+136], 6553600	; 00640000H
	mov	DWORD PTR def$[rsp+140], 1310720	; 00140000H
	mov	eax, DWORD PTR def$[rsp+140]
	mov	DWORD PTR def$[rsp+56], eax
	mov	eax, 1
	mov	WORD PTR def$[rsp+144], ax
	movsx	eax, WORD PTR def$[rsp+146]
	or	eax, 1
	mov	WORD PTR def$[rsp+146], ax
	mov	eax, DWORD PTR def$[rsp+48]
	mov	DWORD PTR def$[rsp+48], eax
	mov	DWORD PTR def$[rsp], 20
	lea	r8, QWORD PTR def$[rsp]
	mov	edx, -1
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rcx, QWORD PTR [rax+184]
	mov	rax, QWORD PTR in_data$[rsp]
	call	QWORD PTR [rax+16]
	mov	DWORD PTR priv_err$41[rsp], eax
	cmp	DWORD PTR priv_err$41[rsp], 0
	je	SHORT $LN262@ParamsSetu
	mov	eax, DWORD PTR priv_err$41[rsp]
	jmp	$LN442@ParamsSetu
$LN262@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	$LN265@ParamsSetu
$LN261@ParamsSetu:

; 190  : 
; 191  : 	AEFX_CLR_STRUCT(def);

	mov	DWORD PTR _t$91[rsp], 176		; 000000b0H
	lea	rax, QWORD PTR def$[rsp]
	mov	QWORD PTR _p$119[rsp], rax
$LN258@ParamsSetu:
	mov	eax, DWORD PTR _t$91[rsp]
	mov	DWORD PTR tv617[rsp], eax
	mov	eax, DWORD PTR _t$91[rsp]
	dec	eax
	mov	DWORD PTR _t$91[rsp], eax
	cmp	DWORD PTR tv617[rsp], 0
	je	SHORT $LN257@ParamsSetu
	mov	rax, QWORD PTR _p$119[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR _p$119[rsp]
	inc	rax
	mov	QWORD PTR _p$119[rsp], rax
	jmp	SHORT $LN258@ParamsSetu
$LN257@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN261@ParamsSetu
$LN256@ParamsSetu:

; 192  : 	PF_ADD_CHECKBOX("R信号",
; 193  : 		"ON",
; 194  : 		TRUE,
; 195  : 		0,
; 196  : 		21);

	mov	DWORD PTR priv_err$43[rsp], 0
	mov	DWORD PTR def$[rsp+12], 4
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rax, QWORD PTR [rax+176]
	lea	rdx, OFFSET FLAT:$SG118325
	lea	rcx, QWORD PTR def$[rsp+16]
	call	QWORD PTR [rax+336]
	lea	rax, OFFSET FLAT:$SG118326
	mov	QWORD PTR def$[rsp+64], rax
	mov	DWORD PTR def$[rsp+56], 1
	mov	BYTE PTR def$[rsp+60], 1
	mov	eax, DWORD PTR def$[rsp+48]
	mov	DWORD PTR def$[rsp+48], eax
	mov	DWORD PTR def$[rsp], 21
	lea	r8, QWORD PTR def$[rsp]
	mov	edx, -1
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rcx, QWORD PTR [rax+184]
	mov	rax, QWORD PTR in_data$[rsp]
	call	QWORD PTR [rax+16]
	mov	DWORD PTR priv_err$43[rsp], eax
	cmp	DWORD PTR priv_err$43[rsp], 0
	je	SHORT $LN253@ParamsSetu
	mov	eax, DWORD PTR priv_err$43[rsp]
	jmp	$LN442@ParamsSetu
$LN253@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	$LN256@ParamsSetu
$LN252@ParamsSetu:

; 197  : 
; 198  : 	AEFX_CLR_STRUCT(def);

	mov	DWORD PTR _t$71[rsp], 176		; 000000b0H
	lea	rax, QWORD PTR def$[rsp]
	mov	QWORD PTR _p$120[rsp], rax
$LN249@ParamsSetu:
	mov	eax, DWORD PTR _t$71[rsp]
	mov	DWORD PTR tv636[rsp], eax
	mov	eax, DWORD PTR _t$71[rsp]
	dec	eax
	mov	DWORD PTR _t$71[rsp], eax
	cmp	DWORD PTR tv636[rsp], 0
	je	SHORT $LN248@ParamsSetu
	mov	rax, QWORD PTR _p$120[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR _p$120[rsp]
	inc	rax
	mov	QWORD PTR _p$120[rsp], rax
	jmp	SHORT $LN249@ParamsSetu
$LN248@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN252@ParamsSetu
$LN247@ParamsSetu:

; 199  : 	PF_ADD_CHECKBOX("G信号",
; 200  : 		"ON",
; 201  : 		TRUE,
; 202  : 		0,
; 203  : 		22);

	mov	DWORD PTR priv_err$45[rsp], 0
	mov	DWORD PTR def$[rsp+12], 4
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rax, QWORD PTR [rax+176]
	lea	rdx, OFFSET FLAT:$SG118341
	lea	rcx, QWORD PTR def$[rsp+16]
	call	QWORD PTR [rax+336]
	lea	rax, OFFSET FLAT:$SG118342
	mov	QWORD PTR def$[rsp+64], rax
	mov	DWORD PTR def$[rsp+56], 1
	mov	BYTE PTR def$[rsp+60], 1
	mov	eax, DWORD PTR def$[rsp+48]
	mov	DWORD PTR def$[rsp+48], eax
	mov	DWORD PTR def$[rsp], 22
	lea	r8, QWORD PTR def$[rsp]
	mov	edx, -1
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rcx, QWORD PTR [rax+184]
	mov	rax, QWORD PTR in_data$[rsp]
	call	QWORD PTR [rax+16]
	mov	DWORD PTR priv_err$45[rsp], eax
	cmp	DWORD PTR priv_err$45[rsp], 0
	je	SHORT $LN244@ParamsSetu
	mov	eax, DWORD PTR priv_err$45[rsp]
	jmp	$LN442@ParamsSetu
$LN244@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	$LN247@ParamsSetu
$LN243@ParamsSetu:

; 204  : 
; 205  : 	AEFX_CLR_STRUCT(def);

	mov	DWORD PTR _t$85[rsp], 176		; 000000b0H
	lea	rax, QWORD PTR def$[rsp]
	mov	QWORD PTR _p$121[rsp], rax
$LN240@ParamsSetu:
	mov	eax, DWORD PTR _t$85[rsp]
	mov	DWORD PTR tv655[rsp], eax
	mov	eax, DWORD PTR _t$85[rsp]
	dec	eax
	mov	DWORD PTR _t$85[rsp], eax
	cmp	DWORD PTR tv655[rsp], 0
	je	SHORT $LN239@ParamsSetu
	mov	rax, QWORD PTR _p$121[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR _p$121[rsp]
	inc	rax
	mov	QWORD PTR _p$121[rsp], rax
	jmp	SHORT $LN240@ParamsSetu
$LN239@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN243@ParamsSetu
$LN238@ParamsSetu:

; 206  : 	PF_ADD_CHECKBOX("B信号",
; 207  : 		"ON",
; 208  : 		TRUE,
; 209  : 		0,
; 210  : 		23);

	mov	DWORD PTR priv_err$47[rsp], 0
	mov	DWORD PTR def$[rsp+12], 4
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rax, QWORD PTR [rax+176]
	lea	rdx, OFFSET FLAT:$SG118357
	lea	rcx, QWORD PTR def$[rsp+16]
	call	QWORD PTR [rax+336]
	lea	rax, OFFSET FLAT:$SG118358
	mov	QWORD PTR def$[rsp+64], rax
	mov	DWORD PTR def$[rsp+56], 1
	mov	BYTE PTR def$[rsp+60], 1
	mov	eax, DWORD PTR def$[rsp+48]
	mov	DWORD PTR def$[rsp+48], eax
	mov	DWORD PTR def$[rsp], 23
	lea	r8, QWORD PTR def$[rsp]
	mov	edx, -1
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rcx, QWORD PTR [rax+184]
	mov	rax, QWORD PTR in_data$[rsp]
	call	QWORD PTR [rax+16]
	mov	DWORD PTR priv_err$47[rsp], eax
	cmp	DWORD PTR priv_err$47[rsp], 0
	je	SHORT $LN235@ParamsSetu
	mov	eax, DWORD PTR priv_err$47[rsp]
	jmp	$LN442@ParamsSetu
$LN235@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	$LN238@ParamsSetu
$LN234@ParamsSetu:

; 211  : 
; 212  : 	AEFX_CLR_STRUCT(def);

	mov	DWORD PTR _t$73[rsp], 176		; 000000b0H
	lea	rax, QWORD PTR def$[rsp]
	mov	QWORD PTR _p$122[rsp], rax
$LN231@ParamsSetu:
	mov	eax, DWORD PTR _t$73[rsp]
	mov	DWORD PTR tv674[rsp], eax
	mov	eax, DWORD PTR _t$73[rsp]
	dec	eax
	mov	DWORD PTR _t$73[rsp], eax
	cmp	DWORD PTR tv674[rsp], 0
	je	SHORT $LN230@ParamsSetu
	mov	rax, QWORD PTR _p$122[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR _p$122[rsp]
	inc	rax
	mov	QWORD PTR _p$122[rsp], rax
	jmp	SHORT $LN231@ParamsSetu
$LN230@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN234@ParamsSetu
$LN229@ParamsSetu:

; 213  : 	PF_ADD_CHECKBOX("Black信号",
; 214  : 		"ON",
; 215  : 		FALSE,
; 216  : 		0,
; 217  : 		24);

	mov	DWORD PTR priv_err$49[rsp], 0
	mov	DWORD PTR def$[rsp+12], 4
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rax, QWORD PTR [rax+176]
	lea	rdx, OFFSET FLAT:$SG118373
	lea	rcx, QWORD PTR def$[rsp+16]
	call	QWORD PTR [rax+336]
	lea	rax, OFFSET FLAT:$SG118374
	mov	QWORD PTR def$[rsp+64], rax
	mov	DWORD PTR def$[rsp+56], 0
	mov	BYTE PTR def$[rsp+60], 0
	mov	eax, DWORD PTR def$[rsp+48]
	mov	DWORD PTR def$[rsp+48], eax
	mov	DWORD PTR def$[rsp], 24
	lea	r8, QWORD PTR def$[rsp]
	mov	edx, -1
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rcx, QWORD PTR [rax+184]
	mov	rax, QWORD PTR in_data$[rsp]
	call	QWORD PTR [rax+16]
	mov	DWORD PTR priv_err$49[rsp], eax
	cmp	DWORD PTR priv_err$49[rsp], 0
	je	SHORT $LN226@ParamsSetu
	mov	eax, DWORD PTR priv_err$49[rsp]
	jmp	$LN442@ParamsSetu
$LN226@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	$LN229@ParamsSetu
$LN225@ParamsSetu:

; 218  : 
; 219  : 	AEFX_CLR_STRUCT(def);

	mov	DWORD PTR _t$1[rsp], 176		; 000000b0H
	lea	rax, QWORD PTR def$[rsp]
	mov	QWORD PTR _p$123[rsp], rax
$LN222@ParamsSetu:
	mov	eax, DWORD PTR _t$1[rsp]
	mov	DWORD PTR tv693[rsp], eax
	mov	eax, DWORD PTR _t$1[rsp]
	dec	eax
	mov	DWORD PTR _t$1[rsp], eax
	cmp	DWORD PTR tv693[rsp], 0
	je	SHORT $LN221@ParamsSetu
	mov	rax, QWORD PTR _p$123[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR _p$123[rsp]
	inc	rax
	mov	QWORD PTR _p$123[rsp], rax
	jmp	SHORT $LN222@ParamsSetu
$LN221@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN225@ParamsSetu
$LN220@ParamsSetu:

; 220  : 	PF_ADD_CHECKBOX("White信号",
; 221  : 		"ON",
; 222  : 		FALSE,
; 223  : 		0,
; 224  : 		25);

	mov	DWORD PTR priv_err$2[rsp], 0
	mov	DWORD PTR def$[rsp+12], 4
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rax, QWORD PTR [rax+176]
	lea	rdx, OFFSET FLAT:$SG118389
	lea	rcx, QWORD PTR def$[rsp+16]
	call	QWORD PTR [rax+336]
	lea	rax, OFFSET FLAT:$SG118390
	mov	QWORD PTR def$[rsp+64], rax
	mov	DWORD PTR def$[rsp+56], 0
	mov	BYTE PTR def$[rsp+60], 0
	mov	eax, DWORD PTR def$[rsp+48]
	mov	DWORD PTR def$[rsp+48], eax
	mov	DWORD PTR def$[rsp], 25
	lea	r8, QWORD PTR def$[rsp]
	mov	edx, -1
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rcx, QWORD PTR [rax+184]
	mov	rax, QWORD PTR in_data$[rsp]
	call	QWORD PTR [rax+16]
	mov	DWORD PTR priv_err$2[rsp], eax
	cmp	DWORD PTR priv_err$2[rsp], 0
	je	SHORT $LN217@ParamsSetu
	mov	eax, DWORD PTR priv_err$2[rsp]
	jmp	$LN442@ParamsSetu
$LN217@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	$LN220@ParamsSetu
$LN216@ParamsSetu:

; 225  : 
; 226  : 	AEFX_CLR_STRUCT(def);

	mov	DWORD PTR _t$4[rsp], 176		; 000000b0H
	lea	rax, QWORD PTR def$[rsp]
	mov	QWORD PTR _p$124[rsp], rax
$LN213@ParamsSetu:
	mov	eax, DWORD PTR _t$4[rsp]
	mov	DWORD PTR tv744[rsp], eax
	mov	eax, DWORD PTR _t$4[rsp]
	dec	eax
	mov	DWORD PTR _t$4[rsp], eax
	cmp	DWORD PTR tv744[rsp], 0
	je	SHORT $LN212@ParamsSetu
	mov	rax, QWORD PTR _p$124[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR _p$124[rsp]
	inc	rax
	mov	QWORD PTR _p$124[rsp], rax
	jmp	SHORT $LN213@ParamsSetu
$LN212@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN216@ParamsSetu
$LN211@ParamsSetu:

; 227  : 	PF_ADD_CHECKBOX("Alpha信号",
; 228  : 		"ON",
; 229  : 		FALSE,
; 230  : 		0,
; 231  : 		26);

	mov	DWORD PTR priv_err$6[rsp], 0
	mov	DWORD PTR def$[rsp+12], 4
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rax, QWORD PTR [rax+176]
	lea	rdx, OFFSET FLAT:$SG118405
	lea	rcx, QWORD PTR def$[rsp+16]
	call	QWORD PTR [rax+336]
	lea	rax, OFFSET FLAT:$SG118406
	mov	QWORD PTR def$[rsp+64], rax
	mov	DWORD PTR def$[rsp+56], 0
	mov	BYTE PTR def$[rsp+60], 0
	mov	eax, DWORD PTR def$[rsp+48]
	mov	DWORD PTR def$[rsp+48], eax
	mov	DWORD PTR def$[rsp], 26
	lea	r8, QWORD PTR def$[rsp]
	mov	edx, -1
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rcx, QWORD PTR [rax+184]
	mov	rax, QWORD PTR in_data$[rsp]
	call	QWORD PTR [rax+16]
	mov	DWORD PTR priv_err$6[rsp], eax
	cmp	DWORD PTR priv_err$6[rsp], 0
	je	SHORT $LN208@ParamsSetu
	mov	eax, DWORD PTR priv_err$6[rsp]
	jmp	$LN442@ParamsSetu
$LN208@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	$LN211@ParamsSetu
$LN207@ParamsSetu:

; 232  : 
; 233  : 	AEFX_CLR_STRUCT(def);

	mov	DWORD PTR _t$8[rsp], 176		; 000000b0H
	lea	rax, QWORD PTR def$[rsp]
	mov	QWORD PTR _p$125[rsp], rax
$LN204@ParamsSetu:
	mov	eax, DWORD PTR _t$8[rsp]
	mov	DWORD PTR tv763[rsp], eax
	mov	eax, DWORD PTR _t$8[rsp]
	dec	eax
	mov	DWORD PTR _t$8[rsp], eax
	cmp	DWORD PTR tv763[rsp], 0
	je	SHORT $LN203@ParamsSetu
	mov	rax, QWORD PTR _p$125[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR _p$125[rsp]
	inc	rax
	mov	QWORD PTR _p$125[rsp], rax
	jmp	SHORT $LN204@ParamsSetu
$LN203@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN207@ParamsSetu

; 234  : 	def.flags = PF_ParamFlag_SUPERVISE;

	mov	DWORD PTR def$[rsp+48], 64		; 00000040H
$LN202@ParamsSetu:

; 235  : 	PF_ADD_CHECKBOX("カスタムカラーを使用",
; 236  : 		"Enabled",
; 237  : 		FALSE,
; 238  : 		0,
; 239  : 		27);

	mov	DWORD PTR priv_err$10[rsp], 0
	mov	DWORD PTR def$[rsp+12], 4
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rax, QWORD PTR [rax+176]
	lea	rdx, OFFSET FLAT:$SG118421
	lea	rcx, QWORD PTR def$[rsp+16]
	call	QWORD PTR [rax+336]
	lea	rax, OFFSET FLAT:$SG118422
	mov	QWORD PTR def$[rsp+64], rax
	mov	DWORD PTR def$[rsp+56], 0
	mov	BYTE PTR def$[rsp+60], 0
	mov	eax, DWORD PTR def$[rsp+48]
	mov	DWORD PTR def$[rsp+48], eax
	mov	DWORD PTR def$[rsp], 27
	lea	r8, QWORD PTR def$[rsp]
	mov	edx, -1
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rcx, QWORD PTR [rax+184]
	mov	rax, QWORD PTR in_data$[rsp]
	call	QWORD PTR [rax+16]
	mov	DWORD PTR priv_err$10[rsp], eax
	cmp	DWORD PTR priv_err$10[rsp], 0
	je	SHORT $LN199@ParamsSetu
	mov	eax, DWORD PTR priv_err$10[rsp]
	jmp	$LN442@ParamsSetu
$LN199@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	$LN202@ParamsSetu
$LN198@ParamsSetu:

; 240  : 
; 241  : 	AEFX_CLR_STRUCT(def);

	mov	DWORD PTR _t$12[rsp], 176		; 000000b0H
	lea	rax, QWORD PTR def$[rsp]
	mov	QWORD PTR _p$126[rsp], rax
$LN195@ParamsSetu:
	mov	eax, DWORD PTR _t$12[rsp]
	mov	DWORD PTR tv782[rsp], eax
	mov	eax, DWORD PTR _t$12[rsp]
	dec	eax
	mov	DWORD PTR _t$12[rsp], eax
	cmp	DWORD PTR tv782[rsp], 0
	je	SHORT $LN194@ParamsSetu
	mov	rax, QWORD PTR _p$126[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR _p$126[rsp]
	inc	rax
	mov	QWORD PTR _p$126[rsp], rax
	jmp	SHORT $LN195@ParamsSetu
$LN194@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN198@ParamsSetu
$LN193@ParamsSetu:

; 242  : 	PF_ADD_COLOR("カスタムカラー",
; 243  : 		255,
; 244  : 		0,
; 245  : 		0,
; 246  : 		28);

	mov	DWORD PTR priv_err$14[rsp], 0
	mov	DWORD PTR def$[rsp+12], 5
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rax, QWORD PTR [rax+176]
	lea	rdx, OFFSET FLAT:$SG118437
	lea	rcx, QWORD PTR def$[rsp+16]
	call	QWORD PTR [rax+336]
	mov	BYTE PTR def$[rsp+57], 255		; 000000ffH
	mov	BYTE PTR def$[rsp+58], 0
	mov	BYTE PTR def$[rsp+59], 0
	mov	BYTE PTR def$[rsp+56], 255		; 000000ffH
	mov	eax, DWORD PTR def$[rsp+56]
	mov	DWORD PTR def$[rsp+60], eax
	mov	DWORD PTR def$[rsp], 28
	lea	r8, QWORD PTR def$[rsp]
	mov	edx, -1
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rcx, QWORD PTR [rax+184]
	mov	rax, QWORD PTR in_data$[rsp]
	call	QWORD PTR [rax+16]
	mov	DWORD PTR priv_err$14[rsp], eax
	cmp	DWORD PTR priv_err$14[rsp], 0
	je	SHORT $LN190@ParamsSetu
	mov	eax, DWORD PTR priv_err$14[rsp]
	jmp	$LN442@ParamsSetu
$LN190@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	$LN193@ParamsSetu
$LN189@ParamsSetu:

; 247  : 
; 248  : 	AEFX_CLR_STRUCT(def);

	mov	DWORD PTR _t$16[rsp], 176		; 000000b0H
	lea	rax, QWORD PTR def$[rsp]
	mov	QWORD PTR _p$127[rsp], rax
$LN186@ParamsSetu:
	mov	eax, DWORD PTR _t$16[rsp]
	mov	DWORD PTR tv833[rsp], eax
	mov	eax, DWORD PTR _t$16[rsp]
	dec	eax
	mov	DWORD PTR _t$16[rsp], eax
	cmp	DWORD PTR tv833[rsp], 0
	je	SHORT $LN185@ParamsSetu
	mov	rax, QWORD PTR _p$127[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR _p$127[rsp]
	inc	rax
	mov	QWORD PTR _p$127[rsp], rax
	jmp	SHORT $LN186@ParamsSetu
$LN185@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN189@ParamsSetu

; 249  : 	def.flags = PF_ParamFlag_SUPERVISE;

	mov	DWORD PTR def$[rsp+48], 64		; 00000040H
$LN184@ParamsSetu:

; 250  : 	PF_ADD_CHECKBOX("ミックスではなく塗りつぶす",
; 251  : 		"ON",
; 252  : 		FALSE,
; 253  : 		0,
; 254  : 		29);

	mov	DWORD PTR priv_err$18[rsp], 0
	mov	DWORD PTR def$[rsp+12], 4
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rax, QWORD PTR [rax+176]
	lea	rdx, OFFSET FLAT:$SG118452
	lea	rcx, QWORD PTR def$[rsp+16]
	call	QWORD PTR [rax+336]
	lea	rax, OFFSET FLAT:$SG118453
	mov	QWORD PTR def$[rsp+64], rax
	mov	DWORD PTR def$[rsp+56], 0
	mov	BYTE PTR def$[rsp+60], 0
	mov	eax, DWORD PTR def$[rsp+48]
	mov	DWORD PTR def$[rsp+48], eax
	mov	DWORD PTR def$[rsp], 29
	lea	r8, QWORD PTR def$[rsp]
	mov	edx, -1
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rcx, QWORD PTR [rax+184]
	mov	rax, QWORD PTR in_data$[rsp]
	call	QWORD PTR [rax+16]
	mov	DWORD PTR priv_err$18[rsp], eax
	cmp	DWORD PTR priv_err$18[rsp], 0
	je	SHORT $LN181@ParamsSetu
	mov	eax, DWORD PTR priv_err$18[rsp]
	jmp	$LN442@ParamsSetu
$LN181@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	$LN184@ParamsSetu
$LN180@ParamsSetu:

; 255  : 
; 256  : 	AEFX_CLR_STRUCT(def);

	mov	DWORD PTR _t$20[rsp], 176		; 000000b0H
	lea	rax, QWORD PTR def$[rsp]
	mov	QWORD PTR _p$128[rsp], rax
$LN177@ParamsSetu:
	mov	eax, DWORD PTR _t$20[rsp]
	mov	DWORD PTR tv852[rsp], eax
	mov	eax, DWORD PTR _t$20[rsp]
	dec	eax
	mov	DWORD PTR _t$20[rsp], eax
	cmp	DWORD PTR tv852[rsp], 0
	je	SHORT $LN176@ParamsSetu
	mov	rax, QWORD PTR _p$128[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR _p$128[rsp]
	inc	rax
	mov	QWORD PTR _p$128[rsp], rax
	jmp	SHORT $LN177@ParamsSetu
$LN176@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN180@ParamsSetu
$LN175@ParamsSetu:

; 257  : 	PF_ADD_PERCENT("シグナルの強さ",
; 258  : 		20,
; 259  : 		30);

	mov	DWORD PTR priv_err$22[rsp], 0
	mov	DWORD PTR def$[rsp+12], 2
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rax, QWORD PTR [rax+176]
	lea	rdx, OFFSET FLAT:$SG118468
	lea	rcx, QWORD PTR def$[rsp+16]
	call	QWORD PTR [rax+336]
	mov	eax, 1
	imul	rax, rax, 0
	mov	BYTE PTR def$[rsp+rax+60], 0
	mov	eax, 1
	imul	rax, rax, 0
	mov	BYTE PTR def$[rsp+rax+92], 0
	mov	DWORD PTR def$[rsp+124], 0
	mov	DWORD PTR def$[rsp+132], 0
	mov	DWORD PTR def$[rsp+128], 6553600	; 00640000H
	mov	DWORD PTR def$[rsp+136], 6553600	; 00640000H
	mov	DWORD PTR def$[rsp+140], 1310720	; 00140000H
	mov	eax, DWORD PTR def$[rsp+140]
	mov	DWORD PTR def$[rsp+56], eax
	mov	eax, 1
	mov	WORD PTR def$[rsp+144], ax
	movsx	eax, WORD PTR def$[rsp+146]
	or	eax, 1
	mov	WORD PTR def$[rsp+146], ax
	mov	eax, DWORD PTR def$[rsp+48]
	mov	DWORD PTR def$[rsp+48], eax
	mov	DWORD PTR def$[rsp], 30
	lea	r8, QWORD PTR def$[rsp]
	mov	edx, -1
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rcx, QWORD PTR [rax+184]
	mov	rax, QWORD PTR in_data$[rsp]
	call	QWORD PTR [rax+16]
	mov	DWORD PTR priv_err$22[rsp], eax
	cmp	DWORD PTR priv_err$22[rsp], 0
	je	SHORT $LN172@ParamsSetu
	mov	eax, DWORD PTR priv_err$22[rsp]
	jmp	$LN442@ParamsSetu
$LN172@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	$LN175@ParamsSetu
$LN171@ParamsSetu:

; 260  : 
; 261  : 	AEFX_CLR_STRUCT(def);

	mov	DWORD PTR _t$24[rsp], 176		; 000000b0H
	lea	rax, QWORD PTR def$[rsp]
	mov	QWORD PTR _p$129[rsp], rax
$LN168@ParamsSetu:
	mov	eax, DWORD PTR _t$24[rsp]
	mov	DWORD PTR tv878[rsp], eax
	mov	eax, DWORD PTR _t$24[rsp]
	dec	eax
	mov	DWORD PTR _t$24[rsp], eax
	cmp	DWORD PTR tv878[rsp], 0
	je	SHORT $LN167@ParamsSetu
	mov	rax, QWORD PTR _p$129[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR _p$129[rsp]
	inc	rax
	mov	QWORD PTR _p$129[rsp], rax
	jmp	SHORT $LN168@ParamsSetu
$LN167@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN171@ParamsSetu
$LN166@ParamsSetu:

; 262  : 	PF_END_TOPIC(31);

	mov	DWORD PTR priv_err$26[rsp], 0
	mov	DWORD PTR def$[rsp+12], 14
	mov	DWORD PTR def$[rsp], 31
	lea	r8, QWORD PTR def$[rsp]
	mov	edx, -1
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rcx, QWORD PTR [rax+184]
	mov	rax, QWORD PTR in_data$[rsp]
	call	QWORD PTR [rax+16]
	mov	DWORD PTR priv_err$26[rsp], eax
	cmp	DWORD PTR priv_err$26[rsp], 0
	je	SHORT $LN163@ParamsSetu
	mov	eax, DWORD PTR priv_err$26[rsp]
	jmp	$LN442@ParamsSetu
$LN163@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN166@ParamsSetu
$LN162@ParamsSetu:

; 263  : 
; 264  : 	AEFX_CLR_STRUCT(def);

	mov	DWORD PTR _t$28[rsp], 176		; 000000b0H
	lea	rax, QWORD PTR def$[rsp]
	mov	QWORD PTR _p$130[rsp], rax
$LN159@ParamsSetu:
	mov	eax, DWORD PTR _t$28[rsp]
	mov	DWORD PTR tv892[rsp], eax
	mov	eax, DWORD PTR _t$28[rsp]
	dec	eax
	mov	DWORD PTR _t$28[rsp], eax
	cmp	DWORD PTR tv892[rsp], 0
	je	SHORT $LN158@ParamsSetu
	mov	rax, QWORD PTR _p$130[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR _p$130[rsp]
	inc	rax
	mov	QWORD PTR _p$130[rsp], rax
	jmp	SHORT $LN159@ParamsSetu
$LN158@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN162@ParamsSetu
$LN157@ParamsSetu:

; 265  : 	PF_ADD_TOPIC("シフタ",
; 266  : 		32);

	mov	DWORD PTR priv_err$30[rsp], 0
	mov	DWORD PTR def$[rsp+12], 13
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rax, QWORD PTR [rax+176]
	lea	rdx, OFFSET FLAT:$SG118504
	lea	rcx, QWORD PTR def$[rsp+16]
	call	QWORD PTR [rax+336]
	mov	DWORD PTR def$[rsp], 32			; 00000020H
	lea	r8, QWORD PTR def$[rsp]
	mov	edx, -1
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rcx, QWORD PTR [rax+184]
	mov	rax, QWORD PTR in_data$[rsp]
	call	QWORD PTR [rax+16]
	mov	DWORD PTR priv_err$30[rsp], eax
	cmp	DWORD PTR priv_err$30[rsp], 0
	je	SHORT $LN154@ParamsSetu
	mov	eax, DWORD PTR priv_err$30[rsp]
	jmp	$LN442@ParamsSetu
$LN154@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	$LN157@ParamsSetu
$LN153@ParamsSetu:

; 267  : 
; 268  : 	AEFX_CLR_STRUCT(def);

	mov	DWORD PTR _t$32[rsp], 176		; 000000b0H
	lea	rax, QWORD PTR def$[rsp]
	mov	QWORD PTR _p$131[rsp], rax
$LN150@ParamsSetu:
	mov	eax, DWORD PTR _t$32[rsp]
	mov	DWORD PTR tv911[rsp], eax
	mov	eax, DWORD PTR _t$32[rsp]
	dec	eax
	mov	DWORD PTR _t$32[rsp], eax
	cmp	DWORD PTR tv911[rsp], 0
	je	SHORT $LN149@ParamsSetu
	mov	rax, QWORD PTR _p$131[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR _p$131[rsp]
	inc	rax
	mov	QWORD PTR _p$131[rsp], rax
	jmp	SHORT $LN150@ParamsSetu
$LN149@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN153@ParamsSetu

; 269  : 	def.flags = PF_ParamFlag_SUPERVISE;

	mov	DWORD PTR def$[rsp+48], 64		; 00000040H
$LN148@ParamsSetu:

; 270  : 	PF_ADD_CHECKBOX("シフタを使用",
; 271  : 		"Enabled",
; 272  : 		TRUE,
; 273  : 		0,
; 274  : 		33);

	mov	DWORD PTR priv_err$34[rsp], 0
	mov	DWORD PTR def$[rsp+12], 4
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rax, QWORD PTR [rax+176]
	lea	rdx, OFFSET FLAT:$SG118519
	lea	rcx, QWORD PTR def$[rsp+16]
	call	QWORD PTR [rax+336]
	lea	rax, OFFSET FLAT:$SG118520
	mov	QWORD PTR def$[rsp+64], rax
	mov	DWORD PTR def$[rsp+56], 1
	mov	BYTE PTR def$[rsp+60], 1
	mov	eax, DWORD PTR def$[rsp+48]
	mov	DWORD PTR def$[rsp+48], eax
	mov	DWORD PTR def$[rsp], 33			; 00000021H
	lea	r8, QWORD PTR def$[rsp]
	mov	edx, -1
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rcx, QWORD PTR [rax+184]
	mov	rax, QWORD PTR in_data$[rsp]
	call	QWORD PTR [rax+16]
	mov	DWORD PTR priv_err$34[rsp], eax
	cmp	DWORD PTR priv_err$34[rsp], 0
	je	SHORT $LN145@ParamsSetu
	mov	eax, DWORD PTR priv_err$34[rsp]
	jmp	$LN442@ParamsSetu
$LN145@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	$LN148@ParamsSetu
$LN144@ParamsSetu:

; 275  : 
; 276  : 	AEFX_CLR_STRUCT(def);

	mov	DWORD PTR _t$36[rsp], 176		; 000000b0H
	lea	rax, QWORD PTR def$[rsp]
	mov	QWORD PTR _p$132[rsp], rax
$LN141@ParamsSetu:
	mov	eax, DWORD PTR _t$36[rsp]
	mov	DWORD PTR tv930[rsp], eax
	mov	eax, DWORD PTR _t$36[rsp]
	dec	eax
	mov	DWORD PTR _t$36[rsp], eax
	cmp	DWORD PTR tv930[rsp], 0
	je	SHORT $LN140@ParamsSetu
	mov	rax, QWORD PTR _p$132[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR _p$132[rsp]
	inc	rax
	mov	QWORD PTR _p$132[rsp], rax
	jmp	SHORT $LN141@ParamsSetu
$LN140@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN144@ParamsSetu
$LN139@ParamsSetu:

; 277  : 	PF_ADD_PERCENT("Frequency",
; 278  : 		50,
; 279  : 		34);

	mov	DWORD PTR priv_err$38[rsp], 0
	mov	DWORD PTR def$[rsp+12], 2
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rax, QWORD PTR [rax+176]
	lea	rdx, OFFSET FLAT:$SG118535
	lea	rcx, QWORD PTR def$[rsp+16]
	call	QWORD PTR [rax+336]
	mov	eax, 1
	imul	rax, rax, 0
	mov	BYTE PTR def$[rsp+rax+60], 0
	mov	eax, 1
	imul	rax, rax, 0
	mov	BYTE PTR def$[rsp+rax+92], 0
	mov	DWORD PTR def$[rsp+124], 0
	mov	DWORD PTR def$[rsp+132], 0
	mov	DWORD PTR def$[rsp+128], 6553600	; 00640000H
	mov	DWORD PTR def$[rsp+136], 6553600	; 00640000H
	mov	DWORD PTR def$[rsp+140], 3276800	; 00320000H
	mov	eax, DWORD PTR def$[rsp+140]
	mov	DWORD PTR def$[rsp+56], eax
	mov	eax, 1
	mov	WORD PTR def$[rsp+144], ax
	movsx	eax, WORD PTR def$[rsp+146]
	or	eax, 1
	mov	WORD PTR def$[rsp+146], ax
	mov	eax, DWORD PTR def$[rsp+48]
	mov	DWORD PTR def$[rsp+48], eax
	mov	DWORD PTR def$[rsp], 34			; 00000022H
	lea	r8, QWORD PTR def$[rsp]
	mov	edx, -1
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rcx, QWORD PTR [rax+184]
	mov	rax, QWORD PTR in_data$[rsp]
	call	QWORD PTR [rax+16]
	mov	DWORD PTR priv_err$38[rsp], eax
	cmp	DWORD PTR priv_err$38[rsp], 0
	je	SHORT $LN136@ParamsSetu
	mov	eax, DWORD PTR priv_err$38[rsp]
	jmp	$LN442@ParamsSetu
$LN136@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	$LN139@ParamsSetu
$LN135@ParamsSetu:

; 280  : 
; 281  : 	AEFX_CLR_STRUCT(def);

	mov	DWORD PTR _t$40[rsp], 176		; 000000b0H
	lea	rax, QWORD PTR def$[rsp]
	mov	QWORD PTR _p$133[rsp], rax
$LN132@ParamsSetu:
	mov	eax, DWORD PTR _t$40[rsp]
	mov	DWORD PTR tv956[rsp], eax
	mov	eax, DWORD PTR _t$40[rsp]
	dec	eax
	mov	DWORD PTR _t$40[rsp], eax
	cmp	DWORD PTR tv956[rsp], 0
	je	SHORT $LN131@ParamsSetu
	mov	rax, QWORD PTR _p$133[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR _p$133[rsp]
	inc	rax
	mov	QWORD PTR _p$133[rsp], rax
	jmp	SHORT $LN132@ParamsSetu
$LN131@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN135@ParamsSetu
$LN130@ParamsSetu:

; 282  : 	PF_ADD_POPUP("Direction",
; 283  : 		3,
; 284  : 		3,
; 285  : 		"Left|Right|Both",
; 286  : 		35);

	mov	DWORD PTR priv_err$42[rsp], 0
	mov	DWORD PTR def$[rsp+12], 7
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rax, QWORD PTR [rax+176]
	lea	rdx, OFFSET FLAT:$SG118557
	lea	rcx, QWORD PTR def$[rsp+16]
	call	QWORD PTR [rax+336]
	mov	eax, 3
	mov	WORD PTR def$[rsp+60], ax
	mov	eax, 3
	mov	WORD PTR def$[rsp+62], ax
	mov	DWORD PTR def$[rsp+56], 3
	lea	rax, OFFSET FLAT:$SG118558
	mov	QWORD PTR def$[rsp+64], rax
	mov	DWORD PTR def$[rsp], 35			; 00000023H
	lea	r8, QWORD PTR def$[rsp]
	mov	edx, -1
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rcx, QWORD PTR [rax+184]
	mov	rax, QWORD PTR in_data$[rsp]
	call	QWORD PTR [rax+16]
	mov	DWORD PTR priv_err$42[rsp], eax
	cmp	DWORD PTR priv_err$42[rsp], 0
	je	SHORT $LN127@ParamsSetu
	mov	eax, DWORD PTR priv_err$42[rsp]
	jmp	$LN442@ParamsSetu
$LN127@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	$LN130@ParamsSetu
$LN126@ParamsSetu:

; 287  : 
; 288  : 	AEFX_CLR_STRUCT(def);

	mov	DWORD PTR _t$44[rsp], 176		; 000000b0H
	lea	rax, QWORD PTR def$[rsp]
	mov	QWORD PTR _p$134[rsp], rax
$LN123@ParamsSetu:
	mov	eax, DWORD PTR _t$44[rsp]
	mov	DWORD PTR tv975[rsp], eax
	mov	eax, DWORD PTR _t$44[rsp]
	dec	eax
	mov	DWORD PTR _t$44[rsp], eax
	cmp	DWORD PTR tv975[rsp], 0
	je	SHORT $LN122@ParamsSetu
	mov	rax, QWORD PTR _p$134[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR _p$134[rsp]
	inc	rax
	mov	QWORD PTR _p$134[rsp], rax
	jmp	SHORT $LN123@ParamsSetu
$LN122@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN126@ParamsSetu
$LN121@ParamsSetu:

; 289  : 	PF_ADD_POPUP("Border",
; 290  : 		9,
; 291  : 		5,
; 292  : 		"None|Expand|Front|Mirror|Tile|Opposite mirrors|Scale‐up|Scale‐down|Render mirror",
; 293  : 		36);

	mov	DWORD PTR priv_err$46[rsp], 0
	mov	DWORD PTR def$[rsp+12], 7
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rax, QWORD PTR [rax+176]
	lea	rdx, OFFSET FLAT:$SG118573
	lea	rcx, QWORD PTR def$[rsp+16]
	call	QWORD PTR [rax+336]
	mov	eax, 9
	mov	WORD PTR def$[rsp+60], ax
	mov	eax, 5
	mov	WORD PTR def$[rsp+62], ax
	mov	DWORD PTR def$[rsp+56], 5
	lea	rax, OFFSET FLAT:$SG118574
	mov	QWORD PTR def$[rsp+64], rax
	mov	DWORD PTR def$[rsp], 36			; 00000024H
	lea	r8, QWORD PTR def$[rsp]
	mov	edx, -1
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rcx, QWORD PTR [rax+184]
	mov	rax, QWORD PTR in_data$[rsp]
	call	QWORD PTR [rax+16]
	mov	DWORD PTR priv_err$46[rsp], eax
	cmp	DWORD PTR priv_err$46[rsp], 0
	je	SHORT $LN118@ParamsSetu
	mov	eax, DWORD PTR priv_err$46[rsp]
	jmp	$LN442@ParamsSetu
$LN118@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	$LN121@ParamsSetu
$LN117@ParamsSetu:

; 294  : 
; 295  : 	AEFX_CLR_STRUCT(def);

	mov	DWORD PTR _t$48[rsp], 176		; 000000b0H
	lea	rax, QWORD PTR def$[rsp]
	mov	QWORD PTR _p$135[rsp], rax
$LN114@ParamsSetu:
	mov	eax, DWORD PTR _t$48[rsp]
	mov	DWORD PTR tv1026[rsp], eax
	mov	eax, DWORD PTR _t$48[rsp]
	dec	eax
	mov	DWORD PTR _t$48[rsp], eax
	cmp	DWORD PTR tv1026[rsp], 0
	je	SHORT $LN113@ParamsSetu
	mov	rax, QWORD PTR _p$135[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR _p$135[rsp]
	inc	rax
	mov	QWORD PTR _p$135[rsp], rax
	jmp	SHORT $LN114@ParamsSetu
$LN113@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN117@ParamsSetu
$LN112@ParamsSetu:

; 296  : 	PF_ADD_PERCENT("Amount",
; 297  : 		5,
; 298  : 		37);

	mov	DWORD PTR priv_err$50[rsp], 0
	mov	DWORD PTR def$[rsp+12], 2
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rax, QWORD PTR [rax+176]
	lea	rdx, OFFSET FLAT:$SG118589
	lea	rcx, QWORD PTR def$[rsp+16]
	call	QWORD PTR [rax+336]
	mov	eax, 1
	imul	rax, rax, 0
	mov	BYTE PTR def$[rsp+rax+60], 0
	mov	eax, 1
	imul	rax, rax, 0
	mov	BYTE PTR def$[rsp+rax+92], 0
	mov	DWORD PTR def$[rsp+124], 0
	mov	DWORD PTR def$[rsp+132], 0
	mov	DWORD PTR def$[rsp+128], 6553600	; 00640000H
	mov	DWORD PTR def$[rsp+136], 6553600	; 00640000H
	mov	DWORD PTR def$[rsp+140], 327680		; 00050000H
	mov	eax, DWORD PTR def$[rsp+140]
	mov	DWORD PTR def$[rsp+56], eax
	mov	eax, 1
	mov	WORD PTR def$[rsp+144], ax
	movsx	eax, WORD PTR def$[rsp+146]
	or	eax, 1
	mov	WORD PTR def$[rsp+146], ax
	mov	eax, DWORD PTR def$[rsp+48]
	mov	DWORD PTR def$[rsp+48], eax
	mov	DWORD PTR def$[rsp], 37			; 00000025H
	lea	r8, QWORD PTR def$[rsp]
	mov	edx, -1
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rcx, QWORD PTR [rax+184]
	mov	rax, QWORD PTR in_data$[rsp]
	call	QWORD PTR [rax+16]
	mov	DWORD PTR priv_err$50[rsp], eax
	cmp	DWORD PTR priv_err$50[rsp], 0
	je	SHORT $LN109@ParamsSetu
	mov	eax, DWORD PTR priv_err$50[rsp]
	jmp	$LN442@ParamsSetu
$LN109@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	$LN112@ParamsSetu
$LN108@ParamsSetu:

; 299  : 
; 300  : 	AEFX_CLR_STRUCT(def);

	mov	DWORD PTR _t$52[rsp], 176		; 000000b0H
	lea	rax, QWORD PTR def$[rsp]
	mov	QWORD PTR _p$136[rsp], rax
$LN105@ParamsSetu:
	mov	eax, DWORD PTR _t$52[rsp]
	mov	DWORD PTR tv1052[rsp], eax
	mov	eax, DWORD PTR _t$52[rsp]
	dec	eax
	mov	DWORD PTR _t$52[rsp], eax
	cmp	DWORD PTR tv1052[rsp], 0
	je	SHORT $LN104@ParamsSetu
	mov	rax, QWORD PTR _p$136[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR _p$136[rsp]
	inc	rax
	mov	QWORD PTR _p$136[rsp], rax
	jmp	SHORT $LN105@ParamsSetu
$LN104@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN108@ParamsSetu
$LN103@ParamsSetu:

; 301  : 	PF_END_TOPIC(38);

	mov	DWORD PTR priv_err$54[rsp], 0
	mov	DWORD PTR def$[rsp+12], 14
	mov	DWORD PTR def$[rsp], 38			; 00000026H
	lea	r8, QWORD PTR def$[rsp]
	mov	edx, -1
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rcx, QWORD PTR [rax+184]
	mov	rax, QWORD PTR in_data$[rsp]
	call	QWORD PTR [rax+16]
	mov	DWORD PTR priv_err$54[rsp], eax
	cmp	DWORD PTR priv_err$54[rsp], 0
	je	SHORT $LN100@ParamsSetu
	mov	eax, DWORD PTR priv_err$54[rsp]
	jmp	$LN442@ParamsSetu
$LN100@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN103@ParamsSetu
$LN99@ParamsSetu:

; 302  : 
; 303  : 	AEFX_CLR_STRUCT(def);

	mov	DWORD PTR _t$56[rsp], 176		; 000000b0H
	lea	rax, QWORD PTR def$[rsp]
	mov	QWORD PTR _p$137[rsp], rax
$LN96@ParamsSetu:
	mov	eax, DWORD PTR _t$56[rsp]
	mov	DWORD PTR tv1066[rsp], eax
	mov	eax, DWORD PTR _t$56[rsp]
	dec	eax
	mov	DWORD PTR _t$56[rsp], eax
	cmp	DWORD PTR tv1066[rsp], 0
	je	SHORT $LN95@ParamsSetu
	mov	rax, QWORD PTR _p$137[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR _p$137[rsp]
	inc	rax
	mov	QWORD PTR _p$137[rsp], rax
	jmp	SHORT $LN96@ParamsSetu
$LN95@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN99@ParamsSetu
$LN94@ParamsSetu:

; 304  : 	PF_ADD_TOPIC("レイヤーミックス",
; 305  : 		39);

	mov	DWORD PTR priv_err$58[rsp], 0
	mov	DWORD PTR def$[rsp+12], 13
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rax, QWORD PTR [rax+176]
	lea	rdx, OFFSET FLAT:$SG118625
	lea	rcx, QWORD PTR def$[rsp+16]
	call	QWORD PTR [rax+336]
	mov	DWORD PTR def$[rsp], 39			; 00000027H
	lea	r8, QWORD PTR def$[rsp]
	mov	edx, -1
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rcx, QWORD PTR [rax+184]
	mov	rax, QWORD PTR in_data$[rsp]
	call	QWORD PTR [rax+16]
	mov	DWORD PTR priv_err$58[rsp], eax
	cmp	DWORD PTR priv_err$58[rsp], 0
	je	SHORT $LN91@ParamsSetu
	mov	eax, DWORD PTR priv_err$58[rsp]
	jmp	$LN442@ParamsSetu
$LN91@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	$LN94@ParamsSetu
$LN90@ParamsSetu:

; 306  : 
; 307  : 	AEFX_CLR_STRUCT(def);

	mov	DWORD PTR _t$60[rsp], 176		; 000000b0H
	lea	rax, QWORD PTR def$[rsp]
	mov	QWORD PTR _p$138[rsp], rax
$LN87@ParamsSetu:
	mov	eax, DWORD PTR _t$60[rsp]
	mov	DWORD PTR tv1085[rsp], eax
	mov	eax, DWORD PTR _t$60[rsp]
	dec	eax
	mov	DWORD PTR _t$60[rsp], eax
	cmp	DWORD PTR tv1085[rsp], 0
	je	SHORT $LN86@ParamsSetu
	mov	rax, QWORD PTR _p$138[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR _p$138[rsp]
	inc	rax
	mov	QWORD PTR _p$138[rsp], rax
	jmp	SHORT $LN87@ParamsSetu
$LN86@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN90@ParamsSetu

; 308  : 	def.flags = PF_ParamFlag_SUPERVISE;

	mov	DWORD PTR def$[rsp+48], 64		; 00000040H
$LN85@ParamsSetu:

; 309  : 	PF_ADD_CHECKBOX("レイヤーミックスを使用",
; 310  : 		"Enabled",
; 311  : 		FALSE,
; 312  : 		0,
; 313  : 		40);

	mov	DWORD PTR priv_err$62[rsp], 0
	mov	DWORD PTR def$[rsp+12], 4
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rax, QWORD PTR [rax+176]
	lea	rdx, OFFSET FLAT:$SG118640
	lea	rcx, QWORD PTR def$[rsp+16]
	call	QWORD PTR [rax+336]
	lea	rax, OFFSET FLAT:$SG118641
	mov	QWORD PTR def$[rsp+64], rax
	mov	DWORD PTR def$[rsp+56], 0
	mov	BYTE PTR def$[rsp+60], 0
	mov	eax, DWORD PTR def$[rsp+48]
	mov	DWORD PTR def$[rsp+48], eax
	mov	DWORD PTR def$[rsp], 40			; 00000028H
	lea	r8, QWORD PTR def$[rsp]
	mov	edx, -1
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rcx, QWORD PTR [rax+184]
	mov	rax, QWORD PTR in_data$[rsp]
	call	QWORD PTR [rax+16]
	mov	DWORD PTR priv_err$62[rsp], eax
	cmp	DWORD PTR priv_err$62[rsp], 0
	je	SHORT $LN82@ParamsSetu
	mov	eax, DWORD PTR priv_err$62[rsp]
	jmp	$LN442@ParamsSetu
$LN82@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	$LN85@ParamsSetu
$LN81@ParamsSetu:

; 314  : 
; 315  : 	AEFX_CLR_STRUCT(def);

	mov	DWORD PTR _t$64[rsp], 176		; 000000b0H
	lea	rax, QWORD PTR def$[rsp]
	mov	QWORD PTR _p$139[rsp], rax
$LN78@ParamsSetu:
	mov	eax, DWORD PTR _t$64[rsp]
	mov	DWORD PTR tv1104[rsp], eax
	mov	eax, DWORD PTR _t$64[rsp]
	dec	eax
	mov	DWORD PTR _t$64[rsp], eax
	cmp	DWORD PTR tv1104[rsp], 0
	je	SHORT $LN77@ParamsSetu
	mov	rax, QWORD PTR _p$139[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR _p$139[rsp]
	inc	rax
	mov	QWORD PTR _p$139[rsp], rax
	jmp	SHORT $LN78@ParamsSetu
$LN77@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN81@ParamsSetu
$LN76@ParamsSetu:

; 316  : 	PF_ADD_PERCENT("Frequency",
; 317  : 		30,
; 318  : 		41);

	mov	DWORD PTR priv_err$66[rsp], 0
	mov	DWORD PTR def$[rsp+12], 2
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rax, QWORD PTR [rax+176]
	lea	rdx, OFFSET FLAT:$SG118656
	lea	rcx, QWORD PTR def$[rsp+16]
	call	QWORD PTR [rax+336]
	mov	eax, 1
	imul	rax, rax, 0
	mov	BYTE PTR def$[rsp+rax+60], 0
	mov	eax, 1
	imul	rax, rax, 0
	mov	BYTE PTR def$[rsp+rax+92], 0
	mov	DWORD PTR def$[rsp+124], 0
	mov	DWORD PTR def$[rsp+132], 0
	mov	DWORD PTR def$[rsp+128], 6553600	; 00640000H
	mov	DWORD PTR def$[rsp+136], 6553600	; 00640000H
	mov	DWORD PTR def$[rsp+140], 1966080	; 001e0000H
	mov	eax, DWORD PTR def$[rsp+140]
	mov	DWORD PTR def$[rsp+56], eax
	mov	eax, 1
	mov	WORD PTR def$[rsp+144], ax
	movsx	eax, WORD PTR def$[rsp+146]
	or	eax, 1
	mov	WORD PTR def$[rsp+146], ax
	mov	eax, DWORD PTR def$[rsp+48]
	mov	DWORD PTR def$[rsp+48], eax
	mov	DWORD PTR def$[rsp], 41			; 00000029H
	lea	r8, QWORD PTR def$[rsp]
	mov	edx, -1
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rcx, QWORD PTR [rax+184]
	mov	rax, QWORD PTR in_data$[rsp]
	call	QWORD PTR [rax+16]
	mov	DWORD PTR priv_err$66[rsp], eax
	cmp	DWORD PTR priv_err$66[rsp], 0
	je	SHORT $LN73@ParamsSetu
	mov	eax, DWORD PTR priv_err$66[rsp]
	jmp	$LN442@ParamsSetu
$LN73@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	$LN76@ParamsSetu
$LN72@ParamsSetu:

; 319  : 
; 320  : 	AEFX_CLR_STRUCT(def);

	mov	DWORD PTR _t$68[rsp], 176		; 000000b0H
	lea	rax, QWORD PTR def$[rsp]
	mov	QWORD PTR _p$140[rsp], rax
$LN69@ParamsSetu:
	mov	eax, DWORD PTR _t$68[rsp]
	mov	DWORD PTR tv1130[rsp], eax
	mov	eax, DWORD PTR _t$68[rsp]
	dec	eax
	mov	DWORD PTR _t$68[rsp], eax
	cmp	DWORD PTR tv1130[rsp], 0
	je	SHORT $LN68@ParamsSetu
	mov	rax, QWORD PTR _p$140[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR _p$140[rsp]
	inc	rax
	mov	QWORD PTR _p$140[rsp], rax
	jmp	SHORT $LN69@ParamsSetu
$LN68@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN72@ParamsSetu
$LN67@ParamsSetu:

; 321  : 	PF_ADD_LAYER("Source",
; 322  : 		PF_LayerDefault_NONE,
; 323  : 		42);

	mov	DWORD PTR priv_err$70[rsp], 0
	mov	DWORD PTR def$[rsp+12], 0
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rax, QWORD PTR [rax+176]
	lea	rdx, OFFSET FLAT:$SG118678
	lea	rcx, QWORD PTR def$[rsp+16]
	call	QWORD PTR [rax+336]
	mov	DWORD PTR def$[rsp+172], 0
	mov	DWORD PTR def$[rsp], 42			; 0000002aH
	lea	r8, QWORD PTR def$[rsp]
	mov	edx, -1
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rcx, QWORD PTR [rax+184]
	mov	rax, QWORD PTR in_data$[rsp]
	call	QWORD PTR [rax+16]
	mov	DWORD PTR priv_err$70[rsp], eax
	cmp	DWORD PTR priv_err$70[rsp], 0
	je	SHORT $LN64@ParamsSetu
	mov	eax, DWORD PTR priv_err$70[rsp]
	jmp	$LN442@ParamsSetu
$LN64@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	$LN67@ParamsSetu
$LN63@ParamsSetu:

; 324  : 
; 325  : 	AEFX_CLR_STRUCT(def);

	mov	DWORD PTR _t$72[rsp], 176		; 000000b0H
	lea	rax, QWORD PTR def$[rsp]
	mov	QWORD PTR _p$141[rsp], rax
$LN60@ParamsSetu:
	mov	eax, DWORD PTR _t$72[rsp]
	mov	DWORD PTR tv1149[rsp], eax
	mov	eax, DWORD PTR _t$72[rsp]
	dec	eax
	mov	DWORD PTR _t$72[rsp], eax
	cmp	DWORD PTR tv1149[rsp], 0
	je	SHORT $LN59@ParamsSetu
	mov	rax, QWORD PTR _p$141[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR _p$141[rsp]
	inc	rax
	mov	QWORD PTR _p$141[rsp], rax
	jmp	SHORT $LN60@ParamsSetu
$LN59@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN63@ParamsSetu
$LN58@ParamsSetu:

; 326  : 	PF_ADD_POPUP("Source Position",
; 327  : 		2,
; 328  : 		1,
; 329  : 		"Source|Random",
; 330  : 		43);

	mov	DWORD PTR priv_err$74[rsp], 0
	mov	DWORD PTR def$[rsp+12], 7
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rax, QWORD PTR [rax+176]
	lea	rdx, OFFSET FLAT:$SG118693
	lea	rcx, QWORD PTR def$[rsp+16]
	call	QWORD PTR [rax+336]
	mov	eax, 2
	mov	WORD PTR def$[rsp+60], ax
	mov	eax, 1
	mov	WORD PTR def$[rsp+62], ax
	mov	DWORD PTR def$[rsp+56], 1
	lea	rax, OFFSET FLAT:$SG118694
	mov	QWORD PTR def$[rsp+64], rax
	mov	DWORD PTR def$[rsp], 43			; 0000002bH
	lea	r8, QWORD PTR def$[rsp]
	mov	edx, -1
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rcx, QWORD PTR [rax+184]
	mov	rax, QWORD PTR in_data$[rsp]
	call	QWORD PTR [rax+16]
	mov	DWORD PTR priv_err$74[rsp], eax
	cmp	DWORD PTR priv_err$74[rsp], 0
	je	SHORT $LN55@ParamsSetu
	mov	eax, DWORD PTR priv_err$74[rsp]
	jmp	$LN442@ParamsSetu
$LN55@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	$LN58@ParamsSetu
$LN54@ParamsSetu:

; 331  : 
; 332  : 	AEFX_CLR_STRUCT(def);

	mov	DWORD PTR _t$76[rsp], 176		; 000000b0H
	lea	rax, QWORD PTR def$[rsp]
	mov	QWORD PTR _p$142[rsp], rax
$LN51@ParamsSetu:
	mov	eax, DWORD PTR _t$76[rsp]
	mov	DWORD PTR tv1168[rsp], eax
	mov	eax, DWORD PTR _t$76[rsp]
	dec	eax
	mov	DWORD PTR _t$76[rsp], eax
	cmp	DWORD PTR tv1168[rsp], 0
	je	SHORT $LN50@ParamsSetu
	mov	rax, QWORD PTR _p$142[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR _p$142[rsp]
	inc	rax
	mov	QWORD PTR _p$142[rsp], rax
	jmp	SHORT $LN51@ParamsSetu
$LN50@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN54@ParamsSetu
$LN49@ParamsSetu:

; 333  : 	PF_END_TOPIC(44);

	mov	DWORD PTR priv_err$78[rsp], 0
	mov	DWORD PTR def$[rsp+12], 14
	mov	DWORD PTR def$[rsp], 44			; 0000002cH
	lea	r8, QWORD PTR def$[rsp]
	mov	edx, -1
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rcx, QWORD PTR [rax+184]
	mov	rax, QWORD PTR in_data$[rsp]
	call	QWORD PTR [rax+16]
	mov	DWORD PTR priv_err$78[rsp], eax
	cmp	DWORD PTR priv_err$78[rsp], 0
	je	SHORT $LN46@ParamsSetu
	mov	eax, DWORD PTR priv_err$78[rsp]
	jmp	$LN442@ParamsSetu
$LN46@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN49@ParamsSetu
$LN45@ParamsSetu:

; 334  : 
; 335  : 	AEFX_CLR_STRUCT(def);

	mov	DWORD PTR _t$80[rsp], 176		; 000000b0H
	lea	rax, QWORD PTR def$[rsp]
	mov	QWORD PTR _p$143[rsp], rax
$LN42@ParamsSetu:
	mov	eax, DWORD PTR _t$80[rsp]
	mov	DWORD PTR tv1182[rsp], eax
	mov	eax, DWORD PTR _t$80[rsp]
	dec	eax
	mov	DWORD PTR _t$80[rsp], eax
	cmp	DWORD PTR tv1182[rsp], 0
	je	SHORT $LN41@ParamsSetu
	mov	rax, QWORD PTR _p$143[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR _p$143[rsp]
	inc	rax
	mov	QWORD PTR _p$143[rsp], rax
	jmp	SHORT $LN42@ParamsSetu
$LN41@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN45@ParamsSetu
$LN40@ParamsSetu:

; 336  : 	PF_ADD_TOPIC("フリーザー",
; 337  : 		45);

	mov	DWORD PTR priv_err$82[rsp], 0
	mov	DWORD PTR def$[rsp+12], 13
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rax, QWORD PTR [rax+176]
	lea	rdx, OFFSET FLAT:$SG118723
	lea	rcx, QWORD PTR def$[rsp+16]
	call	QWORD PTR [rax+336]
	mov	DWORD PTR def$[rsp], 45			; 0000002dH
	lea	r8, QWORD PTR def$[rsp]
	mov	edx, -1
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rcx, QWORD PTR [rax+184]
	mov	rax, QWORD PTR in_data$[rsp]
	call	QWORD PTR [rax+16]
	mov	DWORD PTR priv_err$82[rsp], eax
	cmp	DWORD PTR priv_err$82[rsp], 0
	je	SHORT $LN37@ParamsSetu
	mov	eax, DWORD PTR priv_err$82[rsp]
	jmp	$LN442@ParamsSetu
$LN37@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	$LN40@ParamsSetu
$LN36@ParamsSetu:

; 338  : 
; 339  : 	AEFX_CLR_STRUCT(def);

	mov	DWORD PTR _t$84[rsp], 176		; 000000b0H
	lea	rax, QWORD PTR def$[rsp]
	mov	QWORD PTR _p$144[rsp], rax
$LN33@ParamsSetu:
	mov	eax, DWORD PTR _t$84[rsp]
	mov	DWORD PTR tv1201[rsp], eax
	mov	eax, DWORD PTR _t$84[rsp]
	dec	eax
	mov	DWORD PTR _t$84[rsp], eax
	cmp	DWORD PTR tv1201[rsp], 0
	je	SHORT $LN32@ParamsSetu
	mov	rax, QWORD PTR _p$144[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR _p$144[rsp]
	inc	rax
	mov	QWORD PTR _p$144[rsp], rax
	jmp	SHORT $LN33@ParamsSetu
$LN32@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN36@ParamsSetu

; 340  : 	def.flags = PF_ParamFlag_SUPERVISE;

	mov	DWORD PTR def$[rsp+48], 64		; 00000040H
$LN31@ParamsSetu:

; 341  : 	PF_ADD_CHECKBOX("フリーザーを使用",
; 342  : 		"Enabled",
; 343  : 		FALSE,
; 344  : 		0,
; 345  : 		46);

	mov	DWORD PTR priv_err$86[rsp], 0
	mov	DWORD PTR def$[rsp+12], 4
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rax, QWORD PTR [rax+176]
	lea	rdx, OFFSET FLAT:$SG118738
	lea	rcx, QWORD PTR def$[rsp+16]
	call	QWORD PTR [rax+336]
	lea	rax, OFFSET FLAT:$SG118739
	mov	QWORD PTR def$[rsp+64], rax
	mov	DWORD PTR def$[rsp+56], 0
	mov	BYTE PTR def$[rsp+60], 0
	mov	eax, DWORD PTR def$[rsp+48]
	mov	DWORD PTR def$[rsp+48], eax
	mov	DWORD PTR def$[rsp], 46			; 0000002eH
	lea	r8, QWORD PTR def$[rsp]
	mov	edx, -1
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rcx, QWORD PTR [rax+184]
	mov	rax, QWORD PTR in_data$[rsp]
	call	QWORD PTR [rax+16]
	mov	DWORD PTR priv_err$86[rsp], eax
	cmp	DWORD PTR priv_err$86[rsp], 0
	je	SHORT $LN28@ParamsSetu
	mov	eax, DWORD PTR priv_err$86[rsp]
	jmp	$LN442@ParamsSetu
$LN28@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	$LN31@ParamsSetu
$LN27@ParamsSetu:

; 346  : 
; 347  : 	AEFX_CLR_STRUCT(def);

	mov	DWORD PTR _t$88[rsp], 176		; 000000b0H
	lea	rax, QWORD PTR def$[rsp]
	mov	QWORD PTR _p$145[rsp], rax
$LN24@ParamsSetu:
	mov	eax, DWORD PTR _t$88[rsp]
	mov	DWORD PTR tv1220[rsp], eax
	mov	eax, DWORD PTR _t$88[rsp]
	dec	eax
	mov	DWORD PTR _t$88[rsp], eax
	cmp	DWORD PTR tv1220[rsp], 0
	je	SHORT $LN23@ParamsSetu
	mov	rax, QWORD PTR _p$145[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR _p$145[rsp]
	inc	rax
	mov	QWORD PTR _p$145[rsp], rax
	jmp	SHORT $LN24@ParamsSetu
$LN23@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN27@ParamsSetu
$LN22@ParamsSetu:

; 348  : 	PF_ADD_PERCENT("Frequency",
; 349  : 		30,
; 350  : 		47);

	mov	DWORD PTR priv_err$90[rsp], 0
	mov	DWORD PTR def$[rsp+12], 2
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rax, QWORD PTR [rax+176]
	lea	rdx, OFFSET FLAT:$SG118754
	lea	rcx, QWORD PTR def$[rsp+16]
	call	QWORD PTR [rax+336]
	mov	eax, 1
	imul	rax, rax, 0
	mov	BYTE PTR def$[rsp+rax+60], 0
	mov	eax, 1
	imul	rax, rax, 0
	mov	BYTE PTR def$[rsp+rax+92], 0
	mov	DWORD PTR def$[rsp+124], 0
	mov	DWORD PTR def$[rsp+132], 0
	mov	DWORD PTR def$[rsp+128], 6553600	; 00640000H
	mov	DWORD PTR def$[rsp+136], 6553600	; 00640000H
	mov	DWORD PTR def$[rsp+140], 1966080	; 001e0000H
	mov	eax, DWORD PTR def$[rsp+140]
	mov	DWORD PTR def$[rsp+56], eax
	mov	eax, 1
	mov	WORD PTR def$[rsp+144], ax
	movsx	eax, WORD PTR def$[rsp+146]
	or	eax, 1
	mov	WORD PTR def$[rsp+146], ax
	mov	eax, DWORD PTR def$[rsp+48]
	mov	DWORD PTR def$[rsp+48], eax
	mov	DWORD PTR def$[rsp], 47			; 0000002fH
	lea	r8, QWORD PTR def$[rsp]
	mov	edx, -1
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rcx, QWORD PTR [rax+184]
	mov	rax, QWORD PTR in_data$[rsp]
	call	QWORD PTR [rax+16]
	mov	DWORD PTR priv_err$90[rsp], eax
	cmp	DWORD PTR priv_err$90[rsp], 0
	je	SHORT $LN19@ParamsSetu
	mov	eax, DWORD PTR priv_err$90[rsp]
	jmp	$LN442@ParamsSetu
$LN19@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	$LN22@ParamsSetu
$LN18@ParamsSetu:

; 351  : 
; 352  : 	AEFX_CLR_STRUCT(def);

	mov	DWORD PTR _t$92[rsp], 176		; 000000b0H
	lea	rax, QWORD PTR def$[rsp]
	mov	QWORD PTR _p$146[rsp], rax
$LN15@ParamsSetu:
	mov	eax, DWORD PTR _t$92[rsp]
	mov	DWORD PTR tv1246[rsp], eax
	mov	eax, DWORD PTR _t$92[rsp]
	dec	eax
	mov	DWORD PTR _t$92[rsp], eax
	cmp	DWORD PTR tv1246[rsp], 0
	je	SHORT $LN14@ParamsSetu
	mov	rax, QWORD PTR _p$146[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR _p$146[rsp]
	inc	rax
	mov	QWORD PTR _p$146[rsp], rax
	jmp	SHORT $LN15@ParamsSetu
$LN14@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN18@ParamsSetu
$LN13@ParamsSetu:

; 353  : 	PF_ADD_SLIDER("Time",
; 354  : 		1,
; 355  : 		1024,
; 356  : 		1,
; 357  : 		32,
; 358  : 		8,
; 359  : 		48);

	mov	DWORD PTR priv_err$94[rsp], 0
	mov	DWORD PTR def$[rsp+12], 1
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rax, QWORD PTR [rax+176]
	lea	rdx, OFFSET FLAT:$SG118776
	lea	rcx, QWORD PTR def$[rsp+16]
	call	QWORD PTR [rax+336]
	mov	eax, 1
	imul	rax, rax, 0
	mov	BYTE PTR def$[rsp+rax+60], 0
	mov	eax, 1
	imul	rax, rax, 0
	mov	BYTE PTR def$[rsp+rax+92], 0
	mov	DWORD PTR def$[rsp+124], 1
	mov	DWORD PTR def$[rsp+132], 1
	mov	DWORD PTR def$[rsp+128], 1024		; 00000400H
	mov	DWORD PTR def$[rsp+136], 32		; 00000020H
	mov	DWORD PTR def$[rsp+140], 8
	mov	eax, DWORD PTR def$[rsp+140]
	mov	DWORD PTR def$[rsp+56], eax
	mov	DWORD PTR def$[rsp], 48			; 00000030H
	lea	r8, QWORD PTR def$[rsp]
	mov	edx, -1
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rcx, QWORD PTR [rax+184]
	mov	rax, QWORD PTR in_data$[rsp]
	call	QWORD PTR [rax+16]
	mov	DWORD PTR priv_err$94[rsp], eax
	cmp	DWORD PTR priv_err$94[rsp], 0
	je	SHORT $LN10@ParamsSetu
	mov	eax, DWORD PTR priv_err$94[rsp]
	jmp	$LN442@ParamsSetu
$LN10@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	$LN13@ParamsSetu
$LN9@ParamsSetu:

; 360  : 
; 361  : 	AEFX_CLR_STRUCT(def);

	mov	DWORD PTR _t$96[rsp], 176		; 000000b0H
	lea	rax, QWORD PTR def$[rsp]
	mov	QWORD PTR _p$147[rsp], rax
$LN6@ParamsSetu:
	mov	eax, DWORD PTR _t$96[rsp]
	mov	DWORD PTR tv1301[rsp], eax
	mov	eax, DWORD PTR _t$96[rsp]
	dec	eax
	mov	DWORD PTR _t$96[rsp], eax
	cmp	DWORD PTR tv1301[rsp], 0
	je	SHORT $LN5@ParamsSetu
	mov	rax, QWORD PTR _p$147[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR _p$147[rsp]
	inc	rax
	mov	QWORD PTR _p$147[rsp], rax
	jmp	SHORT $LN6@ParamsSetu
$LN5@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN9@ParamsSetu
$LN4@ParamsSetu:

; 362  : 	PF_END_TOPIC(49);

	mov	DWORD PTR priv_err$98[rsp], 0
	mov	DWORD PTR def$[rsp+12], 14
	mov	DWORD PTR def$[rsp], 49			; 00000031H
	lea	r8, QWORD PTR def$[rsp]
	mov	edx, -1
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rcx, QWORD PTR [rax+184]
	mov	rax, QWORD PTR in_data$[rsp]
	call	QWORD PTR [rax+16]
	mov	DWORD PTR priv_err$98[rsp], eax
	cmp	DWORD PTR priv_err$98[rsp], 0
	je	SHORT $LN1@ParamsSetu
	mov	eax, DWORD PTR priv_err$98[rsp]
	jmp	SHORT $LN442@ParamsSetu
$LN1@ParamsSetu:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN4@ParamsSetu

; 363  : 
; 364  : 	out_data->num_params = GLITCH_NUM_PARAMS;

	mov	rax, QWORD PTR out_data$[rsp]
	mov	DWORD PTR [rax+48], 50			; 00000032H

; 365  : 
; 366  : 	return err;

	mov	eax, DWORD PTR err$[rsp]
$LN442@ParamsSetu:

; 367  : }

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 1416				; 00000588H
	ret	0
?ParamsSetup@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z ENDP ; ParamsSetup
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\syuilo\documents\visual studio 2013\projects\after_effects_cs5_sdk_win\adobe after effects cs5 win sdk\examples\template\glitch\glitch.cpp
_TEXT	SEGMENT
in_data$ = 8
out_data$ = 16
params$ = 24
output$ = 32
?GlobalSetup@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z PROC ; GlobalSetup

; 30   : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx

; 31   : 	out_data->my_version = PF_VERSION(MAJOR_VERSION,
; 32   : 		MINOR_VERSION,
; 33   : 		BUG_VERSION,
; 34   : 		STAGE_VERSION,
; 35   : 		BUILD_VERSION);

	mov	rax, QWORD PTR out_data$[rsp]
	mov	DWORD PTR [rax], 524289			; 00080001H

; 36   : 
; 37   : 	out_data->out_flags = PF_OutFlag_DEEP_COLOR_AWARE |	// just 16bpc, not 32bpc
; 38   : 		PF_OutFlag_I_EXPAND_BUFFER |
; 39   : 		PF_OutFlag_I_HAVE_EXTERNAL_DEPENDENCIES |
; 40   : 		PF_OutFlag_SEND_UPDATE_PARAMS_UI;

	mov	rax, QWORD PTR out_data$[rsp]
	mov	DWORD PTR [rax+96], 117441024		; 07000200H

; 41   : 
; 42   : 	out_data->out_flags2 = PF_OutFlag2_SUPPORTS_QUERY_DYNAMIC_FLAGS;

	mov	rax, QWORD PTR out_data$[rsp]
	mov	DWORD PTR [rax+400], 1

; 43   : 
; 44   : 	return PF_Err_NONE;

	xor	eax, eax

; 45   : }

	ret	0
?GlobalSetup@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z ENDP ; GlobalSetup
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\syuilo\documents\visual studio 2013\projects\after_effects_cs5_sdk_win\adobe after effects cs5 win sdk\examples\template\glitch\glitch.cpp
_TEXT	SEGMENT
$T1 = 48
tv78 = 56
tv82 = 64
tv73 = 72
$T2 = 80
suites$ = 96
in_data$ = 976
out_data$ = 984
params$ = 992
output$ = 1000
?About@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z PROC ; About

; 14   : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 968				; 000003c8H
	mov	QWORD PTR $T2[rsp], -2

; 15   : 	AEGP_SuiteHandler suites(in_data->pica_basicP);

	mov	rax, QWORD PTR in_data$[rsp]
	mov	rdx, QWORD PTR [rax+384]
	lea	rcx, QWORD PTR suites$[rsp]
	call	??0AEGP_SuiteHandler@@QEAA@PEBUSPBasicSuite@@@Z ; AEGP_SuiteHandler::AEGP_SuiteHandler
	npad	1

; 16   : 
; 17   : 	suites.ANSICallbacksSuite1()->sprintf(out_data->return_msg,
; 18   : 		"%s v%d.%d\r%s",
; 19   : 		STR(StrID_Name),
; 20   : 		MAJOR_VERSION,
; 21   : 		MINOR_VERSION,
; 22   : 		STR(StrID_Description));

	mov	ecx, 2
	call	GetStringPtr
	mov	QWORD PTR tv73[rsp], rax
	mov	ecx, 1
	call	GetStringPtr
	mov	QWORD PTR tv78[rsp], rax
	mov	rcx, QWORD PTR out_data$[rsp]
	add	rcx, 100				; 00000064H
	mov	QWORD PTR tv82[rsp], rcx
	lea	rcx, QWORD PTR suites$[rsp]
	call	?ANSICallbacksSuite1@AEGP_SuiteHandler@@QEBAPEAUPF_ANSICallbacksSuite1@@XZ ; AEGP_SuiteHandler::ANSICallbacksSuite1
	mov	rcx, QWORD PTR tv73[rsp]
	mov	QWORD PTR [rsp+40], rcx
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 1
	mov	rcx, QWORD PTR tv78[rsp]
	mov	r8, rcx
	lea	rdx, OFFSET FLAT:$SG117954
	mov	rcx, QWORD PTR tv82[rsp]
	call	QWORD PTR [rax+120]

; 23   : 
; 24   : 	ShellExecute(NULL, "open", "http://syuilo.com", NULL, NULL, SW_SHOW);

	mov	DWORD PTR [rsp+40], 5
	mov	QWORD PTR [rsp+32], 0
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG117955
	lea	rdx, OFFSET FLAT:$SG117956
	xor	ecx, ecx
	call	QWORD PTR __imp_ShellExecuteA

; 25   : 
; 26   : 	return PF_Err_NONE;

	mov	DWORD PTR $T1[rsp], 0
	lea	rcx, QWORD PTR suites$[rsp]
	call	??1AEGP_SuiteHandler@@QEAA@XZ		; AEGP_SuiteHandler::~AEGP_SuiteHandler
	mov	eax, DWORD PTR $T1[rsp]

; 27   : }

	add	rsp, 968				; 000003c8H
	ret	0
?About@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z ENDP ; About
_TEXT	ENDS
; Function compile flags: /Odtp
text$x	SEGMENT
$T1 = 48
tv78 = 56
tv82 = 64
tv73 = 72
$T2 = 80
suites$ = 96
in_data$ = 976
out_data$ = 984
params$ = 992
output$ = 1000
?dtor$0@?0??About@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z@4HA PROC ; `About'::`1'::dtor$0
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
	lea	rcx, QWORD PTR suites$[rbp]
	call	??1AEGP_SuiteHandler@@QEAA@XZ		; AEGP_SuiteHandler::~AEGP_SuiteHandler
	add	rsp, 32					; 00000020H
	pop	rbp
	ret	0
?dtor$0@?0??About@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z@4HA ENDP ; `About'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp
; File c:\users\syuilo\documents\visual studio 2013\projects\after_effects_cs5_sdk_win\adobe after effects cs5 win sdk\examples\template\glitch\glitch.cpp
_TEXT	SEGMENT
err$ = 32
tv79 = 36
tv150 = 40
$T1 = 44
tv417 = 48
tv453 = 56
tv144 = 64
tv465 = 72
tv203 = 80
tv477 = 88
tv227 = 96
tv515 = 104
tv345 = 112
tv527 = 120
tv369 = 128
tv539 = 136
tv393 = 144
tv551 = 152
tv132 = 160
tv583 = 168
tv441 = 176
tv595 = 184
tv215 = 192
tv607 = 200
tv357 = 208
tv165 = 216
tv405 = 224
tv239 = 232
tv429 = 240
tv381 = 248
$T2 = 256
suites$ = 272
$T3 = 1136
niP$ = 1376
$T4 = 1616
param_copy$ = 1856
__$ArrayPad$ = 10656
in_data$ = 10704
out_data$ = 10712
params$ = 10720
outputP$ = 10728
?UpdateParameterUI@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z PROC ; UpdateParameterUI

; 1028 : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	mov	eax, 10680				; 000029b8H
	call	__chkstk
	sub	rsp, rax
	mov	QWORD PTR $T2[rsp], -2
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 1029 : 	PF_Err err = PF_Err_NONE;

	mov	DWORD PTR err$[rsp], 0

; 1030 : 	AEGP_SuiteHandler suites(in_data->pica_basicP);

	mov	rax, QWORD PTR in_data$[rsp]
	mov	rdx, QWORD PTR [rax+384]
	lea	rcx, QWORD PTR suites$[rsp]
	call	??0AEGP_SuiteHandler@@QEAA@PEBUSPBasicSuite@@@Z ; AEGP_SuiteHandler::AEGP_SuiteHandler
	npad	1

; 1031 : 	ParamInfo niP = initParamsInfo(params, in_data);

	mov	r8, QWORD PTR in_data$[rsp]
	mov	rdx, QWORD PTR params$[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	call	?initParamsInfo@@YA?AUParamInfo@@QEAPEAUPF_ParamDef@@PEAUPF_InData@@@Z ; initParamsInfo
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 236				; 000000ecH
	rep movsb
	lea	rax, QWORD PTR niP$[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 236				; 000000ecH
	rep movsb
$LN132@UpdatePara:

; 1032 : 
; 1033 : 	PF_ParamDef param_copy[GLITCH_NUM_PARAMS];
; 1034 : 	ERR(MakeParamCopy(params, param_copy));

	cmp	DWORD PTR err$[rsp], 0
	jne	SHORT $LN129@UpdatePara
	lea	rdx, QWORD PTR param_copy$[rsp]
	mov	rcx, QWORD PTR params$[rsp]
	call	?MakeParamCopy@@YAJQEAPEAUPF_ParamDef@@QEAU1@@Z ; MakeParamCopy
	mov	DWORD PTR err$[rsp], eax
$LN129@UpdatePara:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN132@UpdatePara

; 1035 : 
; 1036 : 	switch (niP.scanline) {

	mov	eax, DWORD PTR niP$[rsp]
	mov	DWORD PTR tv79[rsp], eax
	cmp	DWORD PTR tv79[rsp], 1
	je	SHORT $LN126@UpdatePara
	cmp	DWORD PTR tv79[rsp], 2
	je	SHORT $LN125@UpdatePara
	jmp	SHORT $LN124@UpdatePara
$LN126@UpdatePara:

; 1037 : 		case 1:
; 1038 : 			param_copy[GLITCH_SCANLINE_POSITION].ui_flags = PF_PUI_DISABLED;

	mov	eax, 176				; 000000b0H
	imul	rax, rax, 2
	mov	DWORD PTR param_copy$[rsp+rax+4], 32	; 00000020H

; 1039 : 			param_copy[GLITCH_AREA_COUNT].ui_flags = PF_PUI_CONTROL;

	mov	eax, 176				; 000000b0H
	imul	rax, rax, 5
	mov	DWORD PTR param_copy$[rsp+rax+4], 2

; 1040 : 			break;

	jmp	SHORT $LN124@UpdatePara
$LN125@UpdatePara:

; 1041 : 		case 2:
; 1042 : 			param_copy[GLITCH_SCANLINE_POSITION].ui_flags = PF_PUI_CONTROL;

	mov	eax, 176				; 000000b0H
	imul	rax, rax, 2
	mov	DWORD PTR param_copy$[rsp+rax+4], 2

; 1043 : 			param_copy[GLITCH_AREA_COUNT].ui_flags = PF_PUI_DISABLED;

	mov	eax, 176				; 000000b0H
	imul	rax, rax, 5
	mov	DWORD PTR param_copy$[rsp+rax+4], 32	; 00000020H
$LN124@UpdatePara:

; 1044 : 			break;
; 1045 : 	}
; 1046 : 
; 1047 : 	ERR(suites.ParamUtilsSuite1()->PF_UpdateParamUI(in_data->effect_ref,
; 1048 : 		GLITCH_SCANLINE_POSITION,
; 1049 : 		&param_copy[GLITCH_SCANLINE_POSITION]));

	cmp	DWORD PTR err$[rsp], 0
	jne	SHORT $LN121@UpdatePara
	mov	eax, 176				; 000000b0H
	imul	rax, rax, 2
	lea	rax, QWORD PTR param_copy$[rsp+rax]
	mov	QWORD PTR tv132[rsp], rax
	lea	rcx, QWORD PTR suites$[rsp]
	call	?ParamUtilsSuite1@AEGP_SuiteHandler@@QEBAPEAUPF_ParamUtilsSuite1@@XZ ; AEGP_SuiteHandler::ParamUtilsSuite1
	mov	rcx, QWORD PTR tv132[rsp]
	mov	r8, rcx
	mov	edx, 2
	mov	rcx, QWORD PTR in_data$[rsp]
	mov	rcx, QWORD PTR [rcx+184]
	call	QWORD PTR [rax]
	mov	DWORD PTR err$[rsp], eax
$LN121@UpdatePara:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN124@UpdatePara
$LN120@UpdatePara:

; 1050 : 
; 1051 : 	ERR(suites.ParamUtilsSuite1()->PF_UpdateParamUI(in_data->effect_ref,
; 1052 : 		GLITCH_AREA_COUNT,
; 1053 : 		&param_copy[GLITCH_AREA_COUNT]));

	cmp	DWORD PTR err$[rsp], 0
	jne	SHORT $LN117@UpdatePara
	mov	eax, 176				; 000000b0H
	imul	rax, rax, 5
	lea	rax, QWORD PTR param_copy$[rsp+rax]
	mov	QWORD PTR tv144[rsp], rax
	lea	rcx, QWORD PTR suites$[rsp]
	call	?ParamUtilsSuite1@AEGP_SuiteHandler@@QEBAPEAUPF_ParamUtilsSuite1@@XZ ; AEGP_SuiteHandler::ParamUtilsSuite1
	mov	rcx, QWORD PTR tv144[rsp]
	mov	r8, rcx
	mov	edx, 5
	mov	rcx, QWORD PTR in_data$[rsp]
	mov	rcx, QWORD PTR [rcx+184]
	call	QWORD PTR [rax]
	mov	DWORD PTR err$[rsp], eax
$LN117@UpdatePara:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN120@UpdatePara

; 1054 : 
; 1055 : 	switch (niP.seedControl) {

	mov	eax, DWORD PTR niP$[rsp+28]
	mov	DWORD PTR tv150[rsp], eax
	cmp	DWORD PTR tv150[rsp], 1
	je	SHORT $LN114@UpdatePara
	cmp	DWORD PTR tv150[rsp], 2
	je	SHORT $LN113@UpdatePara
	jmp	SHORT $LN112@UpdatePara
$LN114@UpdatePara:

; 1056 : 		case 1:
; 1057 : 			param_copy[GLITCH_AREA_SEED].ui_flags = PF_PUI_DISABLED;

	mov	eax, 176				; 000000b0H
	imul	rax, rax, 10
	mov	DWORD PTR param_copy$[rsp+rax+4], 32	; 00000020H

; 1058 : 			break;

	jmp	SHORT $LN112@UpdatePara
$LN113@UpdatePara:

; 1059 : 		case 2:
; 1060 : 			param_copy[GLITCH_AREA_SEED].ui_flags = PF_PUI_CONTROL;

	mov	eax, 176				; 000000b0H
	imul	rax, rax, 10
	mov	DWORD PTR param_copy$[rsp+rax+4], 2
$LN112@UpdatePara:

; 1061 : 			break;
; 1062 : 	}
; 1063 : 
; 1064 : 	ERR(suites.ParamUtilsSuite1()->PF_UpdateParamUI(in_data->effect_ref,
; 1065 : 		GLITCH_AREA_SEED,
; 1066 : 		&param_copy[GLITCH_AREA_SEED]));

	cmp	DWORD PTR err$[rsp], 0
	jne	SHORT $LN109@UpdatePara
	mov	eax, 176				; 000000b0H
	imul	rax, rax, 10
	lea	rax, QWORD PTR param_copy$[rsp+rax]
	mov	QWORD PTR tv165[rsp], rax
	lea	rcx, QWORD PTR suites$[rsp]
	call	?ParamUtilsSuite1@AEGP_SuiteHandler@@QEBAPEAUPF_ParamUtilsSuite1@@XZ ; AEGP_SuiteHandler::ParamUtilsSuite1
	mov	rcx, QWORD PTR tv165[rsp]
	mov	r8, rcx
	mov	edx, 10
	mov	rcx, QWORD PTR in_data$[rsp]
	mov	rcx, QWORD PTR [rcx+184]
	call	QWORD PTR [rax]
	mov	DWORD PTR err$[rsp], eax
$LN109@UpdatePara:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN112@UpdatePara

; 1067 : 
; 1068 : 	if (niP.colorShifter) {

	movzx	eax, BYTE PTR niP$[rsp+36]
	test	eax, eax
	je	SHORT $LN108@UpdatePara

; 1069 : 		param_copy[GLITCH_COLORSHIFTER_AMOUNT].ui_flags = PF_PUI_CONTROL;

	mov	eax, 176				; 000000b0H
	imul	rax, rax, 16
	mov	DWORD PTR param_copy$[rsp+rax+4], 2

; 1070 : 		param_copy[GLITCH_COLORSHIFTER_THRESHOLD].ui_flags = PF_PUI_CONTROL;

	mov	eax, 176				; 000000b0H
	imul	rax, rax, 15
	mov	DWORD PTR param_copy$[rsp+rax+4], 2

; 1071 : 		param_copy[GLITCH_COLORSHIFTER_FREQUENCY].ui_flags = PF_PUI_CONTROL;

	mov	eax, 176				; 000000b0H
	imul	rax, rax, 13
	mov	DWORD PTR param_copy$[rsp+rax+4], 2

; 1072 : 		param_copy[GLITCH_COLORSHIFTER_TYPE].ui_flags = PF_PUI_CONTROL;

	mov	eax, 176				; 000000b0H
	imul	rax, rax, 14
	mov	DWORD PTR param_copy$[rsp+rax+4], 2

; 1073 : 	} else {

	jmp	SHORT $LN106@UpdatePara
$LN108@UpdatePara:

; 1074 : 		param_copy[GLITCH_COLORSHIFTER_AMOUNT].ui_flags = PF_PUI_DISABLED;

	mov	eax, 176				; 000000b0H
	imul	rax, rax, 16
	mov	DWORD PTR param_copy$[rsp+rax+4], 32	; 00000020H

; 1075 : 		param_copy[GLITCH_COLORSHIFTER_THRESHOLD].ui_flags = PF_PUI_DISABLED;

	mov	eax, 176				; 000000b0H
	imul	rax, rax, 15
	mov	DWORD PTR param_copy$[rsp+rax+4], 32	; 00000020H

; 1076 : 		param_copy[GLITCH_COLORSHIFTER_FREQUENCY].ui_flags = PF_PUI_DISABLED;

	mov	eax, 176				; 000000b0H
	imul	rax, rax, 13
	mov	DWORD PTR param_copy$[rsp+rax+4], 32	; 00000020H

; 1077 : 		param_copy[GLITCH_COLORSHIFTER_TYPE].ui_flags = PF_PUI_DISABLED;

	mov	eax, 176				; 000000b0H
	imul	rax, rax, 14
	mov	DWORD PTR param_copy$[rsp+rax+4], 32	; 00000020H
$LN106@UpdatePara:

; 1078 : 	}
; 1079 : 
; 1080 : 	ERR(suites.ParamUtilsSuite1()->PF_UpdateParamUI(in_data->effect_ref,
; 1081 : 		GLITCH_COLORSHIFTER_AMOUNT,
; 1082 : 		&param_copy[GLITCH_COLORSHIFTER_AMOUNT]));

	cmp	DWORD PTR err$[rsp], 0
	jne	SHORT $LN103@UpdatePara
	mov	eax, 176				; 000000b0H
	imul	rax, rax, 16
	lea	rax, QWORD PTR param_copy$[rsp+rax]
	mov	QWORD PTR tv203[rsp], rax
	lea	rcx, QWORD PTR suites$[rsp]
	call	?ParamUtilsSuite1@AEGP_SuiteHandler@@QEBAPEAUPF_ParamUtilsSuite1@@XZ ; AEGP_SuiteHandler::ParamUtilsSuite1
	mov	rcx, QWORD PTR tv203[rsp]
	mov	r8, rcx
	mov	edx, 16
	mov	rcx, QWORD PTR in_data$[rsp]
	mov	rcx, QWORD PTR [rcx+184]
	call	QWORD PTR [rax]
	mov	DWORD PTR err$[rsp], eax
$LN103@UpdatePara:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN106@UpdatePara
$LN102@UpdatePara:

; 1083 : 
; 1084 : 	ERR(suites.ParamUtilsSuite1()->PF_UpdateParamUI(in_data->effect_ref,
; 1085 : 		GLITCH_COLORSHIFTER_THRESHOLD,
; 1086 : 		&param_copy[GLITCH_COLORSHIFTER_THRESHOLD]));

	cmp	DWORD PTR err$[rsp], 0
	jne	SHORT $LN99@UpdatePara
	mov	eax, 176				; 000000b0H
	imul	rax, rax, 15
	lea	rax, QWORD PTR param_copy$[rsp+rax]
	mov	QWORD PTR tv215[rsp], rax
	lea	rcx, QWORD PTR suites$[rsp]
	call	?ParamUtilsSuite1@AEGP_SuiteHandler@@QEBAPEAUPF_ParamUtilsSuite1@@XZ ; AEGP_SuiteHandler::ParamUtilsSuite1
	mov	rcx, QWORD PTR tv215[rsp]
	mov	r8, rcx
	mov	edx, 15
	mov	rcx, QWORD PTR in_data$[rsp]
	mov	rcx, QWORD PTR [rcx+184]
	call	QWORD PTR [rax]
	mov	DWORD PTR err$[rsp], eax
$LN99@UpdatePara:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN102@UpdatePara
$LN98@UpdatePara:

; 1087 : 
; 1088 : 	ERR(suites.ParamUtilsSuite1()->PF_UpdateParamUI(in_data->effect_ref,
; 1089 : 		GLITCH_COLORSHIFTER_FREQUENCY,
; 1090 : 		&param_copy[GLITCH_COLORSHIFTER_FREQUENCY]));

	cmp	DWORD PTR err$[rsp], 0
	jne	SHORT $LN95@UpdatePara
	mov	eax, 176				; 000000b0H
	imul	rax, rax, 13
	lea	rax, QWORD PTR param_copy$[rsp+rax]
	mov	QWORD PTR tv227[rsp], rax
	lea	rcx, QWORD PTR suites$[rsp]
	call	?ParamUtilsSuite1@AEGP_SuiteHandler@@QEBAPEAUPF_ParamUtilsSuite1@@XZ ; AEGP_SuiteHandler::ParamUtilsSuite1
	mov	rcx, QWORD PTR tv227[rsp]
	mov	r8, rcx
	mov	edx, 13
	mov	rcx, QWORD PTR in_data$[rsp]
	mov	rcx, QWORD PTR [rcx+184]
	call	QWORD PTR [rax]
	mov	DWORD PTR err$[rsp], eax
$LN95@UpdatePara:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN98@UpdatePara
$LN94@UpdatePara:

; 1091 : 
; 1092 : 	ERR(suites.ParamUtilsSuite1()->PF_UpdateParamUI(in_data->effect_ref,
; 1093 : 		GLITCH_COLORSHIFTER_TYPE,
; 1094 : 		&param_copy[GLITCH_COLORSHIFTER_TYPE]));

	cmp	DWORD PTR err$[rsp], 0
	jne	SHORT $LN91@UpdatePara
	mov	eax, 176				; 000000b0H
	imul	rax, rax, 14
	lea	rax, QWORD PTR param_copy$[rsp+rax]
	mov	QWORD PTR tv239[rsp], rax
	lea	rcx, QWORD PTR suites$[rsp]
	call	?ParamUtilsSuite1@AEGP_SuiteHandler@@QEBAPEAUPF_ParamUtilsSuite1@@XZ ; AEGP_SuiteHandler::ParamUtilsSuite1
	mov	rcx, QWORD PTR tv239[rsp]
	mov	r8, rcx
	mov	edx, 14
	mov	rcx, QWORD PTR in_data$[rsp]
	mov	rcx, QWORD PTR [rcx+184]
	call	QWORD PTR [rax]
	mov	DWORD PTR err$[rsp], eax
$LN91@UpdatePara:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN94@UpdatePara

; 1095 : 
; 1096 : 	if (niP.color) {

	movzx	eax, BYTE PTR niP$[rsp+56]
	test	eax, eax
	je	$LN90@UpdatePara

; 1097 : 		param_copy[GLITCH_COLOR_FREQUENCY].ui_flags = PF_PUI_CONTROL;

	mov	eax, 176				; 000000b0H
	imul	rax, rax, 20
	mov	DWORD PTR param_copy$[rsp+rax+4], 2

; 1098 : 		param_copy[GLITCH_COLOR_ALPHA].ui_flags = PF_PUI_CONTROL;

	mov	eax, 176				; 000000b0H
	imul	rax, rax, 26
	mov	DWORD PTR param_copy$[rsp+rax+4], 2

; 1099 : 		param_copy[GLITCH_COLOR_BLACK].ui_flags = PF_PUI_CONTROL;

	mov	eax, 176				; 000000b0H
	imul	rax, rax, 24
	mov	DWORD PTR param_copy$[rsp+rax+4], 2

; 1100 : 		param_copy[GLITCH_COLOR_WHITE].ui_flags = PF_PUI_CONTROL;

	mov	eax, 176				; 000000b0H
	imul	rax, rax, 25
	mov	DWORD PTR param_copy$[rsp+rax+4], 2

; 1101 : 		param_copy[GLITCH_COLOR_RED].ui_flags = PF_PUI_CONTROL;

	mov	eax, 176				; 000000b0H
	imul	rax, rax, 21
	mov	DWORD PTR param_copy$[rsp+rax+4], 2

; 1102 : 		param_copy[GLITCH_COLOR_GREEN].ui_flags = PF_PUI_CONTROL;

	mov	eax, 176				; 000000b0H
	imul	rax, rax, 22
	mov	DWORD PTR param_copy$[rsp+rax+4], 2

; 1103 : 		param_copy[GLITCH_COLOR_BLUE].ui_flags = PF_PUI_CONTROL;

	mov	eax, 176				; 000000b0H
	imul	rax, rax, 23
	mov	DWORD PTR param_copy$[rsp+rax+4], 2

; 1104 : 		param_copy[GLITCH_COLOR_USE_CUSTOMCOLOR].ui_flags = PF_PUI_CONTROL;

	mov	eax, 176				; 000000b0H
	imul	rax, rax, 27
	mov	DWORD PTR param_copy$[rsp+rax+4], 2

; 1105 : 		param_copy[GLITCH_COLOR_CUSTOMCOLOR].ui_flags = PF_PUI_CONTROL;

	mov	eax, 176				; 000000b0H
	imul	rax, rax, 28
	mov	DWORD PTR param_copy$[rsp+rax+4], 2

; 1106 : 		param_copy[GLITCH_COLOR_MIX].ui_flags = PF_PUI_CONTROL;

	mov	eax, 176				; 000000b0H
	imul	rax, rax, 30
	mov	DWORD PTR param_copy$[rsp+rax+4], 2

; 1107 : 		param_copy[GLITCH_COLOR_UNMIX].ui_flags = PF_PUI_CONTROL;

	mov	eax, 176				; 000000b0H
	imul	rax, rax, 29
	mov	DWORD PTR param_copy$[rsp+rax+4], 2

; 1108 : 	} else {

	jmp	$LN89@UpdatePara
$LN90@UpdatePara:

; 1109 : 		param_copy[GLITCH_COLOR_FREQUENCY].ui_flags = PF_PUI_DISABLED;

	mov	eax, 176				; 000000b0H
	imul	rax, rax, 20
	mov	DWORD PTR param_copy$[rsp+rax+4], 32	; 00000020H

; 1110 : 		param_copy[GLITCH_COLOR_ALPHA].ui_flags = PF_PUI_DISABLED;

	mov	eax, 176				; 000000b0H
	imul	rax, rax, 26
	mov	DWORD PTR param_copy$[rsp+rax+4], 32	; 00000020H

; 1111 : 		param_copy[GLITCH_COLOR_BLACK].ui_flags = PF_PUI_DISABLED;

	mov	eax, 176				; 000000b0H
	imul	rax, rax, 24
	mov	DWORD PTR param_copy$[rsp+rax+4], 32	; 00000020H

; 1112 : 		param_copy[GLITCH_COLOR_WHITE].ui_flags = PF_PUI_DISABLED;

	mov	eax, 176				; 000000b0H
	imul	rax, rax, 25
	mov	DWORD PTR param_copy$[rsp+rax+4], 32	; 00000020H

; 1113 : 		param_copy[GLITCH_COLOR_RED].ui_flags = PF_PUI_DISABLED;

	mov	eax, 176				; 000000b0H
	imul	rax, rax, 21
	mov	DWORD PTR param_copy$[rsp+rax+4], 32	; 00000020H

; 1114 : 		param_copy[GLITCH_COLOR_GREEN].ui_flags = PF_PUI_DISABLED;

	mov	eax, 176				; 000000b0H
	imul	rax, rax, 22
	mov	DWORD PTR param_copy$[rsp+rax+4], 32	; 00000020H

; 1115 : 		param_copy[GLITCH_COLOR_BLUE].ui_flags = PF_PUI_DISABLED;

	mov	eax, 176				; 000000b0H
	imul	rax, rax, 23
	mov	DWORD PTR param_copy$[rsp+rax+4], 32	; 00000020H

; 1116 : 		param_copy[GLITCH_COLOR_USE_CUSTOMCOLOR].ui_flags = PF_PUI_DISABLED;

	mov	eax, 176				; 000000b0H
	imul	rax, rax, 27
	mov	DWORD PTR param_copy$[rsp+rax+4], 32	; 00000020H

; 1117 : 		param_copy[GLITCH_COLOR_CUSTOMCOLOR].ui_flags = PF_PUI_DISABLED;

	mov	eax, 176				; 000000b0H
	imul	rax, rax, 28
	mov	DWORD PTR param_copy$[rsp+rax+4], 32	; 00000020H

; 1118 : 		param_copy[GLITCH_COLOR_MIX].ui_flags = PF_PUI_DISABLED;

	mov	eax, 176				; 000000b0H
	imul	rax, rax, 30
	mov	DWORD PTR param_copy$[rsp+rax+4], 32	; 00000020H

; 1119 : 		param_copy[GLITCH_COLOR_UNMIX].ui_flags = PF_PUI_DISABLED;

	mov	eax, 176				; 000000b0H
	imul	rax, rax, 29
	mov	DWORD PTR param_copy$[rsp+rax+4], 32	; 00000020H
$LN89@UpdatePara:

; 1120 : 	}
; 1121 : 
; 1122 : 	if (niP.colorUseCustomColor) {

	movzx	eax, BYTE PTR niP$[rsp+70]
	test	eax, eax
	je	SHORT $LN88@UpdatePara

; 1123 : 		if (niP.color) {

	movzx	eax, BYTE PTR niP$[rsp+56]
	test	eax, eax
	je	SHORT $LN87@UpdatePara

; 1124 : 			param_copy[GLITCH_COLOR_CUSTOMCOLOR].ui_flags = PF_PUI_CONTROL;

	mov	eax, 176				; 000000b0H
	imul	rax, rax, 28
	mov	DWORD PTR param_copy$[rsp+rax+4], 2

; 1125 : 		} else {

	jmp	SHORT $LN86@UpdatePara
$LN87@UpdatePara:

; 1126 : 			param_copy[GLITCH_COLOR_CUSTOMCOLOR].ui_flags = PF_PUI_DISABLED;

	mov	eax, 176				; 000000b0H
	imul	rax, rax, 28
	mov	DWORD PTR param_copy$[rsp+rax+4], 32	; 00000020H
$LN86@UpdatePara:

; 1127 : 		}
; 1128 : 	} else {

	jmp	SHORT $LN85@UpdatePara
$LN88@UpdatePara:

; 1129 : 		param_copy[GLITCH_COLOR_CUSTOMCOLOR].ui_flags = PF_PUI_DISABLED;

	mov	eax, 176				; 000000b0H
	imul	rax, rax, 28
	mov	DWORD PTR param_copy$[rsp+rax+4], 32	; 00000020H
$LN85@UpdatePara:

; 1130 : 	}
; 1131 : 
; 1132 : 	if (niP.colorUnmix) {

	movzx	eax, BYTE PTR niP$[rsp+75]
	test	eax, eax
	je	SHORT $LN84@UpdatePara

; 1133 : 		param_copy[GLITCH_COLOR_MIX].ui_flags = PF_PUI_DISABLED;

	mov	eax, 176				; 000000b0H
	imul	rax, rax, 30
	mov	DWORD PTR param_copy$[rsp+rax+4], 32	; 00000020H

; 1134 : 	} else {

	jmp	SHORT $LN80@UpdatePara
$LN84@UpdatePara:

; 1135 : 		if (niP.color) {

	movzx	eax, BYTE PTR niP$[rsp+56]
	test	eax, eax
	je	SHORT $LN82@UpdatePara

; 1136 : 			param_copy[GLITCH_COLOR_MIX].ui_flags = PF_PUI_CONTROL;

	mov	eax, 176				; 000000b0H
	imul	rax, rax, 30
	mov	DWORD PTR param_copy$[rsp+rax+4], 2

; 1137 : 		} else {

	jmp	SHORT $LN80@UpdatePara
$LN82@UpdatePara:

; 1138 : 			param_copy[GLITCH_COLOR_MIX].ui_flags = PF_PUI_DISABLED;

	mov	eax, 176				; 000000b0H
	imul	rax, rax, 30
	mov	DWORD PTR param_copy$[rsp+rax+4], 32	; 00000020H
$LN80@UpdatePara:

; 1139 : 		}
; 1140 : 	}
; 1141 : 
; 1142 : 	ERR(suites.ParamUtilsSuite1()->PF_UpdateParamUI(in_data->effect_ref,
; 1143 : 		GLITCH_COLOR_FREQUENCY,
; 1144 : 		&param_copy[GLITCH_COLOR_FREQUENCY]));

	cmp	DWORD PTR err$[rsp], 0
	jne	SHORT $LN77@UpdatePara
	mov	eax, 176				; 000000b0H
	imul	rax, rax, 20
	lea	rax, QWORD PTR param_copy$[rsp+rax]
	mov	QWORD PTR tv345[rsp], rax
	lea	rcx, QWORD PTR suites$[rsp]
	call	?ParamUtilsSuite1@AEGP_SuiteHandler@@QEBAPEAUPF_ParamUtilsSuite1@@XZ ; AEGP_SuiteHandler::ParamUtilsSuite1
	mov	rcx, QWORD PTR tv345[rsp]
	mov	r8, rcx
	mov	edx, 20
	mov	rcx, QWORD PTR in_data$[rsp]
	mov	rcx, QWORD PTR [rcx+184]
	call	QWORD PTR [rax]
	mov	DWORD PTR err$[rsp], eax
$LN77@UpdatePara:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN80@UpdatePara
$LN76@UpdatePara:

; 1145 : 
; 1146 : 	ERR(suites.ParamUtilsSuite1()->PF_UpdateParamUI(in_data->effect_ref,
; 1147 : 		GLITCH_COLOR_ALPHA,
; 1148 : 		&param_copy[GLITCH_COLOR_ALPHA]));

	cmp	DWORD PTR err$[rsp], 0
	jne	SHORT $LN73@UpdatePara
	mov	eax, 176				; 000000b0H
	imul	rax, rax, 26
	lea	rax, QWORD PTR param_copy$[rsp+rax]
	mov	QWORD PTR tv357[rsp], rax
	lea	rcx, QWORD PTR suites$[rsp]
	call	?ParamUtilsSuite1@AEGP_SuiteHandler@@QEBAPEAUPF_ParamUtilsSuite1@@XZ ; AEGP_SuiteHandler::ParamUtilsSuite1
	mov	rcx, QWORD PTR tv357[rsp]
	mov	r8, rcx
	mov	edx, 26
	mov	rcx, QWORD PTR in_data$[rsp]
	mov	rcx, QWORD PTR [rcx+184]
	call	QWORD PTR [rax]
	mov	DWORD PTR err$[rsp], eax
$LN73@UpdatePara:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN76@UpdatePara
$LN72@UpdatePara:

; 1149 : 
; 1150 : 	ERR(suites.ParamUtilsSuite1()->PF_UpdateParamUI(in_data->effect_ref,
; 1151 : 		GLITCH_COLOR_BLACK,
; 1152 : 		&param_copy[GLITCH_COLOR_BLACK]));

	cmp	DWORD PTR err$[rsp], 0
	jne	SHORT $LN69@UpdatePara
	mov	eax, 176				; 000000b0H
	imul	rax, rax, 24
	lea	rax, QWORD PTR param_copy$[rsp+rax]
	mov	QWORD PTR tv369[rsp], rax
	lea	rcx, QWORD PTR suites$[rsp]
	call	?ParamUtilsSuite1@AEGP_SuiteHandler@@QEBAPEAUPF_ParamUtilsSuite1@@XZ ; AEGP_SuiteHandler::ParamUtilsSuite1
	mov	rcx, QWORD PTR tv369[rsp]
	mov	r8, rcx
	mov	edx, 24
	mov	rcx, QWORD PTR in_data$[rsp]
	mov	rcx, QWORD PTR [rcx+184]
	call	QWORD PTR [rax]
	mov	DWORD PTR err$[rsp], eax
$LN69@UpdatePara:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN72@UpdatePara
$LN68@UpdatePara:

; 1153 : 
; 1154 : 	ERR(suites.ParamUtilsSuite1()->PF_UpdateParamUI(in_data->effect_ref,
; 1155 : 		GLITCH_COLOR_WHITE,
; 1156 : 		&param_copy[GLITCH_COLOR_WHITE]));

	cmp	DWORD PTR err$[rsp], 0
	jne	SHORT $LN65@UpdatePara
	mov	eax, 176				; 000000b0H
	imul	rax, rax, 25
	lea	rax, QWORD PTR param_copy$[rsp+rax]
	mov	QWORD PTR tv381[rsp], rax
	lea	rcx, QWORD PTR suites$[rsp]
	call	?ParamUtilsSuite1@AEGP_SuiteHandler@@QEBAPEAUPF_ParamUtilsSuite1@@XZ ; AEGP_SuiteHandler::ParamUtilsSuite1
	mov	rcx, QWORD PTR tv381[rsp]
	mov	r8, rcx
	mov	edx, 25
	mov	rcx, QWORD PTR in_data$[rsp]
	mov	rcx, QWORD PTR [rcx+184]
	call	QWORD PTR [rax]
	mov	DWORD PTR err$[rsp], eax
$LN65@UpdatePara:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN68@UpdatePara
$LN64@UpdatePara:

; 1157 : 
; 1158 : 	ERR(suites.ParamUtilsSuite1()->PF_UpdateParamUI(in_data->effect_ref,
; 1159 : 		GLITCH_COLOR_RED,
; 1160 : 		&param_copy[GLITCH_COLOR_RED]));

	cmp	DWORD PTR err$[rsp], 0
	jne	SHORT $LN61@UpdatePara
	mov	eax, 176				; 000000b0H
	imul	rax, rax, 21
	lea	rax, QWORD PTR param_copy$[rsp+rax]
	mov	QWORD PTR tv393[rsp], rax
	lea	rcx, QWORD PTR suites$[rsp]
	call	?ParamUtilsSuite1@AEGP_SuiteHandler@@QEBAPEAUPF_ParamUtilsSuite1@@XZ ; AEGP_SuiteHandler::ParamUtilsSuite1
	mov	rcx, QWORD PTR tv393[rsp]
	mov	r8, rcx
	mov	edx, 21
	mov	rcx, QWORD PTR in_data$[rsp]
	mov	rcx, QWORD PTR [rcx+184]
	call	QWORD PTR [rax]
	mov	DWORD PTR err$[rsp], eax
$LN61@UpdatePara:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN64@UpdatePara
$LN60@UpdatePara:

; 1161 : 
; 1162 : 	ERR(suites.ParamUtilsSuite1()->PF_UpdateParamUI(in_data->effect_ref,
; 1163 : 		GLITCH_COLOR_RED,
; 1164 : 		&param_copy[GLITCH_COLOR_RED]));

	cmp	DWORD PTR err$[rsp], 0
	jne	SHORT $LN57@UpdatePara
	mov	eax, 176				; 000000b0H
	imul	rax, rax, 21
	lea	rax, QWORD PTR param_copy$[rsp+rax]
	mov	QWORD PTR tv405[rsp], rax
	lea	rcx, QWORD PTR suites$[rsp]
	call	?ParamUtilsSuite1@AEGP_SuiteHandler@@QEBAPEAUPF_ParamUtilsSuite1@@XZ ; AEGP_SuiteHandler::ParamUtilsSuite1
	mov	rcx, QWORD PTR tv405[rsp]
	mov	r8, rcx
	mov	edx, 21
	mov	rcx, QWORD PTR in_data$[rsp]
	mov	rcx, QWORD PTR [rcx+184]
	call	QWORD PTR [rax]
	mov	DWORD PTR err$[rsp], eax
$LN57@UpdatePara:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN60@UpdatePara
$LN56@UpdatePara:

; 1165 : 
; 1166 : 	ERR(suites.ParamUtilsSuite1()->PF_UpdateParamUI(in_data->effect_ref,
; 1167 : 		GLITCH_COLOR_GREEN,
; 1168 : 		&param_copy[GLITCH_COLOR_GREEN]));

	cmp	DWORD PTR err$[rsp], 0
	jne	SHORT $LN53@UpdatePara
	mov	eax, 176				; 000000b0H
	imul	rax, rax, 22
	lea	rax, QWORD PTR param_copy$[rsp+rax]
	mov	QWORD PTR tv417[rsp], rax
	lea	rcx, QWORD PTR suites$[rsp]
	call	?ParamUtilsSuite1@AEGP_SuiteHandler@@QEBAPEAUPF_ParamUtilsSuite1@@XZ ; AEGP_SuiteHandler::ParamUtilsSuite1
	mov	rcx, QWORD PTR tv417[rsp]
	mov	r8, rcx
	mov	edx, 22
	mov	rcx, QWORD PTR in_data$[rsp]
	mov	rcx, QWORD PTR [rcx+184]
	call	QWORD PTR [rax]
	mov	DWORD PTR err$[rsp], eax
$LN53@UpdatePara:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN56@UpdatePara
$LN52@UpdatePara:

; 1169 : 
; 1170 : 	ERR(suites.ParamUtilsSuite1()->PF_UpdateParamUI(in_data->effect_ref,
; 1171 : 		GLITCH_COLOR_BLUE,
; 1172 : 		&param_copy[GLITCH_COLOR_BLUE]));

	cmp	DWORD PTR err$[rsp], 0
	jne	SHORT $LN49@UpdatePara
	mov	eax, 176				; 000000b0H
	imul	rax, rax, 23
	lea	rax, QWORD PTR param_copy$[rsp+rax]
	mov	QWORD PTR tv429[rsp], rax
	lea	rcx, QWORD PTR suites$[rsp]
	call	?ParamUtilsSuite1@AEGP_SuiteHandler@@QEBAPEAUPF_ParamUtilsSuite1@@XZ ; AEGP_SuiteHandler::ParamUtilsSuite1
	mov	rcx, QWORD PTR tv429[rsp]
	mov	r8, rcx
	mov	edx, 23
	mov	rcx, QWORD PTR in_data$[rsp]
	mov	rcx, QWORD PTR [rcx+184]
	call	QWORD PTR [rax]
	mov	DWORD PTR err$[rsp], eax
$LN49@UpdatePara:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN52@UpdatePara
$LN48@UpdatePara:

; 1173 : 
; 1174 : 	ERR(suites.ParamUtilsSuite1()->PF_UpdateParamUI(in_data->effect_ref,
; 1175 : 		GLITCH_COLOR_USE_CUSTOMCOLOR,
; 1176 : 		&param_copy[GLITCH_COLOR_USE_CUSTOMCOLOR]));

	cmp	DWORD PTR err$[rsp], 0
	jne	SHORT $LN45@UpdatePara
	mov	eax, 176				; 000000b0H
	imul	rax, rax, 27
	lea	rax, QWORD PTR param_copy$[rsp+rax]
	mov	QWORD PTR tv441[rsp], rax
	lea	rcx, QWORD PTR suites$[rsp]
	call	?ParamUtilsSuite1@AEGP_SuiteHandler@@QEBAPEAUPF_ParamUtilsSuite1@@XZ ; AEGP_SuiteHandler::ParamUtilsSuite1
	mov	rcx, QWORD PTR tv441[rsp]
	mov	r8, rcx
	mov	edx, 27
	mov	rcx, QWORD PTR in_data$[rsp]
	mov	rcx, QWORD PTR [rcx+184]
	call	QWORD PTR [rax]
	mov	DWORD PTR err$[rsp], eax
$LN45@UpdatePara:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN48@UpdatePara
$LN44@UpdatePara:

; 1177 : 
; 1178 : 	ERR(suites.ParamUtilsSuite1()->PF_UpdateParamUI(in_data->effect_ref,
; 1179 : 		GLITCH_COLOR_CUSTOMCOLOR,
; 1180 : 		&param_copy[GLITCH_COLOR_CUSTOMCOLOR]));

	cmp	DWORD PTR err$[rsp], 0
	jne	SHORT $LN41@UpdatePara
	mov	eax, 176				; 000000b0H
	imul	rax, rax, 28
	lea	rax, QWORD PTR param_copy$[rsp+rax]
	mov	QWORD PTR tv453[rsp], rax
	lea	rcx, QWORD PTR suites$[rsp]
	call	?ParamUtilsSuite1@AEGP_SuiteHandler@@QEBAPEAUPF_ParamUtilsSuite1@@XZ ; AEGP_SuiteHandler::ParamUtilsSuite1
	mov	rcx, QWORD PTR tv453[rsp]
	mov	r8, rcx
	mov	edx, 28
	mov	rcx, QWORD PTR in_data$[rsp]
	mov	rcx, QWORD PTR [rcx+184]
	call	QWORD PTR [rax]
	mov	DWORD PTR err$[rsp], eax
$LN41@UpdatePara:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN44@UpdatePara
$LN40@UpdatePara:

; 1181 : 
; 1182 : 	ERR(suites.ParamUtilsSuite1()->PF_UpdateParamUI(in_data->effect_ref,
; 1183 : 		GLITCH_COLOR_UNMIX,
; 1184 : 		&param_copy[GLITCH_COLOR_UNMIX]));

	cmp	DWORD PTR err$[rsp], 0
	jne	SHORT $LN37@UpdatePara
	mov	eax, 176				; 000000b0H
	imul	rax, rax, 29
	lea	rax, QWORD PTR param_copy$[rsp+rax]
	mov	QWORD PTR tv465[rsp], rax
	lea	rcx, QWORD PTR suites$[rsp]
	call	?ParamUtilsSuite1@AEGP_SuiteHandler@@QEBAPEAUPF_ParamUtilsSuite1@@XZ ; AEGP_SuiteHandler::ParamUtilsSuite1
	mov	rcx, QWORD PTR tv465[rsp]
	mov	r8, rcx
	mov	edx, 29
	mov	rcx, QWORD PTR in_data$[rsp]
	mov	rcx, QWORD PTR [rcx+184]
	call	QWORD PTR [rax]
	mov	DWORD PTR err$[rsp], eax
$LN37@UpdatePara:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN40@UpdatePara
$LN36@UpdatePara:

; 1185 : 
; 1186 : 	ERR(suites.ParamUtilsSuite1()->PF_UpdateParamUI(in_data->effect_ref,
; 1187 : 		GLITCH_COLOR_MIX,
; 1188 : 		&param_copy[GLITCH_COLOR_MIX]));

	cmp	DWORD PTR err$[rsp], 0
	jne	SHORT $LN33@UpdatePara
	mov	eax, 176				; 000000b0H
	imul	rax, rax, 30
	lea	rax, QWORD PTR param_copy$[rsp+rax]
	mov	QWORD PTR tv477[rsp], rax
	lea	rcx, QWORD PTR suites$[rsp]
	call	?ParamUtilsSuite1@AEGP_SuiteHandler@@QEBAPEAUPF_ParamUtilsSuite1@@XZ ; AEGP_SuiteHandler::ParamUtilsSuite1
	mov	rcx, QWORD PTR tv477[rsp]
	mov	r8, rcx
	mov	edx, 30
	mov	rcx, QWORD PTR in_data$[rsp]
	mov	rcx, QWORD PTR [rcx+184]
	call	QWORD PTR [rax]
	mov	DWORD PTR err$[rsp], eax
$LN33@UpdatePara:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN36@UpdatePara

; 1189 : 
; 1190 : 	if (niP.shifter) {

	movzx	eax, BYTE PTR niP$[rsp+80]
	test	eax, eax
	je	SHORT $LN32@UpdatePara

; 1191 : 		param_copy[GLITCH_SHIFTER_FREQUENCY].ui_flags = PF_PUI_CONTROL;

	mov	eax, 176				; 000000b0H
	imul	rax, rax, 34				; 00000022H
	mov	DWORD PTR param_copy$[rsp+rax+4], 2

; 1192 : 		param_copy[GLITCH_SHIFTER_BORDERTYPE].ui_flags = PF_PUI_CONTROL;

	mov	eax, 176				; 000000b0H
	imul	rax, rax, 36				; 00000024H
	mov	DWORD PTR param_copy$[rsp+rax+4], 2

; 1193 : 		param_copy[GLITCH_SHIFTER_DIRECTION].ui_flags = PF_PUI_CONTROL;

	mov	eax, 176				; 000000b0H
	imul	rax, rax, 35				; 00000023H
	mov	DWORD PTR param_copy$[rsp+rax+4], 2

; 1194 : 		param_copy[GLITCH_SHIFTER_MAX].ui_flags = PF_PUI_CONTROL;

	mov	eax, 176				; 000000b0H
	imul	rax, rax, 37				; 00000025H
	mov	DWORD PTR param_copy$[rsp+rax+4], 2

; 1195 : 	} else {

	jmp	SHORT $LN30@UpdatePara
$LN32@UpdatePara:

; 1196 : 		param_copy[GLITCH_SHIFTER_FREQUENCY].ui_flags = PF_PUI_DISABLED;

	mov	eax, 176				; 000000b0H
	imul	rax, rax, 34				; 00000022H
	mov	DWORD PTR param_copy$[rsp+rax+4], 32	; 00000020H

; 1197 : 		param_copy[GLITCH_SHIFTER_BORDERTYPE].ui_flags = PF_PUI_DISABLED;

	mov	eax, 176				; 000000b0H
	imul	rax, rax, 36				; 00000024H
	mov	DWORD PTR param_copy$[rsp+rax+4], 32	; 00000020H

; 1198 : 		param_copy[GLITCH_SHIFTER_DIRECTION].ui_flags = PF_PUI_DISABLED;

	mov	eax, 176				; 000000b0H
	imul	rax, rax, 35				; 00000023H
	mov	DWORD PTR param_copy$[rsp+rax+4], 32	; 00000020H

; 1199 : 		param_copy[GLITCH_SHIFTER_MAX].ui_flags = PF_PUI_DISABLED;

	mov	eax, 176				; 000000b0H
	imul	rax, rax, 37				; 00000025H
	mov	DWORD PTR param_copy$[rsp+rax+4], 32	; 00000020H
$LN30@UpdatePara:

; 1200 : 	}
; 1201 : 
; 1202 : 	ERR(suites.ParamUtilsSuite1()->PF_UpdateParamUI(in_data->effect_ref,
; 1203 : 		GLITCH_SHIFTER_FREQUENCY,
; 1204 : 		&param_copy[GLITCH_SHIFTER_FREQUENCY]));

	cmp	DWORD PTR err$[rsp], 0
	jne	SHORT $LN27@UpdatePara
	mov	eax, 176				; 000000b0H
	imul	rax, rax, 34				; 00000022H
	lea	rax, QWORD PTR param_copy$[rsp+rax]
	mov	QWORD PTR tv515[rsp], rax
	lea	rcx, QWORD PTR suites$[rsp]
	call	?ParamUtilsSuite1@AEGP_SuiteHandler@@QEBAPEAUPF_ParamUtilsSuite1@@XZ ; AEGP_SuiteHandler::ParamUtilsSuite1
	mov	rcx, QWORD PTR tv515[rsp]
	mov	r8, rcx
	mov	edx, 34					; 00000022H
	mov	rcx, QWORD PTR in_data$[rsp]
	mov	rcx, QWORD PTR [rcx+184]
	call	QWORD PTR [rax]
	mov	DWORD PTR err$[rsp], eax
$LN27@UpdatePara:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN30@UpdatePara
$LN26@UpdatePara:

; 1205 : 
; 1206 : 	ERR(suites.ParamUtilsSuite1()->PF_UpdateParamUI(in_data->effect_ref,
; 1207 : 		GLITCH_SHIFTER_BORDERTYPE,
; 1208 : 		&param_copy[GLITCH_SHIFTER_BORDERTYPE]));

	cmp	DWORD PTR err$[rsp], 0
	jne	SHORT $LN23@UpdatePara
	mov	eax, 176				; 000000b0H
	imul	rax, rax, 36				; 00000024H
	lea	rax, QWORD PTR param_copy$[rsp+rax]
	mov	QWORD PTR tv527[rsp], rax
	lea	rcx, QWORD PTR suites$[rsp]
	call	?ParamUtilsSuite1@AEGP_SuiteHandler@@QEBAPEAUPF_ParamUtilsSuite1@@XZ ; AEGP_SuiteHandler::ParamUtilsSuite1
	mov	rcx, QWORD PTR tv527[rsp]
	mov	r8, rcx
	mov	edx, 36					; 00000024H
	mov	rcx, QWORD PTR in_data$[rsp]
	mov	rcx, QWORD PTR [rcx+184]
	call	QWORD PTR [rax]
	mov	DWORD PTR err$[rsp], eax
$LN23@UpdatePara:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN26@UpdatePara
$LN22@UpdatePara:

; 1209 : 
; 1210 : 	ERR(suites.ParamUtilsSuite1()->PF_UpdateParamUI(in_data->effect_ref,
; 1211 : 		GLITCH_SHIFTER_DIRECTION,
; 1212 : 		&param_copy[GLITCH_SHIFTER_DIRECTION]));

	cmp	DWORD PTR err$[rsp], 0
	jne	SHORT $LN19@UpdatePara
	mov	eax, 176				; 000000b0H
	imul	rax, rax, 35				; 00000023H
	lea	rax, QWORD PTR param_copy$[rsp+rax]
	mov	QWORD PTR tv539[rsp], rax
	lea	rcx, QWORD PTR suites$[rsp]
	call	?ParamUtilsSuite1@AEGP_SuiteHandler@@QEBAPEAUPF_ParamUtilsSuite1@@XZ ; AEGP_SuiteHandler::ParamUtilsSuite1
	mov	rcx, QWORD PTR tv539[rsp]
	mov	r8, rcx
	mov	edx, 35					; 00000023H
	mov	rcx, QWORD PTR in_data$[rsp]
	mov	rcx, QWORD PTR [rcx+184]
	call	QWORD PTR [rax]
	mov	DWORD PTR err$[rsp], eax
$LN19@UpdatePara:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN22@UpdatePara
$LN18@UpdatePara:

; 1213 : 
; 1214 : 	ERR(suites.ParamUtilsSuite1()->PF_UpdateParamUI(in_data->effect_ref,
; 1215 : 		GLITCH_SHIFTER_MAX,
; 1216 : 		&param_copy[GLITCH_SHIFTER_MAX]));

	cmp	DWORD PTR err$[rsp], 0
	jne	SHORT $LN15@UpdatePara
	mov	eax, 176				; 000000b0H
	imul	rax, rax, 37				; 00000025H
	lea	rax, QWORD PTR param_copy$[rsp+rax]
	mov	QWORD PTR tv551[rsp], rax
	lea	rcx, QWORD PTR suites$[rsp]
	call	?ParamUtilsSuite1@AEGP_SuiteHandler@@QEBAPEAUPF_ParamUtilsSuite1@@XZ ; AEGP_SuiteHandler::ParamUtilsSuite1
	mov	rcx, QWORD PTR tv551[rsp]
	mov	r8, rcx
	mov	edx, 37					; 00000025H
	mov	rcx, QWORD PTR in_data$[rsp]
	mov	rcx, QWORD PTR [rcx+184]
	call	QWORD PTR [rax]
	mov	DWORD PTR err$[rsp], eax
$LN15@UpdatePara:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN18@UpdatePara

; 1217 : 
; 1218 : 	if (niP.layer) {

	movzx	eax, BYTE PTR niP$[rsp+104]
	test	eax, eax
	je	SHORT $LN14@UpdatePara

; 1219 : 		param_copy[GLITCH_LAYER_FREQUENCY].ui_flags = PF_PUI_CONTROL;

	mov	eax, 176				; 000000b0H
	imul	rax, rax, 41				; 00000029H
	mov	DWORD PTR param_copy$[rsp+rax+4], 2

; 1220 : 		param_copy[GLITCH_LAYER_SOURCE].ui_flags = PF_PUI_CONTROL;

	mov	eax, 176				; 000000b0H
	imul	rax, rax, 42				; 0000002aH
	mov	DWORD PTR param_copy$[rsp+rax+4], 2

; 1221 : 		param_copy[GLITCH_LAYER_SOURCE_POSITION].ui_flags = PF_PUI_CONTROL;

	mov	eax, 176				; 000000b0H
	imul	rax, rax, 43				; 0000002bH
	mov	DWORD PTR param_copy$[rsp+rax+4], 2

; 1222 : 	} else {

	jmp	SHORT $LN12@UpdatePara
$LN14@UpdatePara:

; 1223 : 		param_copy[GLITCH_LAYER_FREQUENCY].ui_flags = PF_PUI_DISABLED;

	mov	eax, 176				; 000000b0H
	imul	rax, rax, 41				; 00000029H
	mov	DWORD PTR param_copy$[rsp+rax+4], 32	; 00000020H

; 1224 : 		param_copy[GLITCH_LAYER_SOURCE].ui_flags = PF_PUI_DISABLED;

	mov	eax, 176				; 000000b0H
	imul	rax, rax, 42				; 0000002aH
	mov	DWORD PTR param_copy$[rsp+rax+4], 32	; 00000020H

; 1225 : 		param_copy[GLITCH_LAYER_SOURCE_POSITION].ui_flags = PF_PUI_DISABLED;

	mov	eax, 176				; 000000b0H
	imul	rax, rax, 43				; 0000002bH
	mov	DWORD PTR param_copy$[rsp+rax+4], 32	; 00000020H
$LN12@UpdatePara:

; 1226 : 	}
; 1227 : 
; 1228 : 	ERR(suites.ParamUtilsSuite1()->PF_UpdateParamUI(in_data->effect_ref,
; 1229 : 		GLITCH_LAYER_FREQUENCY,
; 1230 : 		&param_copy[GLITCH_LAYER_FREQUENCY]));

	cmp	DWORD PTR err$[rsp], 0
	jne	SHORT $LN9@UpdatePara
	mov	eax, 176				; 000000b0H
	imul	rax, rax, 41				; 00000029H
	lea	rax, QWORD PTR param_copy$[rsp+rax]
	mov	QWORD PTR tv583[rsp], rax
	lea	rcx, QWORD PTR suites$[rsp]
	call	?ParamUtilsSuite1@AEGP_SuiteHandler@@QEBAPEAUPF_ParamUtilsSuite1@@XZ ; AEGP_SuiteHandler::ParamUtilsSuite1
	mov	rcx, QWORD PTR tv583[rsp]
	mov	r8, rcx
	mov	edx, 41					; 00000029H
	mov	rcx, QWORD PTR in_data$[rsp]
	mov	rcx, QWORD PTR [rcx+184]
	call	QWORD PTR [rax]
	mov	DWORD PTR err$[rsp], eax
$LN9@UpdatePara:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN12@UpdatePara
$LN8@UpdatePara:

; 1231 : 
; 1232 : 	ERR(suites.ParamUtilsSuite1()->PF_UpdateParamUI(in_data->effect_ref,
; 1233 : 		GLITCH_LAYER_SOURCE,
; 1234 : 		&param_copy[GLITCH_LAYER_SOURCE]));

	cmp	DWORD PTR err$[rsp], 0
	jne	SHORT $LN5@UpdatePara
	mov	eax, 176				; 000000b0H
	imul	rax, rax, 42				; 0000002aH
	lea	rax, QWORD PTR param_copy$[rsp+rax]
	mov	QWORD PTR tv595[rsp], rax
	lea	rcx, QWORD PTR suites$[rsp]
	call	?ParamUtilsSuite1@AEGP_SuiteHandler@@QEBAPEAUPF_ParamUtilsSuite1@@XZ ; AEGP_SuiteHandler::ParamUtilsSuite1
	mov	rcx, QWORD PTR tv595[rsp]
	mov	r8, rcx
	mov	edx, 42					; 0000002aH
	mov	rcx, QWORD PTR in_data$[rsp]
	mov	rcx, QWORD PTR [rcx+184]
	call	QWORD PTR [rax]
	mov	DWORD PTR err$[rsp], eax
$LN5@UpdatePara:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN8@UpdatePara
$LN4@UpdatePara:

; 1235 : 
; 1236 : 	ERR(suites.ParamUtilsSuite1()->PF_UpdateParamUI(in_data->effect_ref,
; 1237 : 		GLITCH_LAYER_SOURCE_POSITION,
; 1238 : 		&param_copy[GLITCH_LAYER_SOURCE_POSITION]));

	cmp	DWORD PTR err$[rsp], 0
	jne	SHORT $LN1@UpdatePara
	mov	eax, 176				; 000000b0H
	imul	rax, rax, 43				; 0000002bH
	lea	rax, QWORD PTR param_copy$[rsp+rax]
	mov	QWORD PTR tv607[rsp], rax
	lea	rcx, QWORD PTR suites$[rsp]
	call	?ParamUtilsSuite1@AEGP_SuiteHandler@@QEBAPEAUPF_ParamUtilsSuite1@@XZ ; AEGP_SuiteHandler::ParamUtilsSuite1
	mov	rcx, QWORD PTR tv607[rsp]
	mov	r8, rcx
	mov	edx, 43					; 0000002bH
	mov	rcx, QWORD PTR in_data$[rsp]
	mov	rcx, QWORD PTR [rcx+184]
	call	QWORD PTR [rax]
	mov	DWORD PTR err$[rsp], eax
$LN1@UpdatePara:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN4@UpdatePara

; 1239 : 
; 1240 : 	out_data->out_flags |=
; 1241 : 		PF_OutFlag_REFRESH_UI |
; 1242 : 		PF_OutFlag_FORCE_RERENDER;

	mov	rax, QWORD PTR out_data$[rsp]
	mov	eax, DWORD PTR [rax+96]
	or	eax, 4325376				; 00420000H
	mov	rcx, QWORD PTR out_data$[rsp]
	mov	DWORD PTR [rcx+96], eax

; 1243 : 
; 1244 : 	return PF_Err_NONE;

	mov	DWORD PTR $T1[rsp], 0
	lea	rcx, QWORD PTR suites$[rsp]
	call	??1AEGP_SuiteHandler@@QEAA@XZ		; AEGP_SuiteHandler::~AEGP_SuiteHandler
	mov	eax, DWORD PTR $T1[rsp]

; 1245 : }

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 10680				; 000029b8H
	pop	rdi
	pop	rsi
	ret	0
?UpdateParameterUI@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z ENDP ; UpdateParameterUI
_TEXT	ENDS
; Function compile flags: /Odtp
text$x	SEGMENT
err$ = 32
tv79 = 36
tv150 = 40
$T1 = 44
tv417 = 48
tv453 = 56
tv144 = 64
tv465 = 72
tv203 = 80
tv477 = 88
tv227 = 96
tv515 = 104
tv345 = 112
tv527 = 120
tv369 = 128
tv539 = 136
tv393 = 144
tv551 = 152
tv132 = 160
tv583 = 168
tv441 = 176
tv595 = 184
tv215 = 192
tv607 = 200
tv357 = 208
tv165 = 216
tv405 = 224
tv239 = 232
tv429 = 240
tv381 = 248
$T2 = 256
suites$ = 272
$T3 = 1136
niP$ = 1376
$T4 = 1616
param_copy$ = 1856
__$ArrayPad$ = 10656
in_data$ = 10704
out_data$ = 10712
params$ = 10720
outputP$ = 10728
?dtor$0@?0??UpdateParameterUI@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z@4HA PROC ; `UpdateParameterUI'::`1'::dtor$0
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
	lea	rcx, QWORD PTR suites$[rbp]
	call	??1AEGP_SuiteHandler@@QEAA@XZ		; AEGP_SuiteHandler::~AEGP_SuiteHandler
	add	rsp, 32					; 00000020H
	pop	rbp
	ret	0
?dtor$0@?0??UpdateParameterUI@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z@4HA ENDP ; `UpdateParameterUI'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp
; File c:\users\syuilo\documents\visual studio 2013\projects\after_effects_cs5_sdk_win\adobe after effects cs5 win sdk\examples\template\glitch\mt.h
_TEXT	SEGMENT
a$ = 32
b$ = 36
?genrand_res53@@YANXZ PROC				; genrand_res53

; 176  : {

$LN3:
	sub	rsp, 56					; 00000038H

; 177  :     unsigned long a = genrand_int32() >> 5, b = genrand_int32() >> 6;

	call	?genrand_int32@@YAKXZ			; genrand_int32
	shr	eax, 5
	mov	DWORD PTR a$[rsp], eax
	call	?genrand_int32@@YAKXZ			; genrand_int32
	shr	eax, 6
	mov	DWORD PTR b$[rsp], eax

; 178  :     return(a*67108864.0 + b)*(1.0 / 9007199254740992.0);

	mov	eax, DWORD PTR a$[rsp]
	cvtsi2sd xmm0, rax
	mulsd	xmm0, QWORD PTR __real@4190000000000000
	mov	eax, DWORD PTR b$[rsp]
	cvtsi2sd xmm1, rax
	addsd	xmm0, xmm1
	mulsd	xmm0, QWORD PTR __real@3ca0000000000000

; 179  : }

	add	rsp, 56					; 00000038H
	ret	0
?genrand_res53@@YANXZ ENDP				; genrand_res53
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\syuilo\documents\visual studio 2013\projects\after_effects_cs5_sdk_win\adobe after effects cs5 win sdk\examples\template\glitch\mt.h
_TEXT	SEGMENT
?genrand_real3@@YANXZ PROC				; genrand_real3

; 169  : {

$LN3:
	sub	rsp, 40					; 00000028H

; 170  :     return (((double)genrand_int32()) + 0.5)*(1.0 / 4294967296.0);

	call	?genrand_int32@@YAKXZ			; genrand_int32
	mov	eax, eax
	cvtsi2sd xmm0, rax
	addsd	xmm0, QWORD PTR __real@3fe0000000000000
	mulsd	xmm0, QWORD PTR __real@3df0000000000000

; 171  :     /* divided by 2^32 */
; 172  : }

	add	rsp, 40					; 00000028H
	ret	0
?genrand_real3@@YANXZ ENDP				; genrand_real3
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\syuilo\documents\visual studio 2013\projects\after_effects_cs5_sdk_win\adobe after effects cs5 win sdk\examples\template\glitch\mt.h
_TEXT	SEGMENT
?genrand_real2@@YANXZ PROC				; genrand_real2

; 162  : {

$LN3:
	sub	rsp, 40					; 00000028H

; 163  :     return genrand_int32()*(1.0 / 4294967296.0);

	call	?genrand_int32@@YAKXZ			; genrand_int32
	mov	eax, eax
	cvtsi2sd xmm0, rax
	mulsd	xmm0, QWORD PTR __real@3df0000000000000

; 164  :     /* divided by 2^32 */
; 165  : }

	add	rsp, 40					; 00000028H
	ret	0
?genrand_real2@@YANXZ ENDP				; genrand_real2
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\syuilo\documents\visual studio 2013\projects\after_effects_cs5_sdk_win\adobe after effects cs5 win sdk\examples\template\glitch\mt.h
_TEXT	SEGMENT
?genrand_real1@@YANXZ PROC				; genrand_real1

; 155  : {

$LN3:
	sub	rsp, 40					; 00000028H

; 156  :     return genrand_int32()*(1.0 / 4294967295.0);

	call	?genrand_int32@@YAKXZ			; genrand_int32
	mov	eax, eax
	cvtsi2sd xmm0, rax
	mulsd	xmm0, QWORD PTR __real@3df0000000100000

; 157  :     /* divided by 2^32-1 */
; 158  : }

	add	rsp, 40					; 00000028H
	ret	0
?genrand_real1@@YANXZ ENDP				; genrand_real1
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\syuilo\documents\visual studio 2013\projects\after_effects_cs5_sdk_win\adobe after effects cs5 win sdk\examples\template\glitch\mt.h
_TEXT	SEGMENT
?genrand_int31@@YAJXZ PROC				; genrand_int31

; 149  : {

$LN3:
	sub	rsp, 40					; 00000028H

; 150  :     return (long)(genrand_int32() >> 1);

	call	?genrand_int32@@YAKXZ			; genrand_int32
	shr	eax, 1

; 151  : }

	add	rsp, 40					; 00000028H
	ret	0
?genrand_int31@@YAJXZ ENDP				; genrand_int31
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\syuilo\documents\visual studio 2013\projects\after_effects_cs5_sdk_win\adobe after effects cs5 win sdk\examples\template\glitch\mt.h
_TEXT	SEGMENT
y$ = 32
kk$1 = 36
?genrand_int32@@YAKXZ PROC				; genrand_int32

; 111  : {

$LN11:
	sub	rsp, 56					; 00000038H

; 112  :     unsigned long y;
; 113  :     static unsigned long mag01[2] = { 0x0UL, MATRIX_A };
; 114  :     /* mag01[x] = x * MATRIX_A  for x=0,1 */
; 115  : 
; 116  :     if (mti >= MT_N) { /* generate N words at one time */

	cmp	DWORD PTR mti, 624			; 00000270H
	jl	$LN8@genrand_in

; 117  :         int kk;
; 118  : 
; 119  :         if (mti == MT_N + 1)   /* if init_genrand() has not been called, */

	cmp	DWORD PTR mti, 625			; 00000271H
	jne	SHORT $LN7@genrand_in

; 120  :             init_genrand(5489UL); /* a default initial seed is used */

	mov	ecx, 5489				; 00001571H
	call	?init_genrand@@YAXK@Z			; init_genrand
$LN7@genrand_in:

; 121  : 
; 122  :         for (kk = 0; kk<MT_N - MT_M; kk++) {

	mov	DWORD PTR kk$1[rsp], 0
	jmp	SHORT $LN6@genrand_in
$LN5@genrand_in:
	mov	eax, DWORD PTR kk$1[rsp]
	inc	eax
	mov	DWORD PTR kk$1[rsp], eax
$LN6@genrand_in:
	cmp	DWORD PTR kk$1[rsp], 227		; 000000e3H
	jge	SHORT $LN4@genrand_in

; 123  :             y = (mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);

	movsxd	rax, DWORD PTR kk$1[rsp]
	lea	rcx, OFFSET FLAT:mt
	mov	eax, DWORD PTR [rcx+rax*4]
	and	eax, -2147483648			; 80000000H
	mov	ecx, DWORD PTR kk$1[rsp]
	inc	ecx
	movsxd	rcx, ecx
	lea	rdx, OFFSET FLAT:mt
	mov	ecx, DWORD PTR [rdx+rcx*4]
	btr	ecx, 31
	or	eax, ecx
	mov	DWORD PTR y$[rsp], eax

; 124  :             mt[kk] = mt[kk + MT_M] ^ (y >> 1) ^ mag01[y & 0x1UL];

	mov	eax, DWORD PTR kk$1[rsp]
	add	eax, 397				; 0000018dH
	cdqe
	lea	rcx, OFFSET FLAT:mt
	mov	edx, DWORD PTR y$[rsp]
	shr	edx, 1
	mov	eax, DWORD PTR [rcx+rax*4]
	xor	eax, edx
	mov	ecx, DWORD PTR y$[rsp]
	and	ecx, 1
	mov	ecx, ecx
	lea	rdx, OFFSET FLAT:?mag01@?1??genrand_int32@@YAKXZ@4PAKA
	xor	eax, DWORD PTR [rdx+rcx*4]
	movsxd	rcx, DWORD PTR kk$1[rsp]
	lea	rdx, OFFSET FLAT:mt
	mov	DWORD PTR [rdx+rcx*4], eax

; 125  :         }

	jmp	$LN5@genrand_in
$LN4@genrand_in:

; 126  :         for (; kk<MT_N - 1; kk++) {

	jmp	SHORT $LN3@genrand_in
$LN2@genrand_in:
	mov	eax, DWORD PTR kk$1[rsp]
	inc	eax
	mov	DWORD PTR kk$1[rsp], eax
$LN3@genrand_in:
	cmp	DWORD PTR kk$1[rsp], 623		; 0000026fH
	jge	SHORT $LN1@genrand_in

; 127  :             y = (mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);

	movsxd	rax, DWORD PTR kk$1[rsp]
	lea	rcx, OFFSET FLAT:mt
	mov	eax, DWORD PTR [rcx+rax*4]
	and	eax, -2147483648			; 80000000H
	mov	ecx, DWORD PTR kk$1[rsp]
	inc	ecx
	movsxd	rcx, ecx
	lea	rdx, OFFSET FLAT:mt
	mov	ecx, DWORD PTR [rdx+rcx*4]
	btr	ecx, 31
	or	eax, ecx
	mov	DWORD PTR y$[rsp], eax

; 128  :             mt[kk] = mt[kk + (MT_M - MT_N)] ^ (y >> 1) ^ mag01[y & 0x1UL];

	mov	eax, DWORD PTR kk$1[rsp]
	sub	eax, 227				; 000000e3H
	cdqe
	lea	rcx, OFFSET FLAT:mt
	mov	edx, DWORD PTR y$[rsp]
	shr	edx, 1
	mov	eax, DWORD PTR [rcx+rax*4]
	xor	eax, edx
	mov	ecx, DWORD PTR y$[rsp]
	and	ecx, 1
	mov	ecx, ecx
	lea	rdx, OFFSET FLAT:?mag01@?1??genrand_int32@@YAKXZ@4PAKA
	xor	eax, DWORD PTR [rdx+rcx*4]
	movsxd	rcx, DWORD PTR kk$1[rsp]
	lea	rdx, OFFSET FLAT:mt
	mov	DWORD PTR [rdx+rcx*4], eax

; 129  :         }

	jmp	$LN2@genrand_in
$LN1@genrand_in:

; 130  :         y = (mt[MT_N - 1] & UPPER_MASK) | (mt[0] & LOWER_MASK);

	mov	eax, 4
	imul	rax, rax, 623				; 0000026fH
	lea	rcx, OFFSET FLAT:mt
	mov	eax, DWORD PTR [rcx+rax]
	and	eax, -2147483648			; 80000000H
	mov	ecx, 4
	imul	rcx, rcx, 0
	lea	rdx, OFFSET FLAT:mt
	mov	ecx, DWORD PTR [rdx+rcx]
	btr	ecx, 31
	or	eax, ecx
	mov	DWORD PTR y$[rsp], eax

; 131  :         mt[MT_N - 1] = mt[MT_M - 1] ^ (y >> 1) ^ mag01[y & 0x1UL];

	mov	eax, 4
	imul	rax, rax, 396				; 0000018cH
	lea	rcx, OFFSET FLAT:mt
	mov	edx, DWORD PTR y$[rsp]
	shr	edx, 1
	mov	eax, DWORD PTR [rcx+rax]
	xor	eax, edx
	mov	ecx, DWORD PTR y$[rsp]
	and	ecx, 1
	mov	ecx, ecx
	lea	rdx, OFFSET FLAT:?mag01@?1??genrand_int32@@YAKXZ@4PAKA
	xor	eax, DWORD PTR [rdx+rcx*4]
	mov	ecx, 4
	imul	rcx, rcx, 623				; 0000026fH
	lea	rdx, OFFSET FLAT:mt
	mov	DWORD PTR [rdx+rcx], eax

; 132  : 
; 133  :         mti = 0;

	mov	DWORD PTR mti, 0
$LN8@genrand_in:

; 134  :     }
; 135  : 
; 136  :     y = mt[mti++];

	movsxd	rax, DWORD PTR mti
	lea	rcx, OFFSET FLAT:mt
	mov	eax, DWORD PTR [rcx+rax*4]
	mov	DWORD PTR y$[rsp], eax
	mov	eax, DWORD PTR mti
	inc	eax
	mov	DWORD PTR mti, eax

; 137  : 
; 138  :     /* Tempering */
; 139  :     y ^= (y >> 11);

	mov	eax, DWORD PTR y$[rsp]
	shr	eax, 11
	mov	ecx, DWORD PTR y$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR y$[rsp], eax

; 140  :     y ^= (y << 7) & 0x9d2c5680UL;

	mov	eax, DWORD PTR y$[rsp]
	shl	eax, 7
	and	eax, -1658038656			; 9d2c5680H
	mov	ecx, DWORD PTR y$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR y$[rsp], eax

; 141  :     y ^= (y << 15) & 0xefc60000UL;

	mov	eax, DWORD PTR y$[rsp]
	shl	eax, 15
	and	eax, -272236544				; efc60000H
	mov	ecx, DWORD PTR y$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR y$[rsp], eax

; 142  :     y ^= (y >> 18);

	mov	eax, DWORD PTR y$[rsp]
	shr	eax, 18
	mov	ecx, DWORD PTR y$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR y$[rsp], eax

; 143  : 
; 144  :     return y;

	mov	eax, DWORD PTR y$[rsp]

; 145  : }

	add	rsp, 56					; 00000038H
	ret	0
?genrand_int32@@YAKXZ ENDP				; genrand_int32
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\syuilo\documents\visual studio 2013\projects\after_effects_cs5_sdk_win\adobe after effects cs5 win sdk\examples\template\glitch\mt.h
_TEXT	SEGMENT
i$ = 32
k$ = 36
j$ = 40
tv66 = 44
init_key$ = 64
key_length$ = 72
?init_by_array@@YAXQEAKH@Z PROC				; init_by_array

; 85   : {

$LN14:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 86   :     int i, j, k;
; 87   :     init_genrand(19650218UL);

	mov	ecx, 19650218				; 012bd6aaH
	call	?init_genrand@@YAXK@Z			; init_genrand

; 88   :     i = 1; j = 0;

	mov	DWORD PTR i$[rsp], 1
	mov	DWORD PTR j$[rsp], 0

; 89   :     k = (MT_N>key_length ? MT_N : key_length);

	cmp	DWORD PTR key_length$[rsp], 624		; 00000270H
	jge	SHORT $LN12@init_by_ar
	mov	DWORD PTR tv66[rsp], 624		; 00000270H
	jmp	SHORT $LN13@init_by_ar
$LN12@init_by_ar:
	mov	eax, DWORD PTR key_length$[rsp]
	mov	DWORD PTR tv66[rsp], eax
$LN13@init_by_ar:
	mov	eax, DWORD PTR tv66[rsp]
	mov	DWORD PTR k$[rsp], eax

; 90   :     for (; k; k--) {

	jmp	SHORT $LN9@init_by_ar
$LN8@init_by_ar:
	mov	eax, DWORD PTR k$[rsp]
	dec	eax
	mov	DWORD PTR k$[rsp], eax
$LN9@init_by_ar:
	cmp	DWORD PTR k$[rsp], 0
	je	$LN7@init_by_ar

; 91   :         mt[i] = (mt[i] ^ ((mt[i - 1] ^ (mt[i - 1] >> 30)) * 1664525UL))
; 92   :             + init_key[j] + j; /* non linear */

	movsxd	rax, DWORD PTR i$[rsp]
	lea	rcx, OFFSET FLAT:mt
	mov	edx, DWORD PTR i$[rsp]
	dec	edx
	movsxd	rdx, edx
	lea	r8, OFFSET FLAT:mt
	mov	r9d, DWORD PTR i$[rsp]
	dec	r9d
	movsxd	r9, r9d
	lea	r10, OFFSET FLAT:mt
	mov	r9d, DWORD PTR [r10+r9*4]
	shr	r9d, 30
	mov	edx, DWORD PTR [r8+rdx*4]
	xor	edx, r9d
	imul	edx, edx, 1664525			; 0019660dH
	mov	eax, DWORD PTR [rcx+rax*4]
	xor	eax, edx
	movsxd	rcx, DWORD PTR j$[rsp]
	mov	rdx, QWORD PTR init_key$[rsp]
	add	eax, DWORD PTR [rdx+rcx*4]
	add	eax, DWORD PTR j$[rsp]
	movsxd	rcx, DWORD PTR i$[rsp]
	lea	rdx, OFFSET FLAT:mt
	mov	DWORD PTR [rdx+rcx*4], eax

; 93   :         mt[i] &= 0xffffffffUL; /* for WORDSIZE > 32 machines */

	movsxd	rax, DWORD PTR i$[rsp]
	lea	rcx, OFFSET FLAT:mt
	movsxd	rdx, DWORD PTR i$[rsp]
	lea	r8, OFFSET FLAT:mt
	mov	eax, DWORD PTR [rcx+rax*4]
	mov	DWORD PTR [r8+rdx*4], eax

; 94   :         i++; j++;

	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax

; 95   :         if (i >= MT_N) { mt[0] = mt[MT_N - 1]; i = 1; }

	cmp	DWORD PTR i$[rsp], 624			; 00000270H
	jl	SHORT $LN6@init_by_ar
	mov	eax, 4
	imul	rax, rax, 623				; 0000026fH
	lea	rcx, OFFSET FLAT:mt
	mov	edx, 4
	imul	rdx, rdx, 0
	lea	r8, OFFSET FLAT:mt
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR [r8+rdx], eax
	mov	DWORD PTR i$[rsp], 1
$LN6@init_by_ar:

; 96   :         if (j >= key_length) j = 0;

	mov	eax, DWORD PTR key_length$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jl	SHORT $LN5@init_by_ar
	mov	DWORD PTR j$[rsp], 0
$LN5@init_by_ar:

; 97   :     }

	jmp	$LN8@init_by_ar
$LN7@init_by_ar:

; 98   :     for (k = MT_N - 1; k; k--) {

	mov	DWORD PTR k$[rsp], 623			; 0000026fH
	jmp	SHORT $LN4@init_by_ar
$LN3@init_by_ar:
	mov	eax, DWORD PTR k$[rsp]
	dec	eax
	mov	DWORD PTR k$[rsp], eax
$LN4@init_by_ar:
	cmp	DWORD PTR k$[rsp], 0
	je	$LN2@init_by_ar

; 99   :         mt[i] = (mt[i] ^ ((mt[i - 1] ^ (mt[i - 1] >> 30)) * 1566083941UL))
; 100  :             - i; /* non linear */

	movsxd	rax, DWORD PTR i$[rsp]
	lea	rcx, OFFSET FLAT:mt
	mov	edx, DWORD PTR i$[rsp]
	dec	edx
	movsxd	rdx, edx
	lea	r8, OFFSET FLAT:mt
	mov	r9d, DWORD PTR i$[rsp]
	dec	r9d
	movsxd	r9, r9d
	lea	r10, OFFSET FLAT:mt
	mov	r9d, DWORD PTR [r10+r9*4]
	shr	r9d, 30
	mov	edx, DWORD PTR [r8+rdx*4]
	xor	edx, r9d
	imul	edx, edx, 1566083941			; 5d588b65H
	mov	eax, DWORD PTR [rcx+rax*4]
	xor	eax, edx
	sub	eax, DWORD PTR i$[rsp]
	movsxd	rcx, DWORD PTR i$[rsp]
	lea	rdx, OFFSET FLAT:mt
	mov	DWORD PTR [rdx+rcx*4], eax

; 101  :         mt[i] &= 0xffffffffUL; /* for WORDSIZE > 32 machines */

	movsxd	rax, DWORD PTR i$[rsp]
	lea	rcx, OFFSET FLAT:mt
	movsxd	rdx, DWORD PTR i$[rsp]
	lea	r8, OFFSET FLAT:mt
	mov	eax, DWORD PTR [rcx+rax*4]
	mov	DWORD PTR [r8+rdx*4], eax

; 102  :         i++;

	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax

; 103  :         if (i >= MT_N) { mt[0] = mt[MT_N - 1]; i = 1; }

	cmp	DWORD PTR i$[rsp], 624			; 00000270H
	jl	SHORT $LN1@init_by_ar
	mov	eax, 4
	imul	rax, rax, 623				; 0000026fH
	lea	rcx, OFFSET FLAT:mt
	mov	edx, 4
	imul	rdx, rdx, 0
	lea	r8, OFFSET FLAT:mt
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR [r8+rdx], eax
	mov	DWORD PTR i$[rsp], 1
$LN1@init_by_ar:

; 104  :     }

	jmp	$LN3@init_by_ar
$LN2@init_by_ar:

; 105  : 
; 106  :     mt[0] = 0x80000000UL; /* MSB is 1; assuring non-zero initial array */

	mov	eax, 4
	imul	rax, rax, 0
	lea	rcx, OFFSET FLAT:mt
	mov	DWORD PTR [rcx+rax], -2147483648	; 80000000H

; 107  : }

	add	rsp, 56					; 00000038H
	ret	0
?init_by_array@@YAXQEAKH@Z ENDP				; init_by_array
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\syuilo\documents\visual studio 2013\projects\after_effects_cs5_sdk_win\adobe after effects cs5 win sdk\examples\template\glitch\mt.h
_TEXT	SEGMENT
s$ = 8
?init_genrand@@YAXK@Z PROC				; init_genrand

; 66   : {

	mov	DWORD PTR [rsp+8], ecx

; 67   :     mt[0] = s & 0xffffffffUL;

	mov	eax, 4
	imul	rax, rax, 0
	lea	rcx, OFFSET FLAT:mt
	mov	edx, DWORD PTR s$[rsp]
	mov	DWORD PTR [rcx+rax], edx

; 68   :     for (mti = 1; mti<MT_N; mti++) {

	mov	DWORD PTR mti, 1
	jmp	SHORT $LN3@init_genra
$LN2@init_genra:
	mov	eax, DWORD PTR mti
	inc	eax
	mov	DWORD PTR mti, eax
$LN3@init_genra:
	cmp	DWORD PTR mti, 624			; 00000270H
	jge	SHORT $LN1@init_genra

; 69   :         mt[mti] =
; 70   :             (1812433253UL * (mt[mti - 1] ^ (mt[mti - 1] >> 30)) + mti);

	mov	eax, DWORD PTR mti
	dec	eax
	cdqe
	lea	rcx, OFFSET FLAT:mt
	mov	edx, DWORD PTR mti
	dec	edx
	movsxd	rdx, edx
	lea	r8, OFFSET FLAT:mt
	mov	edx, DWORD PTR [r8+rdx*4]
	shr	edx, 30
	mov	eax, DWORD PTR [rcx+rax*4]
	xor	eax, edx
	imul	eax, eax, 1812433253			; 6c078965H
	add	eax, DWORD PTR mti
	movsxd	rcx, DWORD PTR mti
	lea	rdx, OFFSET FLAT:mt
	mov	DWORD PTR [rdx+rcx*4], eax

; 71   :         /* See Knuth TAOCP Vol2. 3rd Ed. P.106 for multiplier. */
; 72   :         /* In the previous versions, MSBs of the seed affect   */
; 73   :         /* only MSBs of the array mt[].                        */
; 74   :         /* 2002/01/09 modified by Makoto Matsumoto             */
; 75   :         mt[mti] &= 0xffffffffUL;

	movsxd	rax, DWORD PTR mti
	lea	rcx, OFFSET FLAT:mt
	movsxd	rdx, DWORD PTR mti
	lea	r8, OFFSET FLAT:mt
	mov	eax, DWORD PTR [rcx+rax*4]
	mov	DWORD PTR [r8+rdx*4], eax

; 76   :         /* for >32 bit machines */
; 77   :     }

	jmp	$LN2@init_genra
$LN1@init_genra:

; 78   : }

	ret	0
?init_genrand@@YAXK@Z ENDP				; init_genrand
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\syuilo\documents\visual studio 2013\projects\after_effects_cs5_sdk_win\adobe after effects cs5 win sdk\examples\template\glitch\glitch.cpp
_TEXT	SEGMENT
err$ = 32
tv64 = 36
tv131 = 40
tv132 = 44
tv133 = 48
tv129 = 52
tv134 = 56
tv130 = 60
$T1 = 64
cmd$ = 96
in_data$ = 104
out_data$ = 112
params$ = 120
output$ = 128
extra$ = 136
EntryPointFunc PROC

; 1249 : {

$LN19:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 88					; 00000058H
	mov	QWORD PTR $T1[rsp], -2

; 1250 : 	PF_Err		err = PF_Err_NONE;

	mov	DWORD PTR err$[rsp], 0

; 1251 : 
; 1252 : 	try {
; 1253 : 		switch (cmd) {

	mov	eax, DWORD PTR cmd$[rsp]
	mov	DWORD PTR tv64[rsp], eax
	cmp	DWORD PTR tv64[rsp], 14
	ja	$LN8@EntryPoint
	movsxd	rax, DWORD PTR tv64[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN17@EntryPoint[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN7@EntryPoint:

; 1254 : 			case PF_Cmd_ABOUT:
; 1255 : 				err = About(in_data, out_data, params, output);

	mov	r9, QWORD PTR output$[rsp]
	mov	r8, QWORD PTR params$[rsp]
	mov	rdx, QWORD PTR out_data$[rsp]
	mov	rcx, QWORD PTR in_data$[rsp]
	call	?About@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z ; About
	mov	DWORD PTR tv129[rsp], eax
	mov	eax, DWORD PTR tv129[rsp]
	mov	DWORD PTR err$[rsp], eax

; 1256 : 				break;

	jmp	$LN8@EntryPoint
$LN6@EntryPoint:

; 1257 : 
; 1258 : 			case PF_Cmd_GLOBAL_SETUP:
; 1259 : 				err = GlobalSetup(in_data, out_data, params, output);

	mov	r9, QWORD PTR output$[rsp]
	mov	r8, QWORD PTR params$[rsp]
	mov	rdx, QWORD PTR out_data$[rsp]
	mov	rcx, QWORD PTR in_data$[rsp]
	call	?GlobalSetup@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z ; GlobalSetup
	mov	DWORD PTR tv130[rsp], eax
	mov	eax, DWORD PTR tv130[rsp]
	mov	DWORD PTR err$[rsp], eax

; 1260 : 				break;

	jmp	$LN8@EntryPoint
$LN5@EntryPoint:

; 1261 : 
; 1262 : 			case PF_Cmd_PARAMS_SETUP:
; 1263 : 				err = ParamsSetup(in_data, out_data, params, output);

	mov	r9, QWORD PTR output$[rsp]
	mov	r8, QWORD PTR params$[rsp]
	mov	rdx, QWORD PTR out_data$[rsp]
	mov	rcx, QWORD PTR in_data$[rsp]
	call	?ParamsSetup@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z ; ParamsSetup
	mov	DWORD PTR tv131[rsp], eax
	mov	eax, DWORD PTR tv131[rsp]
	mov	DWORD PTR err$[rsp], eax

; 1264 : 				break;

	jmp	SHORT $LN8@EntryPoint

; 1265 : 
; 1266 : 			case PF_Cmd_SEQUENCE_SETUP:
; 1267 : 				/*err = UpdateParameterUI(in_data,
; 1268 : 					out_data,
; 1269 : 					params,
; 1270 : 					output);*/
; 1271 : 				break;

	jmp	SHORT $LN8@EntryPoint
$LN3@EntryPoint:

; 1272 : 
; 1273 : 			case PF_Cmd_USER_CHANGED_PARAM:
; 1274 : 				err = UpdateParameterUI(in_data,
; 1275 : 					out_data,
; 1276 : 					params,
; 1277 : 					output);

	mov	r9, QWORD PTR output$[rsp]
	mov	r8, QWORD PTR params$[rsp]
	mov	rdx, QWORD PTR out_data$[rsp]
	mov	rcx, QWORD PTR in_data$[rsp]
	call	?UpdateParameterUI@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z ; UpdateParameterUI
	mov	DWORD PTR tv132[rsp], eax
	mov	eax, DWORD PTR tv132[rsp]
	mov	DWORD PTR err$[rsp], eax

; 1278 : 				break;

	jmp	SHORT $LN8@EntryPoint
$LN2@EntryPoint:

; 1279 : 
; 1280 : 			case PF_Cmd_UPDATE_PARAMS_UI:
; 1281 : 				err = UpdateParameterUI(in_data,
; 1282 : 					out_data,
; 1283 : 					params,
; 1284 : 					output);

	mov	r9, QWORD PTR output$[rsp]
	mov	r8, QWORD PTR params$[rsp]
	mov	rdx, QWORD PTR out_data$[rsp]
	mov	rcx, QWORD PTR in_data$[rsp]
	call	?UpdateParameterUI@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z ; UpdateParameterUI
	mov	DWORD PTR tv133[rsp], eax
	mov	eax, DWORD PTR tv133[rsp]
	mov	DWORD PTR err$[rsp], eax

; 1285 : 				break;

	jmp	SHORT $LN8@EntryPoint
$LN1@EntryPoint:

; 1286 : 
; 1287 : 			case PF_Cmd_RENDER:
; 1288 : 				err = Render(in_data, out_data, params, output);

	mov	r9, QWORD PTR output$[rsp]
	mov	r8, QWORD PTR params$[rsp]
	mov	rdx, QWORD PTR out_data$[rsp]
	mov	rcx, QWORD PTR in_data$[rsp]
	call	?Render@@YAJPEAUPF_InData@@PEAUPF_OutData@@QEAPEAUPF_ParamDef@@PEAUPF_LayerDef@@@Z ; Render
	mov	DWORD PTR tv134[rsp], eax
	mov	eax, DWORD PTR tv134[rsp]
	mov	DWORD PTR err$[rsp], eax
$LN8@EntryPoint:
	jmp	SHORT $LN15@EntryPoint
$LN16@EntryPoint:
$LN15@EntryPoint:

; 1289 : 				break;
; 1290 : 		}
; 1291 : 	} catch (PF_Err &thrown_err) {
; 1292 : 		//err = thrown_err;
; 1293 : 	}
; 1294 : 	return err;

	mov	eax, DWORD PTR err$[rsp]

; 1295 : }

	add	rsp, 88					; 00000058H
	ret	0
$LN17@EntryPoint:
	DD	$LN7@EntryPoint
	DD	$LN6@EntryPoint
	DD	$LN8@EntryPoint
	DD	$LN8@EntryPoint
	DD	$LN5@EntryPoint
	DD	$LN8@EntryPoint
	DD	$LN8@EntryPoint
	DD	$LN8@EntryPoint
	DD	$LN8@EntryPoint
	DD	$LN8@EntryPoint
	DD	$LN8@EntryPoint
	DD	$LN1@EntryPoint
	DD	$LN8@EntryPoint
	DD	$LN3@EntryPoint
	DD	$LN2@EntryPoint
EntryPointFunc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
text$x	SEGMENT
err$ = 32
tv64 = 36
tv131 = 40
tv132 = 44
tv133 = 48
tv129 = 52
tv134 = 56
tv130 = 60
$T1 = 64
cmd$ = 96
in_data$ = 104
out_data$ = 112
params$ = 120
output$ = 128
extra$ = 136
EntryPointFunc$catch$0 PROC

; 1291 : 	} catch (PF_Err &thrown_err) {

	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
__catch$EntryPointFunc$0:

; 1292 : 		//err = thrown_err;
; 1293 : 	}

	lea	rax, $LN16@EntryPoint
	add	rsp, 32					; 00000020H
	pop	rbp
	ret	0
	int	3
EntryPointFunc$catch$0 ENDP
text$x	ENDS
; Function compile flags: /Odtp
; File c:\users\syuilo\documents\visual studio 2013\projects\after_effects_cs5_sdk_win\adobe after effects cs5 win sdk\examples\util\aegp_suitehandler.h
;	COMDAT ?ANSICallbacksSuite1@AEGP_SuiteHandler@@QEBAPEAUPF_ANSICallbacksSuite1@@XZ
_TEXT	SEGMENT
this$ = 48
?ANSICallbacksSuite1@AEGP_SuiteHandler@@QEBAPEAUPF_ANSICallbacksSuite1@@XZ PROC ; AEGP_SuiteHandler::ANSICallbacksSuite1, COMDAT

; 417  : 	AEGP_SUITE_ACCESS_BOILERPLATE(ANSICallbacksSuite, 1, PF_, ansi_callbacks_suite1P, kPFANSISuite, kPFANSISuiteVersion1);

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
	mov	rax, QWORD PTR this$[rsp]
	cmp	QWORD PTR [rax+312], 0
	jne	SHORT $LN1@ANSICallba
	mov	r8d, 1
	lea	rdx, OFFSET FLAT:??_C@_0O@JPGHEGPP@PF?5ANSI?5Suite?$AA@
	mov	rcx, QWORD PTR this$[rsp]
	call	?LoadSuite@AEGP_SuiteHandler@@AEBAPEAXPEADJ@Z ; AEGP_SuiteHandler::LoadSuite
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx+312], rax
$LN1@ANSICallba:
	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+312]
	add	rsp, 40					; 00000028H
	ret	0
?ANSICallbacksSuite1@AEGP_SuiteHandler@@QEBAPEAUPF_ANSICallbacksSuite1@@XZ ENDP ; AEGP_SuiteHandler::ANSICallbacksSuite1
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\syuilo\documents\visual studio 2013\projects\after_effects_cs5_sdk_win\adobe after effects cs5 win sdk\examples\util\aegp_suitehandler.h
;	COMDAT ?ParamUtilsSuite1@AEGP_SuiteHandler@@QEBAPEAUPF_ParamUtilsSuite1@@XZ
_TEXT	SEGMENT
this$ = 48
?ParamUtilsSuite1@AEGP_SuiteHandler@@QEBAPEAUPF_ParamUtilsSuite1@@XZ PROC ; AEGP_SuiteHandler::ParamUtilsSuite1, COMDAT

; 403  : 	AEGP_SUITE_ACCESS_BOILERPLATE(ParamUtilsSuite, 1, PF_, param_utils_suite1P, kPFParamUtilsSuite, kPFParamUtilsSuiteVersion1);

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
	mov	rax, QWORD PTR this$[rsp]
	cmp	QWORD PTR [rax+392], 0
	jne	SHORT $LN1@ParamUtils
	mov	r8d, 2
	lea	rdx, OFFSET FLAT:??_C@_0BF@PLAGCOPE@PF?5Param?5Utils?5Suite?$AA@
	mov	rcx, QWORD PTR this$[rsp]
	call	?LoadSuite@AEGP_SuiteHandler@@AEBAPEAXPEADJ@Z ; AEGP_SuiteHandler::LoadSuite
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx+392], rax
$LN1@ParamUtils:
	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+392]
	add	rsp, 40					; 00000028H
	ret	0
?ParamUtilsSuite1@AEGP_SuiteHandler@@QEBAPEAUPF_ParamUtilsSuite1@@XZ ENDP ; AEGP_SuiteHandler::ParamUtilsSuite1
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\syuilo\documents\visual studio 2013\projects\after_effects_cs5_sdk_win\adobe after effects cs5 win sdk\examples\util\aegp_suitehandler.h
;	COMDAT ?LoadSuite@AEGP_SuiteHandler@@AEBAPEAXPEADJ@Z
_TEXT	SEGMENT
err$ = 32
suiteP$ = 40
this$ = 64
nameZ$ = 72
versionL$ = 80
?LoadSuite@AEGP_SuiteHandler@@AEBAPEAXPEADJ@Z PROC	; AEGP_SuiteHandler::LoadSuite, COMDAT

; 218  : 	{

$LN5:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 219  : 		const void *suiteP;
; 220  : 		A_long err = i_pica_basicP->AcquireSuite(nameZ, versionL, &suiteP);

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax]
	lea	r8, QWORD PTR suiteP$[rsp]
	mov	edx, DWORD PTR versionL$[rsp]
	mov	rcx, QWORD PTR nameZ$[rsp]
	call	QWORD PTR [rax]
	mov	DWORD PTR err$[rsp], eax

; 221  : 
; 222  : 		if (err || !suiteP) {

	cmp	DWORD PTR err$[rsp], 0
	jne	SHORT $LN1@LoadSuite
	cmp	QWORD PTR suiteP$[rsp], 0
	jne	SHORT $LN2@LoadSuite
$LN1@LoadSuite:

; 223  : 			MissingSuiteError();

	mov	rcx, QWORD PTR this$[rsp]
	call	?MissingSuiteError@AEGP_SuiteHandler@@AEBAXXZ ; AEGP_SuiteHandler::MissingSuiteError
$LN2@LoadSuite:

; 224  : 		}
; 225  : 
; 226  : 		return (void*)suiteP;

	mov	rax, QWORD PTR suiteP$[rsp]

; 227  : 	}

	add	rsp, 56					; 00000038H
	ret	0
?LoadSuite@AEGP_SuiteHandler@@AEBAPEAXPEADJ@Z ENDP	; AEGP_SuiteHandler::LoadSuite
_TEXT	ENDS
END
